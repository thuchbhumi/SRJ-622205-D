
ty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009694  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009830  08009830  00019830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009898  08009898  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009898  08009898  00019898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098a0  080098a0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080098a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000098  0800993c  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  0800993c  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f25c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8c  00000000  00000000  0002f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000320d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165b6  00000000  00000000  00032f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1fb  00000000  00000000  00049506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008efca  00000000  00000000  00058701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e76cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004538  00000000  00000000  000e7720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009814 	.word	0x08009814

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08009814 	.word	0x08009814

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	0000      	movs	r0, r0
	...

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fed6 	bl	8002e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f916 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fb52 	bl	800171c <MX_GPIO_Init>
  MX_DMA_Init();
 8001078:	f000 fb28 	bl	80016cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800107c:	f000 fafc 	bl	8001678 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001080:	f000 f976 	bl	8001370 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001084:	f000 f9a2 	bl	80013cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001088:	f000 fa44 	bl	8001514 <MX_TIM3_Init>
  MX_TIM2_Init();
 800108c:	f000 f9f6 	bl	800147c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001090:	f000 faa4 	bl	80015dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001094:	4872      	ldr	r0, [pc, #456]	; (8001260 <main+0x1f8>)
 8001096:	f005 fe58 	bl	8006d4a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 800109a:	4872      	ldr	r0, [pc, #456]	; (8001264 <main+0x1fc>)
 800109c:	f005 fe31 	bl	8006d02 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	4870      	ldr	r0, [pc, #448]	; (8001264 <main+0x1fc>)
 80010a4:	f005 fea0 	bl	8006de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010a8:	2104      	movs	r1, #4
 80010aa:	486e      	ldr	r0, [pc, #440]	; (8001264 <main+0x1fc>)
 80010ac:	f005 fe9c 	bl	8006de8 <HAL_TIM_PWM_Start>

  PWMOut = 0;
 80010b0:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <main+0x200>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
  MotorDrive();
 80010b6:	f001 fad9 	bl	800266c <MotorDrive>
  HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f001 ff20 	bl	8002f00 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /////////////////////////////////////////////////////////////////////////////////////
  while (1)
  {
	  if(push==1)
 80010c0:	4b6a      	ldr	r3, [pc, #424]	; (800126c <main+0x204>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <main+0x6c>
	  		{push=0;
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <main+0x204>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	  		HAL_TIM_Base_Start_IT(&htim4);}
 80010ce:	4868      	ldr	r0, [pc, #416]	; (8001270 <main+0x208>)
 80010d0:	f005 fe3b 	bl	8006d4a <HAL_TIM_Base_Start_IT>


	  if (micros() - Timestamp >= 1000) //1000us = 0.001s = 1kHz
 80010d4:	f001 fab0 	bl	8002638 <micros>
 80010d8:	4b66      	ldr	r3, [pc, #408]	; (8001274 <main+0x20c>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	1a84      	subs	r4, r0, r2
 80010e0:	eb61 0503 	sbc.w	r5, r1, r3
 80010e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	42ab      	cmp	r3, r5
 80010ee:	bf08      	it	eq
 80010f0:	42a2      	cmpeq	r2, r4
 80010f2:	f080 80aa 	bcs.w	800124a <main+0x1e2>
	  {
		  Timestamp = micros();
 80010f6:	f001 fa9f 	bl	8002638 <micros>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	495d      	ldr	r1, [pc, #372]	; (8001274 <main+0x20c>)
 8001100:	e9c1 2300 	strd	r2, r3, [r1]
		  NucleoCheck();
 8001104:	f000 fb88 	bl	8001818 <NucleoCheck>
//		  MicroCheck();
//		  ProxiCheck();
//		  I2C_Check();


		  RobotArm_Position = EncoderPosition_Update();
 8001108:	f000 fbaa 	bl	8001860 <EncoderPosition_Update>
 800110c:	ee07 0a90 	vmov	s15, r0
 8001110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001114:	4b58      	ldr	r3, [pc, #352]	; (8001278 <main+0x210>)
 8001116:	edc3 7a00 	vstr	s15, [r3]
		  rb_pos = (float)(RobotArm_Position*360.00/7200.00);
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <main+0x210>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9be 	bl	80004a0 <__aeabi_f2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b54      	ldr	r3, [pc, #336]	; (800127c <main+0x214>)
 800112a:	f7ff fa11 	bl	8000550 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	a348      	add	r3, pc, #288	; (adr r3, 8001258 <main+0x1f0>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fb32 	bl	80007a4 <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fcb2 	bl	8000ab0 <__aeabi_d2f>
 800114c:	4603      	mov	r3, r0
 800114e:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <main+0x218>)
 8001150:	6013      	str	r3, [r2, #0]

		  static Transition_State State = Set_Home;

		  switch(State)
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <main+0x21c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d879      	bhi.n	800124e <main+0x1e6>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <main+0xf8>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	08001175 	.word	0x08001175
 8001164:	08001195 	.word	0x08001195
 8001168:	080011bb 	.word	0x080011bb
 800116c:	080011c3 	.word	0x080011c3
 8001170:	0800123f 	.word	0x0800123f
		  {
		  	  case Set_Home:
		  		  PWMOut = 2000;
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <main+0x200>)
 8001176:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800117a:	601a      	str	r2, [r3, #0]
		  		  MotorDrive();
 800117c:	f001 fa76 	bl	800266c <MotorDrive>
		  		  HAL_Delay(2000);
 8001180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001184:	f001 febc 	bl	8002f00 <HAL_Delay>
		  		  SetHome();
 8001188:	f001 fa94 	bl	80026b4 <SetHome>
		  		  State = UART_Commu;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <main+0x21c>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
		  		  break;
 8001192:	e05f      	b.n	8001254 <main+0x1ec>

		  	  case UART_Commu:
		  		  if(Desired_Position != RobotArm_Position && RobotArmTrigger != 0)
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <main+0x220>)
 8001196:	ed93 7a00 	vldr	s14, [r3]
 800119a:	4b37      	ldr	r3, [pc, #220]	; (8001278 <main+0x210>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	d053      	beq.n	8001252 <main+0x1ea>
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <main+0x224>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d04f      	beq.n	8001252 <main+0x1ea>
		  		  {
		  			  State = Traj_Plan;
 80011b2:	4b34      	ldr	r3, [pc, #208]	; (8001284 <main+0x21c>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	701a      	strb	r2, [r3, #0]
		  		  }
		  		  break;
 80011b8:	e04b      	b.n	8001252 <main+0x1ea>

		  	  case Traj_Plan:
		  		  State = Arm_Move;
 80011ba:	4b32      	ldr	r3, [pc, #200]	; (8001284 <main+0x21c>)
 80011bc:	2203      	movs	r2, #3
 80011be:	701a      	strb	r2, [r3, #0]
		  		  break;
 80011c0:	e048      	b.n	8001254 <main+0x1ec>

		  	  case Arm_Move:
		  		  if(Desired_Position == RobotArm_Position)
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <main+0x220>)
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <main+0x210>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d12d      	bne.n	8001234 <main+0x1cc>
		  		  {
		  			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <main+0x1fc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
		  			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 10000);
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <main+0x1fc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
		  			  HAL_Delay(500);
 80011ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f0:	f001 fe86 	bl	8002f00 <HAL_Delay>

		  			  PWMOut = 0;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <main+0x200>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
		  			  MotorDrive();
 80011fa:	f001 fa37 	bl	800266c <MotorDrive>
		  			  HAL_Delay(500);
 80011fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001202:	f001 fe7d 	bl	8002f00 <HAL_Delay>

		  			  RobotArmTrigger = 0;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <main+0x224>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]

		  			  Error_Position  	= 0;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <main+0x228>)
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
		  			  Error_Position_Sum= 0;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <main+0x22c>)
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
		  			  Error_Position_Div= 0;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <main+0x230>)
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
		  			  Error_Position_Old= 0;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <main+0x234>)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

		  			  State = I2C_Endeff;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <main+0x21c>)
 800122e:	2204      	movs	r2, #4
 8001230:	701a      	strb	r2, [r3, #0]
		  		  else
		  		  {
		  			  Control();
		  			  MotorDrive();
		  		  }
		  		  break;
 8001232:	e00f      	b.n	8001254 <main+0x1ec>
		  			  Control();
 8001234:	f001 fa78 	bl	8002728 <Control>
		  			  MotorDrive();
 8001238:	f001 fa18 	bl	800266c <MotorDrive>
		  		  break;
 800123c:	e00a      	b.n	8001254 <main+0x1ec>

		  	  case I2C_Endeff:
		  		  I2C_Laser();
 800123e:	f001 fae1 	bl	8002804 <I2C_Laser>
		  		  State = UART_Commu;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <main+0x21c>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
		  		  break;
 8001248:	e004      	b.n	8001254 <main+0x1ec>
		  	  default:
		  		  break;
			}
	  }
 800124a:	bf00      	nop
 800124c:	e738      	b.n	80010c0 <main+0x58>
		  		  break;
 800124e:	bf00      	nop
 8001250:	e736      	b.n	80010c0 <main+0x58>
		  		  break;
 8001252:	bf00      	nop
	  if(push==1)
 8001254:	e734      	b.n	80010c0 <main+0x58>
 8001256:	bf00      	nop
 8001258:	00000000 	.word	0x00000000
 800125c:	40bc2000 	.word	0x40bc2000
 8001260:	20000360 	.word	0x20000360
 8001264:	20000280 	.word	0x20000280
 8001268:	200000c8 	.word	0x200000c8
 800126c:	20000168 	.word	0x20000168
 8001270:	200001ec 	.word	0x200001ec
 8001274:	200000c0 	.word	0x200000c0
 8001278:	200000cc 	.word	0x200000cc
 800127c:	40768000 	.word	0x40768000
 8001280:	20000174 	.word	0x20000174
 8001284:	20000178 	.word	0x20000178
 8001288:	200000d0 	.word	0x200000d0
 800128c:	200000d4 	.word	0x200000d4
 8001290:	200000d8 	.word	0x200000d8
 8001294:	200000dc 	.word	0x200000dc
 8001298:	200000e0 	.word	0x200000e0
 800129c:	200000e4 	.word	0x200000e4

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 faf2 	bl	8008898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <SystemClock_Config+0xc8>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <SystemClock_Config+0xc8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <SystemClock_Config+0xcc>)
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <SystemClock_Config+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2310      	movs	r3, #16
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001310:	2308      	movs	r3, #8
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f855 	bl	80063d4 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001330:	f001 faa0 	bl	8002874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2103      	movs	r1, #3
 8001350:	4618      	mov	r0, r3
 8001352:	f005 faaf 	bl	80068b4 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800135c:	f001 fa8a 	bl	8002874 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C1_Init+0x50>)
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_I2C1_Init+0x58>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_I2C1_Init+0x50>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_I2C1_Init+0x50>)
 80013ae:	f002 fbc7 	bl	8003b40 <HAL_I2C_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b8:	f001 fa5c 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2000022c 	.word	0x2000022c
 80013c4:	40005400 	.word	0x40005400
 80013c8:	000186a0 	.word	0x000186a0

080013cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 fa5c 	bl	8008898 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_TIM1_Init+0xa8>)
 80013ea:	4a23      	ldr	r2, [pc, #140]	; (8001478 <MX_TIM1_Init+0xac>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_TIM1_Init+0xa8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_TIM1_Init+0xa8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM1_Init+0xa8>)
 80013fc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001400:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_TIM1_Init+0xa8>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM1_Init+0xa8>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_TIM1_Init+0xa8>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001414:	2303      	movs	r3, #3
 8001416:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800141c:	2301      	movs	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800142c:	2301      	movs	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM1_Init+0xa8>)
 8001440:	f005 fd04 	bl	8006e4c <HAL_TIM_Encoder_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800144a:	f001 fa13 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <MX_TIM1_Init+0xa8>)
 800145c:	f006 fb46 	bl	8007aec <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001466:	f001 fa05 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000320 	.word	0x20000320
 8001478:	40010000 	.word	0x40010000

0800147c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_TIM2_Init+0x94>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_TIM2_Init+0x94>)
 80014a2:	2263      	movs	r2, #99	; 0x63
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_TIM2_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_TIM2_Init+0x94>)
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_TIM2_Init+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_TIM2_Init+0x94>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <MX_TIM2_Init+0x94>)
 80014c2:	f005 fbf3 	bl	8006cac <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014cc:	f001 f9d2 	bl	8002874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_TIM2_Init+0x94>)
 80014de:	f005 ff4d 	bl	800737c <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014e8:	f001 f9c4 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_TIM2_Init+0x94>)
 80014fa:	f006 faf7 	bl	8007aec <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001504:	f001 f9b6 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000360 	.word	0x20000360

08001514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <MX_TIM3_Init+0xc0>)
 8001538:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <MX_TIM3_Init+0xc4>)
 800153a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <MX_TIM3_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_TIM3_Init+0xc0>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_TIM3_Init+0xc0>)
 800154a:	f242 7210 	movw	r2, #10000	; 0x2710
 800154e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_TIM3_Init+0xc0>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_TIM3_Init+0xc0>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800155c:	481d      	ldr	r0, [pc, #116]	; (80015d4 <MX_TIM3_Init+0xc0>)
 800155e:	f005 fc18 	bl	8006d92 <HAL_TIM_PWM_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001568:	f001 f984 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4619      	mov	r1, r3
 800157a:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_TIM3_Init+0xc0>)
 800157c:	f006 fab6 	bl	8007aec <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001586:	f001 f975 	bl	8002874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158a:	2360      	movs	r3, #96	; 0x60
 800158c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_TIM3_Init+0xc0>)
 80015a2:	f005 fe25 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015ac:	f001 f962 	bl	8002874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2204      	movs	r2, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM3_Init+0xc0>)
 80015b8:	f005 fe1a 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015c2:	f001 f957 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM3_Init+0xc0>)
 80015c8:	f001 fa88 	bl	8002adc <HAL_TIM_MspPostInit>

}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000280 	.word	0x20000280
 80015d8:	40000400 	.word	0x40000400

080015dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM4_Init+0x94>)
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <MX_TIM4_Init+0x98>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_TIM4_Init+0x94>)
 8001600:	2263      	movs	r2, #99	; 0x63
 8001602:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM4_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_TIM4_Init+0x94>)
 800160c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001610:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_TIM4_Init+0x94>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM4_Init+0x94>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_TIM4_Init+0x94>)
 8001620:	f005 fb44 	bl	8006cac <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800162a:	f001 f923 	bl	8002874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_TIM4_Init+0x94>)
 800163c:	f005 fe9e 	bl	800737c <HAL_TIM_ConfigClockSource>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001646:	f001 f915 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM4_Init+0x94>)
 8001658:	f006 fa48 	bl	8007aec <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001662:	f001 f907 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001ec 	.word	0x200001ec
 8001674:	40000800 	.word	0x40000800

08001678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART2_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016b0:	f006 fa9e 	bl	8007bf0 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f001 f8db 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200003a0 	.word	0x200003a0
 80016c8:	40004400 	.word	0x40004400

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <MX_DMA_Init+0x4c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <MX_DMA_Init+0x4c>)
 80016dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <MX_DMA_Init+0x4c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2010      	movs	r0, #16
 80016f4:	f001 fd03 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016f8:	2010      	movs	r0, #16
 80016fa:	f001 fd1c 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2011      	movs	r0, #17
 8001704:	f001 fcfb 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001708:	2011      	movs	r0, #17
 800170a:	f001 fd14 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <MX_GPIO_Init+0xe8>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b30      	ldr	r3, [pc, #192]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <MX_GPIO_Init+0xe8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_GPIO_Init+0xe8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_GPIO_Init+0xe8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2120      	movs	r1, #32
 80017a6:	4818      	ldr	r0, [pc, #96]	; (8001808 <MX_GPIO_Init+0xec>)
 80017a8:	f002 f996 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <MX_GPIO_Init+0xf0>)
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4813      	ldr	r0, [pc, #76]	; (8001810 <MX_GPIO_Init+0xf4>)
 80017c2:	f001 ffed 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017c6:	2320      	movs	r3, #32
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <MX_GPIO_Init+0xec>)
 80017de:	f001 ffdf 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017e2:	2330      	movs	r3, #48	; 0x30
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_GPIO_Init+0xf8>)
 80017f6:	f001 ffd3 	bl	80037a0 <HAL_GPIO_Init>

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000
 800180c:	10210000 	.word	0x10210000
 8001810:	40020800 	.word	0x40020800
 8001814:	40020400 	.word	0x40020400

08001818 <NucleoCheck>:

/* USER CODE BEGIN 4 */
//********************************************************************************

void NucleoCheck()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	ButtonArray[1] = ButtonArray[0];
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <NucleoCheck+0x3c>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <NucleoCheck+0x3c>)
 8001822:	705a      	strb	r2, [r3, #1]
	ButtonArray[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <NucleoCheck+0x40>)
 800182a:	f002 f93d 	bl	8003aa8 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <NucleoCheck+0x3c>)
 8001834:	701a      	strb	r2, [r3, #0]

	if(ButtonArray[0]==1 && ButtonArray[1]==0) //When Released Button
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <NucleoCheck+0x3c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d107      	bne.n	800184e <NucleoCheck+0x36>
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <NucleoCheck+0x3c>)
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <NucleoCheck+0x36>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001846:	2120      	movs	r1, #32
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <NucleoCheck+0x44>)
 800184a:	f002 f95e 	bl	8003b0a <HAL_GPIO_TogglePin>
	}
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000
 8001858:	40020800 	.word	0x40020800
 800185c:	40020000 	.word	0x40020000

08001860 <EncoderPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 3600
#define  MAX_ENCODER_PERIOD 7200

uint32_t EncoderPosition_Update()
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return HTIM_ENCODER.Instance->CNT;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <EncoderPosition_Update+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	20000320 	.word	0x20000320

08001878 <EncoderVelocity_Update>:
float EncoderVelocity_Update()
{   static uint32_t EncoderLastPosition = 0;
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	ed2d 8b02 	vpush	{d8}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
	static uint64_t EncoderLastTimestamp = 0;
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <EncoderVelocity_Update+0x128>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800188a:	f000 fed5 	bl	8002638 <micros>
 800188e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;
	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <EncoderVelocity_Update+0x12c>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800189c:	1a84      	subs	r4, r0, r2
 800189e:	eb61 0503 	sbc.w	r5, r1, r3
 80018a2:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <EncoderVelocity_Update+0x130>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80018b6:	db04      	blt.n	80018c2 <EncoderVelocity_Update+0x4a>
	{EncoderPositionDiff -= MAX_ENCODER_PERIOD;}
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e007      	b.n	80018d2 <EncoderVelocity_Update+0x5a>
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 80018c8:	dc03      	bgt.n	80018d2 <EncoderVelocity_Update+0x5a>
	{EncoderPositionDiff += MAX_ENCODER_PERIOD;}
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80018d0:	617b      	str	r3, [r7, #20]
	EncoderLastPosition = EncoderNowPosition;
 80018d2:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <EncoderVelocity_Update+0x130>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80018d8:	4932      	ldr	r1, [pc, #200]	; (80019a4 <EncoderVelocity_Update+0x12c>)
 80018da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018de:	e9c1 2300 	strd	r2, r3, [r1]
	//raw =(float)(EncoderPositionDiff * 1000000.00*60.00/3072.00) / (float) EncoderTimeDiff;
	raw =(float)(EncoderPositionDiff * 1000000.00) / (float) EncoderTimeDiff;
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7fe fdca 	bl	800047c <__aeabi_i2d>
 80018e8:	a327      	add	r3, pc, #156	; (adr r3, 8001988 <EncoderVelocity_Update+0x110>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fe2f 	bl	8000550 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f8d9 	bl	8000ab0 <__aeabi_d2f>
 80018fe:	ee08 0a10 	vmov	s16, r0
 8001902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001906:	f7ff f9eb 	bl	8000ce0 <__aeabi_ul2f>
 800190a:	ee07 0a10 	vmov	s14, r0
 800190e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <EncoderVelocity_Update+0x134>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
	rad = raw* 0.05*2.00*3.141592/360.00;
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <EncoderVelocity_Update+0x134>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fdbf 	bl	80004a0 <__aeabi_f2d>
 8001922:	a31b      	add	r3, pc, #108	; (adr r3, 8001990 <EncoderVelocity_Update+0x118>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe12 	bl	8000550 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	f7fe fc54 	bl	80001e4 <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	a314      	add	r3, pc, #80	; (adr r3, 8001998 <EncoderVelocity_Update+0x120>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe01 	bl	8000550 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <EncoderVelocity_Update+0x138>)
 800195c:	f7fe ff22 	bl	80007a4 <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f8a2 	bl	8000ab0 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <EncoderVelocity_Update+0x13c>)
 8001970:	6013      	str	r3, [r2, #0]
	//rad = (float)(0.10472*raw);
	return  rad;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <EncoderVelocity_Update+0x13c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	ee07 3a90 	vmov	s15, r3
}
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	ecbd 8b02 	vpop	{d8}
 8001986:	bdb0      	pop	{r4, r5, r7, pc}
 8001988:	00000000 	.word	0x00000000
 800198c:	412e8480 	.word	0x412e8480
 8001990:	9999999a 	.word	0x9999999a
 8001994:	3fa99999 	.word	0x3fa99999
 8001998:	fc8b007a 	.word	0xfc8b007a
 800199c:	400921fa 	.word	0x400921fa
 80019a0:	20000320 	.word	0x20000320
 80019a4:	20000180 	.word	0x20000180
 80019a8:	20000188 	.word	0x20000188
 80019ac:	200000f0 	.word	0x200000f0
 80019b0:	40768000 	.word	0x40768000
 80019b4:	200000ec 	.word	0x200000ec

080019b8 <kalmanfilter>:


void kalmanfilter()
{    Q = pow(a,2);
 80019b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4bd6      	ldr	r3, [pc, #856]	; (8001d18 <kalmanfilter+0x360>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fd6c 	bl	80004a0 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8001d08 <kalmanfilter+0x350>
 80019d0:	ec43 2b10 	vmov	d0, r2, r3
 80019d4:	f006 ff68 	bl	80088a8 <pow>
 80019d8:	ec53 2b10 	vmov	r2, r3, d0
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f866 	bl	8000ab0 <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4acd      	ldr	r2, [pc, #820]	; (8001d1c <kalmanfilter+0x364>)
 80019e8:	6013      	str	r3, [r2, #0]
	 R = pow(w,2);
 80019ea:	4bcd      	ldr	r3, [pc, #820]	; (8001d20 <kalmanfilter+0x368>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd56 	bl	80004a0 <__aeabi_f2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	ed9f 1bc3 	vldr	d1, [pc, #780]	; 8001d08 <kalmanfilter+0x350>
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f006 ff52 	bl	80088a8 <pow>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f850 	bl	8000ab0 <__aeabi_d2f>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4ac4      	ldr	r2, [pc, #784]	; (8001d24 <kalmanfilter+0x36c>)
 8001a14:	6013      	str	r3, [r2, #0]
	 theta_est = theta_pd + omega_pd*dt1;
 8001a16:	4bc4      	ldr	r3, [pc, #784]	; (8001d28 <kalmanfilter+0x370>)
 8001a18:	ed93 7a00 	vldr	s14, [r3]
 8001a1c:	4bc3      	ldr	r3, [pc, #780]	; (8001d2c <kalmanfilter+0x374>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a26:	4bc2      	ldr	r3, [pc, #776]	; (8001d30 <kalmanfilter+0x378>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	4bc0      	ldr	r3, [pc, #768]	; (8001d34 <kalmanfilter+0x37c>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
	 omega_est = omega_pd;
 8001a36:	4bbc      	ldr	r3, [pc, #752]	; (8001d28 <kalmanfilter+0x370>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4abf      	ldr	r2, [pc, #764]	; (8001d38 <kalmanfilter+0x380>)
 8001a3c:	6013      	str	r3, [r2, #0]
	 y = (rad-omega_est);
 8001a3e:	4bbf      	ldr	r3, [pc, #764]	; (8001d3c <kalmanfilter+0x384>)
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	4bbc      	ldr	r3, [pc, #752]	; (8001d38 <kalmanfilter+0x380>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	4bbc      	ldr	r3, [pc, #752]	; (8001d40 <kalmanfilter+0x388>)
 8001a50:	edc3 7a00 	vstr	s15, [r3]

    p11 = p11 + dt1*p21+ (Q*pow(dt1,4))/4 + (pow(dt1,2))*(p12+dt1*p22)/dt1;
 8001a54:	4bb5      	ldr	r3, [pc, #724]	; (8001d2c <kalmanfilter+0x374>)
 8001a56:	ed93 7a00 	vldr	s14, [r3]
 8001a5a:	4bba      	ldr	r3, [pc, #744]	; (8001d44 <kalmanfilter+0x38c>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	4bb8      	ldr	r3, [pc, #736]	; (8001d48 <kalmanfilter+0x390>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6e:	ee17 0a90 	vmov	r0, s15
 8001a72:	f7fe fd15 	bl	80004a0 <__aeabi_f2d>
 8001a76:	4604      	mov	r4, r0
 8001a78:	460d      	mov	r5, r1
 8001a7a:	4ba8      	ldr	r3, [pc, #672]	; (8001d1c <kalmanfilter+0x364>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd0e 	bl	80004a0 <__aeabi_f2d>
 8001a84:	4680      	mov	r8, r0
 8001a86:	4689      	mov	r9, r1
 8001a88:	4ba8      	ldr	r3, [pc, #672]	; (8001d2c <kalmanfilter+0x374>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd07 	bl	80004a0 <__aeabi_f2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001d10 <kalmanfilter+0x358>
 8001a9a:	ec43 2b10 	vmov	d0, r2, r3
 8001a9e:	f006 ff03 	bl	80088a8 <pow>
 8001aa2:	ec53 2b10 	vmov	r2, r3, d0
 8001aa6:	4640      	mov	r0, r8
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	f7fe fd51 	bl	8000550 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4ba4      	ldr	r3, [pc, #656]	; (8001d4c <kalmanfilter+0x394>)
 8001abc:	f7fe fe72 	bl	80007a4 <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fb8c 	bl	80001e4 <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4b95      	ldr	r3, [pc, #596]	; (8001d2c <kalmanfilter+0x374>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fce1 	bl	80004a0 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001d08 <kalmanfilter+0x350>
 8001ae6:	ec43 2b10 	vmov	d0, r2, r3
 8001aea:	f006 fedd 	bl	80088a8 <pow>
 8001aee:	ec59 8b10 	vmov	r8, r9, d0
 8001af2:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <kalmanfilter+0x374>)
 8001af4:	ed93 7a00 	vldr	s14, [r3]
 8001af8:	4b95      	ldr	r3, [pc, #596]	; (8001d50 <kalmanfilter+0x398>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b02:	4b94      	ldr	r3, [pc, #592]	; (8001d54 <kalmanfilter+0x39c>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	ee17 0a90 	vmov	r0, s15
 8001b10:	f7fe fcc6 	bl	80004a0 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4640      	mov	r0, r8
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	f7fe fd18 	bl	8000550 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4690      	mov	r8, r2
 8001b26:	4699      	mov	r9, r3
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <kalmanfilter+0x374>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fcb7 	bl	80004a0 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4640      	mov	r0, r8
 8001b38:	4649      	mov	r1, r9
 8001b3a:	f7fe fe33 	bl	80007a4 <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fb4d 	bl	80001e4 <__adddf3>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7fe ffad 	bl	8000ab0 <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a7b      	ldr	r2, [pc, #492]	; (8001d48 <kalmanfilter+0x390>)
 8001b5a:	6013      	str	r3, [r2, #0]
    p12 = p12 + dt1*p22 + (Q*dt1*pow(dt1,2))/2;
 8001b5c:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <kalmanfilter+0x374>)
 8001b5e:	ed93 7a00 	vldr	s14, [r3]
 8001b62:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <kalmanfilter+0x398>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <kalmanfilter+0x39c>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f7fe fc91 	bl	80004a0 <__aeabi_f2d>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	460d      	mov	r5, r1
 8001b82:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <kalmanfilter+0x364>)
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <kalmanfilter+0x374>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	ee17 0a90 	vmov	r0, s15
 8001b96:	f7fe fc83 	bl	80004a0 <__aeabi_f2d>
 8001b9a:	4680      	mov	r8, r0
 8001b9c:	4689      	mov	r9, r1
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <kalmanfilter+0x374>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc7c 	bl	80004a0 <__aeabi_f2d>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001d08 <kalmanfilter+0x350>
 8001bb0:	ec43 2b10 	vmov	d0, r2, r3
 8001bb4:	f006 fe78 	bl	80088a8 <pow>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	4640      	mov	r0, r8
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	f7fe fcc6 	bl	8000550 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bd4:	f7fe fde6 	bl	80007a4 <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fb00 	bl	80001e4 <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7fe ff60 	bl	8000ab0 <__aeabi_d2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <kalmanfilter+0x39c>)
 8001bf4:	6013      	str	r3, [r2, #0]
    p21 = (2*dt1*p21+Q*pow(dt1,4) + 2*p22*pow(dt1,2))/(2*dt1);
 8001bf6:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <kalmanfilter+0x374>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <kalmanfilter+0x38c>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	ee17 0a90 	vmov	r0, s15
 8001c0e:	f7fe fc47 	bl	80004a0 <__aeabi_f2d>
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
 8001c16:	4b41      	ldr	r3, [pc, #260]	; (8001d1c <kalmanfilter+0x364>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc40 	bl	80004a0 <__aeabi_f2d>
 8001c20:	4680      	mov	r8, r0
 8001c22:	4689      	mov	r9, r1
 8001c24:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <kalmanfilter+0x374>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc39 	bl	80004a0 <__aeabi_f2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001d10 <kalmanfilter+0x358>
 8001c36:	ec43 2b10 	vmov	d0, r2, r3
 8001c3a:	f006 fe35 	bl	80088a8 <pow>
 8001c3e:	ec53 2b10 	vmov	r2, r3, d0
 8001c42:	4640      	mov	r0, r8
 8001c44:	4649      	mov	r1, r9
 8001c46:	f7fe fc83 	bl	8000550 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fac7 	bl	80001e4 <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4690      	mov	r8, r2
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <kalmanfilter+0x398>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c68:	ee17 0a90 	vmov	r0, s15
 8001c6c:	f7fe fc18 	bl	80004a0 <__aeabi_f2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <kalmanfilter+0x374>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc11 	bl	80004a0 <__aeabi_f2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001d08 <kalmanfilter+0x350>
 8001c86:	ec43 2b10 	vmov	d0, r2, r3
 8001c8a:	f006 fe0d 	bl	80088a8 <pow>
 8001c8e:	ec53 2b10 	vmov	r2, r3, d0
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fc5b 	bl	8000550 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4640      	mov	r0, r8
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	f7fe fa9f 	bl	80001e4 <__adddf3>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4614      	mov	r4, r2
 8001cac:	461d      	mov	r5, r3
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <kalmanfilter+0x374>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cb8:	ee17 0a90 	vmov	r0, s15
 8001cbc:	f7fe fbf0 	bl	80004a0 <__aeabi_f2d>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe fd6c 	bl	80007a4 <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7fe feec 	bl	8000ab0 <__aeabi_d2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <kalmanfilter+0x38c>)
 8001cdc:	6013      	str	r3, [r2, #0]
    p22 = Q*pow(dt1,2)+p22;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <kalmanfilter+0x364>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fbdc 	bl	80004a0 <__aeabi_f2d>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <kalmanfilter+0x374>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fbd5 	bl	80004a0 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	ed9f 1b03 	vldr	d1, [pc, #12]	; 8001d08 <kalmanfilter+0x350>
 8001cfe:	ec43 2b10 	vmov	d0, r2, r3
 8001d02:	f006 fdd1 	bl	80088a8 <pow>
 8001d06:	e027      	b.n	8001d58 <kalmanfilter+0x3a0>
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40000000 	.word	0x40000000
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40100000 	.word	0x40100000
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	200000f4 	.word	0x200000f4
 8001d20:	20000014 	.word	0x20000014
 8001d24:	200000f8 	.word	0x200000f8
 8001d28:	2000011c 	.word	0x2000011c
 8001d2c:	20000018 	.word	0x20000018
 8001d30:	20000104 	.word	0x20000104
 8001d34:	200000fc 	.word	0x200000fc
 8001d38:	20000100 	.word	0x20000100
 8001d3c:	200000ec 	.word	0x200000ec
 8001d40:	20000108 	.word	0x20000108
 8001d44:	20000114 	.word	0x20000114
 8001d48:	2000010c 	.word	0x2000010c
 8001d4c:	40100000 	.word	0x40100000
 8001d50:	20000118 	.word	0x20000118
 8001d54:	20000110 	.word	0x20000110
 8001d58:	ec53 2b10 	vmov	r2, r3, d0
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f7fe fbf6 	bl	8000550 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4614      	mov	r4, r2
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <kalmanfilter+0x560>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb95 	bl	80004a0 <__aeabi_f2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	f7fe fa31 	bl	80001e4 <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe fe91 	bl	8000ab0 <__aeabi_d2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a61      	ldr	r2, [pc, #388]	; (8001f18 <kalmanfilter+0x560>)
 8001d92:	6013      	str	r3, [r2, #0]

    theta_est+= (p12*y)/(R+p22);
 8001d94:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <kalmanfilter+0x564>)
 8001d96:	ed93 7a00 	vldr	s14, [r3]
 8001d9a:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <kalmanfilter+0x568>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001da4:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <kalmanfilter+0x56c>)
 8001da6:	ed93 7a00 	vldr	s14, [r3]
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <kalmanfilter+0x560>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001db8:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <kalmanfilter+0x570>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <kalmanfilter+0x570>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
    omega_est+= (p22*y)/(R+p22);
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <kalmanfilter+0x560>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	4b54      	ldr	r3, [pc, #336]	; (8001f20 <kalmanfilter+0x568>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dd8:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <kalmanfilter+0x56c>)
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <kalmanfilter+0x560>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dec:	4b4f      	ldr	r3, [pc, #316]	; (8001f2c <kalmanfilter+0x574>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <kalmanfilter+0x574>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]

    p11=p11-(p12*p21)/(R+p22);
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <kalmanfilter+0x578>)
 8001dfe:	ed93 7a00 	vldr	s14, [r3]
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <kalmanfilter+0x564>)
 8001e04:	edd3 6a00 	vldr	s13, [r3]
 8001e08:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <kalmanfilter+0x57c>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001e12:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <kalmanfilter+0x56c>)
 8001e14:	edd3 6a00 	vldr	s13, [r3]
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <kalmanfilter+0x560>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e22:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <kalmanfilter+0x578>)
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
    p12=p12-(p22*p21)/(R+p22);
 8001e30:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <kalmanfilter+0x564>)
 8001e32:	ed93 7a00 	vldr	s14, [r3]
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <kalmanfilter+0x560>)
 8001e38:	edd3 6a00 	vldr	s13, [r3]
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <kalmanfilter+0x57c>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <kalmanfilter+0x56c>)
 8001e48:	edd3 6a00 	vldr	s13, [r3]
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <kalmanfilter+0x560>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e56:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <kalmanfilter+0x564>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]
    p21=-p21*(p22/(R+p22)-1);
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <kalmanfilter+0x57c>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	eeb1 7a67 	vneg.f32	s14, s15
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <kalmanfilter+0x560>)
 8001e70:	ed93 6a00 	vldr	s12, [r3]
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <kalmanfilter+0x56c>)
 8001e76:	edd3 6a00 	vldr	s13, [r3]
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <kalmanfilter+0x560>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e84:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <kalmanfilter+0x57c>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
    p22=-p22*(p22/(R+p22)-1);
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <kalmanfilter+0x560>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	eeb1 7a67 	vneg.f32	s14, s15
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <kalmanfilter+0x560>)
 8001ea6:	ed93 6a00 	vldr	s12, [r3]
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <kalmanfilter+0x56c>)
 8001eac:	edd3 6a00 	vldr	s13, [r3]
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <kalmanfilter+0x560>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ec2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <kalmanfilter+0x560>)
 8001ecc:	edc3 7a00 	vstr	s15, [r3]

    theta_pd=theta_est;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <kalmanfilter+0x570>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <kalmanfilter+0x580>)
 8001ed6:	6013      	str	r3, [r2, #0]
    omega_pd=omega_est;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <kalmanfilter+0x574>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <kalmanfilter+0x584>)
 8001ede:	6013      	str	r3, [r2, #0]

    kalman_theta=(float)(theta_est*57.2958);
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <kalmanfilter+0x570>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fadb 	bl	80004a0 <__aeabi_f2d>
 8001eea:	a309      	add	r3, pc, #36	; (adr r3, 8001f10 <kalmanfilter+0x558>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fb2e 	bl	8000550 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fdd8 	bl	8000ab0 <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <kalmanfilter+0x588>)
 8001f04:	6013      	str	r3, [r2, #0]
}
 8001f06:	bf00      	nop
 8001f08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	c63f1412 	.word	0xc63f1412
 8001f14:	404ca5dc 	.word	0x404ca5dc
 8001f18:	20000118 	.word	0x20000118
 8001f1c:	20000110 	.word	0x20000110
 8001f20:	20000108 	.word	0x20000108
 8001f24:	200000f8 	.word	0x200000f8
 8001f28:	200000fc 	.word	0x200000fc
 8001f2c:	20000100 	.word	0x20000100
 8001f30:	2000010c 	.word	0x2000010c
 8001f34:	20000114 	.word	0x20000114
 8001f38:	20000104 	.word	0x20000104
 8001f3c:	2000011c 	.word	0x2000011c
 8001f40:	20000170 	.word	0x20000170
 8001f44:	00000000 	.word	0x00000000

08001f48 <planning>:
void planning()

{ t=t+0.01;
 8001f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <planning+0x150>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe faa4 	bl	80004a0 <__aeabi_f2d>
 8001f58:	a347      	add	r3, pc, #284	; (adr r3, 8002078 <planning+0x130>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe f941 	bl	80001e4 <__adddf3>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fda1 	bl	8000ab0 <__aeabi_d2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a49      	ldr	r2, [pc, #292]	; (8002098 <planning+0x150>)
 8001f72:	6013      	str	r3, [r2, #0]
  Vmax = 0.400;               //rad/s
 8001f74:	4b49      	ldr	r3, [pc, #292]	; (800209c <planning+0x154>)
 8001f76:	4a4a      	ldr	r2, [pc, #296]	; (80020a0 <planning+0x158>)
 8001f78:	601a      	str	r2, [r3, #0]
  sb=angle*0.0174533;            //degree 2 rad
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <planning+0x15c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fa8e 	bl	80004a0 <__aeabi_f2d>
 8001f84:	a33e      	add	r3, pc, #248	; (adr r3, 8002080 <planning+0x138>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fae1 	bl	8000550 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fd8b 	bl	8000ab0 <__aeabi_d2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <planning+0x160>)
 8001f9e:	6013      	str	r3, [r2, #0]
  sa=0;
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <planning+0x164>)
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

  tf = 15.00*(sb-sa)/(8.00*Vmax);     //get tf from vmax
 8001fa8:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <planning+0x160>)
 8001faa:	ed93 7a00 	vldr	s14, [r3]
 8001fae:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <planning+0x164>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb8:	ee17 0a90 	vmov	r0, s15
 8001fbc:	f7fe fa70 	bl	80004a0 <__aeabi_f2d>
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <planning+0x168>)
 8001fc6:	f7fe fac3 	bl	8000550 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4614      	mov	r4, r2
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	4b32      	ldr	r3, [pc, #200]	; (800209c <planning+0x154>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa62 	bl	80004a0 <__aeabi_f2d>
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <planning+0x16c>)
 8001fe2:	f7fe fab5 	bl	8000550 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe fbd9 	bl	80007a4 <__aeabi_ddiv>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7fe fd59 	bl	8000ab0 <__aeabi_d2f>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a2d      	ldr	r2, [pc, #180]	; (80020b8 <planning+0x170>)
 8002002:	6013      	str	r3, [r2, #0]
  if(0.5>=(5.7335*(sb-sa)/(pow(tf,2))))  //check accerelation
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <planning+0x160>)
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <planning+0x164>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002014:	ee17 0a90 	vmov	r0, s15
 8002018:	f7fe fa42 	bl	80004a0 <__aeabi_f2d>
 800201c:	a31a      	add	r3, pc, #104	; (adr r3, 8002088 <planning+0x140>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fa95 	bl	8000550 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4614      	mov	r4, r2
 800202c:	461d      	mov	r5, r3
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <planning+0x170>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa34 	bl	80004a0 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002090 <planning+0x148>
 8002040:	ec43 2b10 	vmov	d0, r2, r3
 8002044:	f006 fc30 	bl	80088a8 <pow>
 8002048:	ec53 2b10 	vmov	r2, r3, d0
 800204c:	4620      	mov	r0, r4
 800204e:	4629      	mov	r1, r5
 8002050:	f7fe fba8 	bl	80007a4 <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <planning+0x174>)
 8002062:	f7fe fcf1 	bl	8000a48 <__aeabi_dcmple>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d029      	beq.n	80020c0 <planning+0x178>
  {tf=tf;}
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <planning+0x170>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <planning+0x170>)
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e053      	b.n	800211e <planning+0x1d6>
 8002076:	bf00      	nop
 8002078:	47ae147b 	.word	0x47ae147b
 800207c:	3f847ae1 	.word	0x3f847ae1
 8002080:	22d4405f 	.word	0x22d4405f
 8002084:	3f91df47 	.word	0x3f91df47
 8002088:	9fbe76c9 	.word	0x9fbe76c9
 800208c:	4016ef1a 	.word	0x4016ef1a
 8002090:	00000000 	.word	0x00000000
 8002094:	40000000 	.word	0x40000000
 8002098:	2000014c 	.word	0x2000014c
 800209c:	20000150 	.word	0x20000150
 80020a0:	3ecccccd 	.word	0x3ecccccd
 80020a4:	2000016c 	.word	0x2000016c
 80020a8:	20000138 	.word	0x20000138
 80020ac:	2000013c 	.word	0x2000013c
 80020b0:	402e0000 	.word	0x402e0000
 80020b4:	40200000 	.word	0x40200000
 80020b8:	20000140 	.word	0x20000140
 80020bc:	3fe00000 	.word	0x3fe00000
  else{tf=pow((5.7335*(sb-sa)/0.5),0.5);}
 80020c0:	4bd9      	ldr	r3, [pc, #868]	; (8002428 <planning+0x4e0>)
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	4bd9      	ldr	r3, [pc, #868]	; (800242c <planning+0x4e4>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d0:	ee17 0a90 	vmov	r0, s15
 80020d4:	f7fe f9e4 	bl	80004a0 <__aeabi_f2d>
 80020d8:	a3c7      	add	r3, pc, #796	; (adr r3, 80023f8 <planning+0x4b0>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fa37 	bl	8000550 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4bd0      	ldr	r3, [pc, #832]	; (8002430 <planning+0x4e8>)
 80020f0:	f7fe fb58 	bl	80007a4 <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	ec43 2b17 	vmov	d7, r2, r3
 80020fc:	ed9f 1bc0 	vldr	d1, [pc, #768]	; 8002400 <planning+0x4b8>
 8002100:	eeb0 0a47 	vmov.f32	s0, s14
 8002104:	eef0 0a67 	vmov.f32	s1, s15
 8002108:	f006 fbce 	bl	80088a8 <pow>
 800210c:	ec53 2b10 	vmov	r2, r3, d0
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7fe fccc 	bl	8000ab0 <__aeabi_d2f>
 8002118:	4603      	mov	r3, r0
 800211a:	4ac6      	ldr	r2, [pc, #792]	; (8002434 <planning+0x4ec>)
 800211c:	6013      	str	r3, [r2, #0]
  a0=0;
 800211e:	4bc6      	ldr	r3, [pc, #792]	; (8002438 <planning+0x4f0>)
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
  a1=0;
 8002126:	4bc5      	ldr	r3, [pc, #788]	; (800243c <planning+0x4f4>)
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
  a2=0;
 800212e:	4bc4      	ldr	r3, [pc, #784]	; (8002440 <planning+0x4f8>)
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
  a3= 10.00*(sb-sa)/(pow(tf,3));
 8002136:	4bbc      	ldr	r3, [pc, #752]	; (8002428 <planning+0x4e0>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	4bbb      	ldr	r3, [pc, #748]	; (800242c <planning+0x4e4>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002146:	ee17 0a90 	vmov	r0, s15
 800214a:	f7fe f9a9 	bl	80004a0 <__aeabi_f2d>
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4bbc      	ldr	r3, [pc, #752]	; (8002444 <planning+0x4fc>)
 8002154:	f7fe f9fc 	bl	8000550 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4614      	mov	r4, r2
 800215e:	461d      	mov	r5, r3
 8002160:	4bb4      	ldr	r3, [pc, #720]	; (8002434 <planning+0x4ec>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f99b 	bl	80004a0 <__aeabi_f2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8002408 <planning+0x4c0>
 8002172:	ec43 2b10 	vmov	d0, r2, r3
 8002176:	f006 fb97 	bl	80088a8 <pow>
 800217a:	ec53 2b10 	vmov	r2, r3, d0
 800217e:	4620      	mov	r0, r4
 8002180:	4629      	mov	r1, r5
 8002182:	f7fe fb0f 	bl	80007a4 <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fc8f 	bl	8000ab0 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4aac      	ldr	r2, [pc, #688]	; (8002448 <planning+0x500>)
 8002196:	6013      	str	r3, [r2, #0]
  a4= -15.00*(sb-sa)/(pow(tf,4));
 8002198:	4ba3      	ldr	r3, [pc, #652]	; (8002428 <planning+0x4e0>)
 800219a:	ed93 7a00 	vldr	s14, [r3]
 800219e:	4ba3      	ldr	r3, [pc, #652]	; (800242c <planning+0x4e4>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a8:	ee17 0a90 	vmov	r0, s15
 80021ac:	f7fe f978 	bl	80004a0 <__aeabi_f2d>
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4ba5      	ldr	r3, [pc, #660]	; (800244c <planning+0x504>)
 80021b6:	f7fe f9cb 	bl	8000550 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4614      	mov	r4, r2
 80021c0:	461d      	mov	r5, r3
 80021c2:	4b9c      	ldr	r3, [pc, #624]	; (8002434 <planning+0x4ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f96a 	bl	80004a0 <__aeabi_f2d>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	ed9f 1b8f 	vldr	d1, [pc, #572]	; 8002410 <planning+0x4c8>
 80021d4:	ec43 2b10 	vmov	d0, r2, r3
 80021d8:	f006 fb66 	bl	80088a8 <pow>
 80021dc:	ec53 2b10 	vmov	r2, r3, d0
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fe fade 	bl	80007a4 <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fc5e 	bl	8000ab0 <__aeabi_d2f>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a96      	ldr	r2, [pc, #600]	; (8002450 <planning+0x508>)
 80021f8:	6013      	str	r3, [r2, #0]
  a5= 6.00*(sb-sa)/(pow(tf,5));
 80021fa:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <planning+0x4e0>)
 80021fc:	ed93 7a00 	vldr	s14, [r3]
 8002200:	4b8a      	ldr	r3, [pc, #552]	; (800242c <planning+0x4e4>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220a:	ee17 0a90 	vmov	r0, s15
 800220e:	f7fe f947 	bl	80004a0 <__aeabi_f2d>
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	4b8f      	ldr	r3, [pc, #572]	; (8002454 <planning+0x50c>)
 8002218:	f7fe f99a 	bl	8000550 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4614      	mov	r4, r2
 8002222:	461d      	mov	r5, r3
 8002224:	4b83      	ldr	r3, [pc, #524]	; (8002434 <planning+0x4ec>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f939 	bl	80004a0 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8002418 <planning+0x4d0>
 8002236:	ec43 2b10 	vmov	d0, r2, r3
 800223a:	f006 fb35 	bl	80088a8 <pow>
 800223e:	ec53 2b10 	vmov	r2, r3, d0
 8002242:	4620      	mov	r0, r4
 8002244:	4629      	mov	r1, r5
 8002246:	f7fe faad 	bl	80007a4 <__aeabi_ddiv>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	f7fe fc2d 	bl	8000ab0 <__aeabi_d2f>
 8002256:	4603      	mov	r3, r0
 8002258:	4a7f      	ldr	r2, [pc, #508]	; (8002458 <planning+0x510>)
 800225a:	6013      	str	r3, [r2, #0]
  //sbf =  a3*pow(tf,3)+a4*pow(tf,4)+a5*pow(tf,5);
  if(t<=tf){
 800225c:	4b7f      	ldr	r3, [pc, #508]	; (800245c <planning+0x514>)
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	4b74      	ldr	r3, [pc, #464]	; (8002434 <planning+0x4ec>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	f200 8121 	bhi.w	80024b6 <planning+0x56e>
  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
 8002274:	4b74      	ldr	r3, [pc, #464]	; (8002448 <planning+0x500>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f911 	bl	80004a0 <__aeabi_f2d>
 800227e:	4604      	mov	r4, r0
 8002280:	460d      	mov	r5, r1
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <planning+0x514>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f90a 	bl	80004a0 <__aeabi_f2d>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002408 <planning+0x4c0>
 8002294:	ec43 2b10 	vmov	d0, r2, r3
 8002298:	f006 fb06 	bl	80088a8 <pow>
 800229c:	ec53 2b10 	vmov	r2, r3, d0
 80022a0:	4620      	mov	r0, r4
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fe f954 	bl	8000550 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4690      	mov	r8, r2
 80022ae:	4699      	mov	r9, r3
 80022b0:	4b67      	ldr	r3, [pc, #412]	; (8002450 <planning+0x508>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f8f3 	bl	80004a0 <__aeabi_f2d>
 80022ba:	4604      	mov	r4, r0
 80022bc:	460d      	mov	r5, r1
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <planning+0x514>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f8ec 	bl	80004a0 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002410 <planning+0x4c8>
 80022d0:	ec43 2b10 	vmov	d0, r2, r3
 80022d4:	f006 fae8 	bl	80088a8 <pow>
 80022d8:	ec53 2b10 	vmov	r2, r3, d0
 80022dc:	4620      	mov	r0, r4
 80022de:	4629      	mov	r1, r5
 80022e0:	f7fe f936 	bl	8000550 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4640      	mov	r0, r8
 80022ea:	4649      	mov	r1, r9
 80022ec:	f7fd ff7a 	bl	80001e4 <__adddf3>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4690      	mov	r8, r2
 80022f6:	4699      	mov	r9, r3
 80022f8:	4b57      	ldr	r3, [pc, #348]	; (8002458 <planning+0x510>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8cf 	bl	80004a0 <__aeabi_f2d>
 8002302:	4604      	mov	r4, r0
 8002304:	460d      	mov	r5, r1
 8002306:	4b55      	ldr	r3, [pc, #340]	; (800245c <planning+0x514>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f8c8 	bl	80004a0 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002418 <planning+0x4d0>
 8002318:	ec43 2b10 	vmov	d0, r2, r3
 800231c:	f006 fac4 	bl	80088a8 <pow>
 8002320:	ec53 2b10 	vmov	r2, r3, d0
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fe f912 	bl	8000550 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4640      	mov	r0, r8
 8002332:	4649      	mov	r1, r9
 8002334:	f7fd ff56 	bl	80001e4 <__adddf3>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fbb6 	bl	8000ab0 <__aeabi_d2f>
 8002344:	4603      	mov	r3, r0
 8002346:	4a46      	ldr	r2, [pc, #280]	; (8002460 <planning+0x518>)
 8002348:	6013      	str	r3, [r2, #0]
  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
 800234a:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <planning+0x500>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002358:	ee17 0a90 	vmov	r0, s15
 800235c:	f7fe f8a0 	bl	80004a0 <__aeabi_f2d>
 8002360:	4604      	mov	r4, r0
 8002362:	460d      	mov	r5, r1
 8002364:	4b3d      	ldr	r3, [pc, #244]	; (800245c <planning+0x514>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f899 	bl	80004a0 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002420 <planning+0x4d8>
 8002376:	ec43 2b10 	vmov	d0, r2, r3
 800237a:	f006 fa95 	bl	80088a8 <pow>
 800237e:	ec53 2b10 	vmov	r2, r3, d0
 8002382:	4620      	mov	r0, r4
 8002384:	4629      	mov	r1, r5
 8002386:	f7fe f8e3 	bl	8000550 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4690      	mov	r8, r2
 8002390:	4699      	mov	r9, r3
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <planning+0x508>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800239c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a0:	ee17 0a90 	vmov	r0, s15
 80023a4:	f7fe f87c 	bl	80004a0 <__aeabi_f2d>
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <planning+0x514>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f875 	bl	80004a0 <__aeabi_f2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002408 <planning+0x4c0>
 80023be:	ec43 2b10 	vmov	d0, r2, r3
 80023c2:	f006 fa71 	bl	80088a8 <pow>
 80023c6:	ec53 2b10 	vmov	r2, r3, d0
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fe f8bf 	bl	8000550 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4640      	mov	r0, r8
 80023d8:	4649      	mov	r1, r9
 80023da:	f7fd ff03 	bl	80001e4 <__adddf3>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4690      	mov	r8, r2
 80023e4:	4699      	mov	r9, r3
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <planning+0x510>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80023f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f4:	e036      	b.n	8002464 <planning+0x51c>
 80023f6:	bf00      	nop
 80023f8:	9fbe76c9 	.word	0x9fbe76c9
 80023fc:	4016ef1a 	.word	0x4016ef1a
 8002400:	00000000 	.word	0x00000000
 8002404:	3fe00000 	.word	0x3fe00000
 8002408:	00000000 	.word	0x00000000
 800240c:	40080000 	.word	0x40080000
 8002410:	00000000 	.word	0x00000000
 8002414:	40100000 	.word	0x40100000
 8002418:	00000000 	.word	0x00000000
 800241c:	40140000 	.word	0x40140000
 8002420:	00000000 	.word	0x00000000
 8002424:	40000000 	.word	0x40000000
 8002428:	20000138 	.word	0x20000138
 800242c:	2000013c 	.word	0x2000013c
 8002430:	3fe00000 	.word	0x3fe00000
 8002434:	20000140 	.word	0x20000140
 8002438:	20000120 	.word	0x20000120
 800243c:	20000124 	.word	0x20000124
 8002440:	20000128 	.word	0x20000128
 8002444:	40240000 	.word	0x40240000
 8002448:	2000012c 	.word	0x2000012c
 800244c:	c02e0000 	.word	0xc02e0000
 8002450:	20000130 	.word	0x20000130
 8002454:	40180000 	.word	0x40180000
 8002458:	20000134 	.word	0x20000134
 800245c:	2000014c 	.word	0x2000014c
 8002460:	20000148 	.word	0x20000148
 8002464:	ee17 0a90 	vmov	r0, s15
 8002468:	f7fe f81a 	bl	80004a0 <__aeabi_f2d>
 800246c:	4604      	mov	r4, r0
 800246e:	460d      	mov	r5, r1
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <planning+0x598>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f813 	bl	80004a0 <__aeabi_f2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80024d8 <planning+0x590>
 8002482:	ec43 2b10 	vmov	d0, r2, r3
 8002486:	f006 fa0f 	bl	80088a8 <pow>
 800248a:	ec53 2b10 	vmov	r2, r3, d0
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fe f85d 	bl	8000550 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4640      	mov	r0, r8
 800249c:	4649      	mov	r1, r9
 800249e:	f7fd fea1 	bl	80001e4 <__adddf3>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fb01 	bl	8000ab0 <__aeabi_d2f>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <planning+0x59c>)
 80024b2:	6013      	str	r3, [r2, #0]
  //vcon = 0.10472*vb;}
  else{t=tf;vb=0;PWMOut=0;}
  //HAL_TIM_Base_Stop_IT(&htim4);}
}
 80024b4:	e00a      	b.n	80024cc <planning+0x584>
  else{t=tf;vb=0;PWMOut=0;}
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <planning+0x5a0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <planning+0x598>)
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <planning+0x59c>)
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <planning+0x5a4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024d2:	bf00      	nop
 80024d4:	f3af 8000 	nop.w
 80024d8:	00000000 	.word	0x00000000
 80024dc:	40100000 	.word	0x40100000
 80024e0:	2000014c 	.word	0x2000014c
 80024e4:	20000144 	.word	0x20000144
 80024e8:	20000140 	.word	0x20000140
 80024ec:	200000c8 	.word	0x200000c8

080024f0 <pid>:

void pid()
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
 error = vb-omega_est;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <pid+0xc4>)
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <pid+0xc8>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <pid+0xcc>)
 8002506:	edc3 7a00 	vstr	s15, [r3]
 p = (error);
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <pid+0xcc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <pid+0xd0>)
 8002510:	6013      	str	r3, [r2, #0]
 i = i+error;
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <pid+0xd4>)
 8002514:	ed93 7a00 	vldr	s14, [r3]
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <pid+0xcc>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002522:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <pid+0xd4>)
 8002524:	edc3 7a00 	vstr	s15, [r3]
 d = error - pre_error;
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <pid+0xcc>)
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <pid+0xd8>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <pid+0xdc>)
 800253a:	edc3 7a00 	vstr	s15, [r3]
 pre_error = error;
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <pid+0xcc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <pid+0xd8>)
 8002544:	6013      	str	r3, [r2, #0]
 PWMOut =200+( (p*K_P)+(i*K_I)+(d*K_D));
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <pid+0xd0>)
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <pid+0xe0>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <pid+0xd4>)
 8002558:	edd3 6a00 	vldr	s13, [r3]
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <pid+0xe4>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <pid+0xdc>)
 800256c:	edd3 6a00 	vldr	s13, [r3]
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <pid+0xe8>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80025dc <pid+0xec>
 8002582:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258a:	ee17 2a90 	vmov	r2, s15
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <pid+0xf0>)
 8002590:	601a      	str	r2, [r3, #0]
 if(vb==0)
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <pid+0xc4>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	eef5 7a40 	vcmp.f32	s15, #0.0
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	d102      	bne.n	80025a8 <pid+0xb8>
 {PWMOut=0;}
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <pid+0xf0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000144 	.word	0x20000144
 80025b8:	20000100 	.word	0x20000100
 80025bc:	20000164 	.word	0x20000164
 80025c0:	20000154 	.word	0x20000154
 80025c4:	20000158 	.word	0x20000158
 80025c8:	20000160 	.word	0x20000160
 80025cc:	2000015c 	.word	0x2000015c
 80025d0:	20000008 	.word	0x20000008
 80025d4:	2000000c 	.word	0x2000000c
 80025d8:	200000e8 	.word	0x200000e8
 80025dc:	43480000 	.word	0x43480000
 80025e0:	200000c8 	.word	0x200000c8

080025e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d109      	bne.n	8002608 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f112 34ff 	adds.w	r4, r2, #4294967295
 80025fe:	f143 0500 	adc.w	r5, r3, #0
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002604:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim==&htim4)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d109      	bne.n	8002624 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
		  EncoderVelocity_Update();
 8002610:	f7ff f932 	bl	8001878 <EncoderVelocity_Update>
		  planning();
 8002614:	f7ff fc98 	bl	8001f48 <planning>
		  kalmanfilter();
 8002618:	f7ff f9ce 	bl	80019b8 <kalmanfilter>
		  pid();
 800261c:	f7ff ff68 	bl	80024f0 <pid>
		  MotorDrive();
 8002620:	f000 f824 	bl	800266c <MotorDrive>
		}
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	20000360 	.word	0x20000360
 8002630:	200000b8 	.word	0x200000b8
 8002634:	200001ec 	.word	0x200001ec

08002638 <micros>:

uint64_t micros()
{
 8002638:	b4b0      	push	{r4, r5, r7}
 800263a:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <micros+0x2c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	4618      	mov	r0, r3
 8002644:	f04f 0100 	mov.w	r1, #0
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <micros+0x30>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	1884      	adds	r4, r0, r2
 8002650:	eb41 0503 	adc.w	r5, r1, r3
 8002654:	4622      	mov	r2, r4
 8002656:	462b      	mov	r3, r5
}
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	bcb0      	pop	{r4, r5, r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000360 	.word	0x20000360
 8002668:	200000b8 	.word	0x200000b8

0800266c <MotorDrive>:
	ProxiArray[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	ProxiArray[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
}

void MotorDrive()
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
	if(PWMOut >= 0)
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <MotorDrive+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db09      	blt.n	800268c <MotorDrive+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut);
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MotorDrive+0x40>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <MotorDrive+0x44>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <MotorDrive+0x44>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
	}
}
 800268a:	e009      	b.n	80026a0 <MotorDrive+0x34>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <MotorDrive+0x44>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <MotorDrive+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	425a      	negs	r2, r3
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <MotorDrive+0x44>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	200000c8 	.word	0x200000c8
 80026b0:	20000280 	.word	0x20000280

080026b4 <SetHome>:

void SetHome()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	PWMOut = -6500;
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <SetHome+0x60>)
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <SetHome+0x64>)
 80026bc:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 80026be:	e001      	b.n	80026c4 <SetHome+0x10>
	{
		MotorDrive();
 80026c0:	f7ff ffd4 	bl	800266c <MotorDrive>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 80026c4:	2110      	movs	r1, #16
 80026c6:	4815      	ldr	r0, [pc, #84]	; (800271c <SetHome+0x68>)
 80026c8:	f001 f9ee 	bl	8003aa8 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d0f6      	beq.n	80026c0 <SetHome+0xc>
	}

	PWMOut = -500;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <SetHome+0x60>)
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <SetHome+0x6c>)
 80026d6:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 80026d8:	e001      	b.n	80026de <SetHome+0x2a>
	{
		MotorDrive();
 80026da:	f7ff ffc7 	bl	800266c <MotorDrive>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 80026de:	2120      	movs	r1, #32
 80026e0:	480e      	ldr	r0, [pc, #56]	; (800271c <SetHome+0x68>)
 80026e2:	f001 f9e1 	bl	8003aa8 <HAL_GPIO_ReadPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d0f6      	beq.n	80026da <SetHome+0x26>
	}

	MotorDrive();
 80026ec:	f7ff ffbe 	bl	800266c <MotorDrive>
	HAL_Delay(200);
 80026f0:	20c8      	movs	r0, #200	; 0xc8
 80026f2:	f000 fc05 	bl	8002f00 <HAL_Delay>

	PWMOut = 0;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <SetHome+0x60>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
	MotorDrive();
 80026fc:	f7ff ffb6 	bl	800266c <MotorDrive>
	HAL_Delay(500);
 8002700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002704:	f000 fbfc 	bl	8002f00 <HAL_Delay>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002708:	213c      	movs	r1, #60	; 0x3c
 800270a:	4806      	ldr	r0, [pc, #24]	; (8002724 <SetHome+0x70>)
 800270c:	f004 fc30 	bl	8006f70 <HAL_TIM_Encoder_Start>
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200000c8 	.word	0x200000c8
 8002718:	ffffe69c 	.word	0xffffe69c
 800271c:	40020400 	.word	0x40020400
 8002720:	fffffe0c 	.word	0xfffffe0c
 8002724:	20000320 	.word	0x20000320

08002728 <Control>:

void Control()
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	Error_Position = Desired_Position - RobotArm_Position;
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <Control+0xb0>)
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <Control+0xb4>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <Control+0xb8>)
 800273e:	edc3 7a00 	vstr	s15, [r3]
	Error_Position_Sum += (Error_Position * dt);
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <Control+0xb8>)
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <Control+0xbc>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <Control+0xc0>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <Control+0xc0>)
 800275e:	edc3 7a00 	vstr	s15, [r3]
	Error_Position_Div = (Error_Position - Error_Position_Old) / dt;
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <Control+0xb8>)
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <Control+0xc4>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <Control+0xbc>)
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <Control+0xc8>)
 800277e:	edc3 7a00 	vstr	s15, [r3]

	PWMOut = (K_P * Error_Position) + (K_I * Error_Position_Sum) + (K_D * Error_Position_Div);
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <Control+0xcc>)
 8002784:	ed93 7a00 	vldr	s14, [r3]
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <Control+0xb8>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <Control+0xd0>)
 8002794:	edd3 6a00 	vldr	s13, [r3]
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <Control+0xc0>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <Control+0xd4>)
 80027a8:	edd3 6a00 	vldr	s13, [r3]
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <Control+0xc8>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027be:	ee17 2a90 	vmov	r2, s15
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <Control+0xd8>)
 80027c4:	601a      	str	r2, [r3, #0]

	Error_Position_Old = Error_Position;
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <Control+0xb8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a08      	ldr	r2, [pc, #32]	; (80027ec <Control+0xc4>)
 80027cc:	6013      	str	r3, [r2, #0]
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	200000d0 	.word	0x200000d0
 80027dc:	200000cc 	.word	0x200000cc
 80027e0:	200000d8 	.word	0x200000d8
 80027e4:	20000004 	.word	0x20000004
 80027e8:	200000dc 	.word	0x200000dc
 80027ec:	200000e4 	.word	0x200000e4
 80027f0:	200000e0 	.word	0x200000e0
 80027f4:	20000008 	.word	0x20000008
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	200000e8 	.word	0x200000e8
 8002800:	200000c8 	.word	0x200000c8

08002804 <I2C_Laser>:

void I2C_Laser()
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, EndeffAddress, &LaserOpenCommand, 1, 500);
 800280a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2301      	movs	r3, #1
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <I2C_Laser+0x60>)
 8002814:	2146      	movs	r1, #70	; 0x46
 8002816:	4814      	ldr	r0, [pc, #80]	; (8002868 <I2C_Laser+0x64>)
 8002818:	f001 fad6 	bl	8003dc8 <HAL_I2C_Master_Transmit>
	for (int j=0; j<11; j++)
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	e018      	b.n	8002854 <I2C_Laser+0x50>
	{
		HAL_I2C_Master_Transmit(&hi2c1, EndeffAddress, &LaserReadCommand, 1, 500);
 8002822:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <I2C_Laser+0x68>)
 800282c:	2146      	movs	r1, #70	; 0x46
 800282e:	480e      	ldr	r0, [pc, #56]	; (8002868 <I2C_Laser+0x64>)
 8002830:	f001 faca 	bl	8003dc8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, EndeffAddress, &LaserStatus, 1, 500);
 8002834:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <I2C_Laser+0x6c>)
 800283e:	2146      	movs	r1, #70	; 0x46
 8002840:	4809      	ldr	r0, [pc, #36]	; (8002868 <I2C_Laser+0x64>)
 8002842:	f001 fbbf 	bl	8003fc4 <HAL_I2C_Master_Receive>
		HAL_Delay(500);
 8002846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800284a:	f000 fb59 	bl	8002f00 <HAL_Delay>
	for (int j=0; j<11; j++)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3301      	adds	r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b0a      	cmp	r3, #10
 8002858:	dde3      	ble.n	8002822 <I2C_Laser+0x1e>
	}
}
 800285a:	bf00      	nop
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2000001c 	.word	0x2000001c
 8002868:	2000022c 	.word	0x2000022c
 800286c:	2000001d 	.word	0x2000001d
 8002870:	2000001e 	.word	0x2000001e

08002874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800287c:	e7fe      	b.n	800287c <Error_Handler+0x8>
	...

08002880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_MspInit+0x4c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_MspInit+0x4c>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_MspInit+0x4c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_MspInit+0x4c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_MspInit+0x4c>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_MspInit+0x4c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028be:	2007      	movs	r0, #7
 80028c0:	f000 fc12 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_I2C_MspInit+0xa4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d13b      	bne.n	800296a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_I2C_MspInit+0xa8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_I2C_MspInit+0xa8>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_I2C_MspInit+0xa8>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800290e:	23c0      	movs	r3, #192	; 0xc0
 8002910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002912:	2312      	movs	r3, #18
 8002914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002916:	2301      	movs	r3, #1
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800291e:	2304      	movs	r3, #4
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4814      	ldr	r0, [pc, #80]	; (800297c <HAL_I2C_MspInit+0xac>)
 800292a:	f000 ff39 	bl	80037a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_I2C_MspInit+0xa8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_I2C_MspInit+0xa8>)
 8002938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_I2C_MspInit+0xa8>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	201f      	movs	r0, #31
 8002950:	f000 fbd5 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002954:	201f      	movs	r0, #31
 8002956:	f000 fbee 	bl	8003136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	2020      	movs	r0, #32
 8002960:	f000 fbcd 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002964:	2020      	movs	r0, #32
 8002966:	f000 fbe6 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40005400 	.word	0x40005400
 8002978:	40023800 	.word	0x40023800
 800297c:	40020400 	.word	0x40020400

08002980 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_TIM_Encoder_MspInit+0x84>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12c      	bne.n	80029fc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <HAL_TIM_Encoder_MspInit+0x8c>)
 80029f8:	f000 fed2 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000

08002a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d116      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_TIM_Base_MspInit+0x80>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_TIM_Base_MspInit+0x80>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_TIM_Base_MspInit+0x80>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2100      	movs	r1, #0
 8002a42:	201c      	movs	r0, #28
 8002a44:	f000 fb5b 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a48:	201c      	movs	r0, #28
 8002a4a:	f000 fb74 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a4e:	e01a      	b.n	8002a86 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_TIM_Base_MspInit+0x84>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d115      	bne.n	8002a86 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_TIM_Base_MspInit+0x80>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <HAL_TIM_Base_MspInit+0x80>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_TIM_Base_MspInit+0x80>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	201e      	movs	r0, #30
 8002a7c:	f000 fb3f 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a80:	201e      	movs	r0, #30
 8002a82:	f000 fb58 	bl	8003136 <HAL_NVIC_EnableIRQ>
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40000800 	.word	0x40000800

08002a98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x40>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <HAL_TIM_MspPostInit+0x68>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d11d      	bne.n	8002b3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_TIM_MspPostInit+0x6c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <HAL_TIM_MspPostInit+0x6c>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <HAL_TIM_MspPostInit+0x6c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b1a:	23c0      	movs	r3, #192	; 0xc0
 8002b1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4619      	mov	r1, r3
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <HAL_TIM_MspPostInit+0x70>)
 8002b36:	f000 fe33 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40020000 	.word	0x40020000

08002b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ca0 <HAL_UART_MspInit+0x150>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	f040 8091 	bne.w	8002c96 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_UART_MspInit+0x154>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <HAL_UART_MspInit+0x154>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_UART_MspInit+0x154>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_UART_MspInit+0x154>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_UART_MspInit+0x154>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba0:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <HAL_UART_MspInit+0x154>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bac:	230c      	movs	r3, #12
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bbc:	2307      	movs	r3, #7
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4838      	ldr	r0, [pc, #224]	; (8002ca8 <HAL_UART_MspInit+0x158>)
 8002bc8:	f000 fdea 	bl	80037a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002bcc:	4b37      	ldr	r3, [pc, #220]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002bce:	4a38      	ldr	r2, [pc, #224]	; (8002cb0 <HAL_UART_MspInit+0x160>)
 8002bd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002bd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bda:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be0:	4b32      	ldr	r3, [pc, #200]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002be6:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bee:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c00:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c02:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c08:	4b28      	ldr	r3, [pc, #160]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c0e:	4827      	ldr	r0, [pc, #156]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002c10:	f000 faac 	bl	800316c <HAL_DMA_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c1a:	f7ff fe2b 	bl	8002874 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34
 8002c24:	4a21      	ldr	r2, [pc, #132]	; (8002cac <HAL_UART_MspInit+0x15c>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c2c:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_UART_MspInit+0x168>)
 8002c2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c36:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c3a:	2240      	movs	r2, #64	; 0x40
 8002c3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c6a:	4812      	ldr	r0, [pc, #72]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c6c:	f000 fa7e 	bl	800316c <HAL_DMA_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002c76:	f7ff fdfd 	bl	8002874 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c80:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <HAL_UART_MspInit+0x164>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	2026      	movs	r0, #38	; 0x26
 8002c8c:	f000 fa37 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c90:	2026      	movs	r0, #38	; 0x26
 8002c92:	f000 fa50 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	2000018c 	.word	0x2000018c
 8002cb0:	40026088 	.word	0x40026088
 8002cb4:	200002c0 	.word	0x200002c0
 8002cb8:	400260a0 	.word	0x400260a0

08002cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <NMI_Handler+0x4>

08002cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <HardFault_Handler+0x4>

08002cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <MemManage_Handler+0x4>

08002cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d08:	f000 f8da 	bl	8002ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <DMA1_Stream5_IRQHandler+0x10>)
 8002d16:	f000 faf9 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000018c 	.word	0x2000018c

08002d24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <DMA1_Stream6_IRQHandler+0x10>)
 8002d2a:	f000 faef 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200002c0 	.word	0x200002c0

08002d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <TIM2_IRQHandler+0x10>)
 8002d3e:	f004 f94f 	bl	8006fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000360 	.word	0x20000360

08002d4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <TIM4_IRQHandler+0x10>)
 8002d52:	f004 f945 	bl	8006fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200001ec 	.word	0x200001ec

08002d60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <I2C1_EV_IRQHandler+0x10>)
 8002d66:	f001 fb53 	bl	8004410 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2000022c 	.word	0x2000022c

08002d74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <I2C1_ER_IRQHandler+0x10>)
 8002d7a:	f001 fcb6 	bl	80046ea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000022c 	.word	0x2000022c

08002d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <USART2_IRQHandler+0x10>)
 8002d8e:	f004 ff7d 	bl	8007c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200003a0 	.word	0x200003a0

08002d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <SystemInit+0x28>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <SystemInit+0x28>)
 8002da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <SystemInit+0x28>)
 8002db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db6:	609a      	str	r2, [r3, #8]
#endif
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dce:	e003      	b.n	8002dd8 <LoopCopyDataInit>

08002dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dd6:	3104      	adds	r1, #4

08002dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002de0:	d3f6      	bcc.n	8002dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002de4:	e002      	b.n	8002dec <LoopFillZerobss>

08002de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002de8:	f842 3b04 	str.w	r3, [r2], #4

08002dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002df0:	d3f9      	bcc.n	8002de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002df2:	f7ff ffd3 	bl	8002d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df6:	f005 fd2b 	bl	8008850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfa:	f7fe f935 	bl	8001068 <main>
  bx  lr    
 8002dfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e04:	080098a8 	.word	0x080098a8
  ldr  r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e0c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002e10:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002e14:	200003e4 	.word	0x200003e4

08002e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <ADC_IRQHandler>
	...

08002e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_Init+0x40>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <HAL_Init+0x40>)
 8002e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_Init+0x40>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_Init+0x40>)
 8002e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_Init+0x40>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_Init+0x40>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e44:	2003      	movs	r0, #3
 8002e46:	f000 f94f 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f000 f808 	bl	8002e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e50:	f7ff fd16 	bl	8002880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023c00 	.word	0x40023c00

08002e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_InitTick+0x54>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_InitTick+0x58>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f967 	bl	8003152 <HAL_SYSTICK_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00e      	b.n	8002eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b0f      	cmp	r3, #15
 8002e92:	d80a      	bhi.n	8002eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e94:	2200      	movs	r2, #0
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f000 f92f 	bl	80030fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea0:	4a06      	ldr	r2, [pc, #24]	; (8002ebc <HAL_InitTick+0x5c>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000020 	.word	0x20000020
 8002eb8:	20000028 	.word	0x20000028
 8002ebc:	20000024 	.word	0x20000024

08002ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_IncTick+0x20>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_IncTick+0x24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_IncTick+0x24>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000028 	.word	0x20000028
 8002ee4:	200003e0 	.word	0x200003e0

08002ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return uwTick;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_GetTick+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	200003e0 	.word	0x200003e0

08002f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff ffee 	bl	8002ee8 <HAL_GetTick>
 8002f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d005      	beq.n	8002f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_Delay+0x44>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f26:	bf00      	nop
 8002f28:	f7ff ffde 	bl	8002ee8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8f7      	bhi.n	8002f28 <HAL_Delay+0x28>
  {
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000028 	.word	0x20000028

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <__NVIC_EnableIRQ+0x38>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db0a      	blt.n	8003012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	490c      	ldr	r1, [pc, #48]	; (8003034 <__NVIC_SetPriority+0x4c>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	440b      	add	r3, r1
 800300c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003010:	e00a      	b.n	8003028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <__NVIC_SetPriority+0x50>)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b04      	subs	r3, #4
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	440b      	add	r3, r1
 8003026:	761a      	strb	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1c3 0307 	rsb	r3, r3, #7
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf28      	it	cs
 800305a:	2304      	movcs	r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	2b06      	cmp	r3, #6
 8003064:	d902      	bls.n	800306c <NVIC_EncodePriority+0x30>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3b03      	subs	r3, #3
 800306a:	e000      	b.n	800306e <NVIC_EncodePriority+0x32>
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	401a      	ands	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003084:	f04f 31ff 	mov.w	r1, #4294967295
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43d9      	mvns	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	4313      	orrs	r3, r2
         );
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b4:	d301      	bcc.n	80030ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00f      	b.n	80030da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <SysTick_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c2:	210f      	movs	r1, #15
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f7ff ff8e 	bl	8002fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SysTick_Config+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SysTick_Config+0x40>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff29 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003110:	f7ff ff3e 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 8003114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7ff ff8e 	bl	800303c <NVIC_EncodePriority>
 8003120:	4602      	mov	r2, r0
 8003122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff5d 	bl	8002fe8 <__NVIC_SetPriority>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff31 	bl	8002fac <__NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffa2 	bl	80030a4 <SysTick_Config>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff feb6 	bl	8002ee8 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e099      	b.n	80032bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a8:	e00f      	b.n	80031ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031aa:	f7ff fe9d 	bl	8002ee8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d908      	bls.n	80031ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2203      	movs	r2, #3
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e078      	b.n	80032bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e8      	bne.n	80031aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_DMA_Init+0x158>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4313      	orrs	r3, r2
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b04      	cmp	r3, #4
 800325c:	d117      	bne.n	800328e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fa19 	bl	80036a8 <DMA_CheckFifoParam>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800328a:	2301      	movs	r3, #1
 800328c:	e016      	b.n	80032bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9d0 	bl	800363c <DMA_CalcBaseAndBitshift>
 800329c:	4603      	mov	r3, r0
 800329e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	223f      	movs	r2, #63	; 0x3f
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	f010803f 	.word	0xf010803f

080032c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d004      	beq.n	80032e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00c      	b.n	8003300 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2205      	movs	r2, #5
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003318:	4b92      	ldr	r3, [pc, #584]	; (8003564 <HAL_DMA_IRQHandler+0x258>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a92      	ldr	r2, [pc, #584]	; (8003568 <HAL_DMA_IRQHandler+0x25c>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2208      	movs	r2, #8
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2208      	movs	r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2201      	movs	r2, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2204      	movs	r2, #4
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00b      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2204      	movs	r2, #4
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2210      	movs	r2, #16
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d043      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03c      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2210      	movs	r2, #16
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d018      	beq.n	800344e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d024      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
 800343a:	e01f      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e016      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0208 	bic.w	r2, r2, #8
 800346a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	2220      	movs	r2, #32
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 808e 	beq.w	80035aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8086 	beq.w	80035aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2220      	movs	r2, #32
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d136      	bne.n	8003524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0216 	bic.w	r2, r2, #22
 80034c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x1da>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0208 	bic.w	r2, r2, #8
 80034f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	223f      	movs	r2, #63	; 0x3f
 80034fc:	409a      	lsls	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d07d      	beq.n	8003616 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
        }
        return;
 8003522:	e078      	b.n	8003616 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01c      	beq.n	800356c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	2b00      	cmp	r3, #0
 8003546:	d030      	beq.n	80035aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
 8003550:	e02b      	b.n	80035aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d027      	beq.n	80035aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e022      	b.n	80035aa <HAL_DMA_IRQHandler+0x29e>
 8003564:	20000020 	.word	0x20000020
 8003568:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0210 	bic.w	r2, r2, #16
 8003588:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d032      	beq.n	8003618 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d022      	beq.n	8003604 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2205      	movs	r2, #5
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3301      	adds	r3, #1
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d307      	bcc.n	80035f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f2      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x2ca>
 80035f0:	e000      	b.n	80035f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
 8003614:	e000      	b.n	8003618 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003616:	bf00      	nop
    }
  }
}
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop

08003620 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800362e:	b2db      	uxtb	r3, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3b10      	subs	r3, #16
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <DMA_CalcBaseAndBitshift+0x64>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d909      	bls.n	800367e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	659a      	str	r2, [r3, #88]	; 0x58
 800367c:	e007      	b.n	800368e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	aaaaaaab 	.word	0xaaaaaaab
 80036a4:	08009848 	.word	0x08009848

080036a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11f      	bne.n	8003702 <DMA_CheckFifoParam+0x5a>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d856      	bhi.n	8003776 <DMA_CheckFifoParam+0xce>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <DMA_CheckFifoParam+0x28>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036f3 	.word	0x080036f3
 80036d8:	080036e1 	.word	0x080036e1
 80036dc:	08003777 	.word	0x08003777
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d046      	beq.n	800377a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e043      	b.n	800377a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fa:	d140      	bne.n	800377e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e03d      	b.n	800377e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370a:	d121      	bne.n	8003750 <DMA_CheckFifoParam+0xa8>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d837      	bhi.n	8003782 <DMA_CheckFifoParam+0xda>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <DMA_CheckFifoParam+0x70>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003729 	.word	0x08003729
 800371c:	0800372f 	.word	0x0800372f
 8003720:	08003729 	.word	0x08003729
 8003724:	08003741 	.word	0x08003741
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e030      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d025      	beq.n	8003786 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373e:	e022      	b.n	8003786 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003748:	d11f      	bne.n	800378a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800374e:	e01c      	b.n	800378a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d903      	bls.n	800375e <DMA_CheckFifoParam+0xb6>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d003      	beq.n	8003764 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800375c:	e018      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      break;
 8003762:	e015      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e00b      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 8003776:	bf00      	nop
 8003778:	e00a      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
 800377c:	e008      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800377e:	bf00      	nop
 8003780:	e006      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;   
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
    }
  } 
  
  return status; 
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e159      	b.n	8003a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 8148 	bne.w	8003a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d00b      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ee:	2b11      	cmp	r3, #17
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d130      	bne.n	800385c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003830:	2201      	movs	r2, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 0201 	and.w	r2, r3, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0xfc>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b12      	cmp	r3, #18
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a2 	beq.w	8003a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_GPIO_Init+0x2e8>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a56      	ldr	r2, [pc, #344]	; (8003a88 <HAL_GPIO_Init+0x2e8>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b54      	ldr	r3, [pc, #336]	; (8003a88 <HAL_GPIO_Init+0x2e8>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003942:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <HAL_GPIO_Init+0x2ec>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a49      	ldr	r2, [pc, #292]	; (8003a90 <HAL_GPIO_Init+0x2f0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d019      	beq.n	80039a2 <HAL_GPIO_Init+0x202>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a48      	ldr	r2, [pc, #288]	; (8003a94 <HAL_GPIO_Init+0x2f4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_GPIO_Init+0x1fe>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a47      	ldr	r2, [pc, #284]	; (8003a98 <HAL_GPIO_Init+0x2f8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00d      	beq.n	800399a <HAL_GPIO_Init+0x1fa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <HAL_GPIO_Init+0x2fc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <HAL_GPIO_Init+0x1f6>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a45      	ldr	r2, [pc, #276]	; (8003aa0 <HAL_GPIO_Init+0x300>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_GPIO_Init+0x1f2>
 800398e:	2304      	movs	r3, #4
 8003990:	e008      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 8003992:	2307      	movs	r3, #7
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 8003996:	2303      	movs	r3, #3
 8003998:	e004      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 800399a:	2302      	movs	r3, #2
 800399c:	e002      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_GPIO_Init+0x204>
 80039a2:	2300      	movs	r3, #0
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	f002 0203 	and.w	r2, r2, #3
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	4093      	lsls	r3, r2
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039b4:	4935      	ldr	r1, [pc, #212]	; (8003a8c <HAL_GPIO_Init+0x2ec>)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	089b      	lsrs	r3, r3, #2
 80039ba:	3302      	adds	r3, #2
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c2:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e6:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a10:	4a24      	ldr	r2, [pc, #144]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a40:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_GPIO_Init+0x304>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	f67f aea2 	bls.w	80037bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3724      	adds	r7, #36	; 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40013800 	.word	0x40013800
 8003a90:	40020000 	.word	0x40020000
 8003a94:	40020400 	.word	0x40020400
 8003a98:	40020800 	.word	0x40020800
 8003a9c:	40020c00 	.word	0x40020c00
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40013c00 	.word	0x40013c00

08003aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e001      	b.n	8003aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af4:	e003      	b.n	8003afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	887b      	ldrh	r3, [r7, #2]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d104      	bne.n	8003b2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	041a      	lsls	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b2c:	e002      	b.n	8003b34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e12b      	b.n	8003daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe feb2 	bl	80028d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f003 f85a 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 8003ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a81      	ldr	r2, [pc, #516]	; (8003db4 <HAL_I2C_Init+0x274>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d807      	bhi.n	8003bc4 <HAL_I2C_Init+0x84>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a80      	ldr	r2, [pc, #512]	; (8003db8 <HAL_I2C_Init+0x278>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bf94      	ite	ls
 8003bbc:	2301      	movls	r3, #1
 8003bbe:	2300      	movhi	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e006      	b.n	8003bd2 <HAL_I2C_Init+0x92>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a7d      	ldr	r2, [pc, #500]	; (8003dbc <HAL_I2C_Init+0x27c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0e7      	b.n	8003daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a78      	ldr	r2, [pc, #480]	; (8003dc0 <HAL_I2C_Init+0x280>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0c9b      	lsrs	r3, r3, #18
 8003be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a6a      	ldr	r2, [pc, #424]	; (8003db4 <HAL_I2C_Init+0x274>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d802      	bhi.n	8003c14 <HAL_I2C_Init+0xd4>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3301      	adds	r3, #1
 8003c12:	e009      	b.n	8003c28 <HAL_I2C_Init+0xe8>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	4a69      	ldr	r2, [pc, #420]	; (8003dc4 <HAL_I2C_Init+0x284>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	099b      	lsrs	r3, r3, #6
 8003c26:	3301      	adds	r3, #1
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	495c      	ldr	r1, [pc, #368]	; (8003db4 <HAL_I2C_Init+0x274>)
 8003c44:	428b      	cmp	r3, r1
 8003c46:	d819      	bhi.n	8003c7c <HAL_I2C_Init+0x13c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e59      	subs	r1, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_I2C_Init+0x138>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1e59      	subs	r1, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	e051      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e04f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <HAL_I2C_Init+0x168>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	440b      	add	r3, r1
 8003c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e012      	b.n	8003cce <HAL_I2C_Init+0x18e>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	0099      	lsls	r1, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Init+0x196>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e022      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <HAL_I2C_Init+0x1bc>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e58      	subs	r0, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	440b      	add	r3, r1
 8003cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfa:	e00f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	6809      	ldr	r1, [r1, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6911      	ldr	r1, [r2, #16]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	000186a0 	.word	0x000186a0
 8003db8:	001e847f 	.word	0x001e847f
 8003dbc:	003d08ff 	.word	0x003d08ff
 8003dc0:	431bde83 	.word	0x431bde83
 8003dc4:	10624dd3 	.word	0x10624dd3

08003dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	817b      	strh	r3, [r7, #10]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7ff f884 	bl	8002ee8 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	f040 80e0 	bne.w	8003fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2319      	movs	r3, #25
 8003df6:	2201      	movs	r2, #1
 8003df8:	4970      	ldr	r1, [pc, #448]	; (8003fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f002 f8c0 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0d3      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_I2C_Master_Transmit+0x50>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0cc      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d007      	beq.n	8003e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2221      	movs	r2, #33	; 0x21
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2210      	movs	r2, #16
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	893a      	ldrh	r2, [r7, #8]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a50      	ldr	r2, [pc, #320]	; (8003fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e80:	8979      	ldrh	r1, [r7, #10]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f001 fe82 	bl	8005b90 <I2C_MasterRequestWrite>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e08d      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003eac:	e066      	b.n	8003f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	6a39      	ldr	r1, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f002 f93a 	bl	800612c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d107      	bne.n	8003ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e06b      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	781a      	ldrb	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d11b      	bne.n	8003f50 <HAL_I2C_Master_Transmit+0x188>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d017      	beq.n	8003f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	781a      	ldrb	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	6a39      	ldr	r1, [r7, #32]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f002 f92a 	bl	80061ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d107      	bne.n	8003f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e01a      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d194      	bne.n	8003eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	00100002 	.word	0x00100002
 8003fc0:	ffff0000 	.word	0xffff0000

08003fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	817b      	strh	r3, [r7, #10]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7fe ff86 	bl	8002ee8 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	f040 820b 	bne.w	8004402 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2319      	movs	r3, #25
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	497c      	ldr	r1, [pc, #496]	; (80041e8 <HAL_I2C_Master_Receive+0x224>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f001 ffc2 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
 8004004:	e1fe      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_I2C_Master_Receive+0x50>
 8004010:	2302      	movs	r3, #2
 8004012:	e1f7      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d007      	beq.n	800403a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2222      	movs	r2, #34	; 0x22
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2210      	movs	r2, #16
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	893a      	ldrh	r2, [r7, #8]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a5c      	ldr	r2, [pc, #368]	; (80041ec <HAL_I2C_Master_Receive+0x228>)
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800407c:	8979      	ldrh	r1, [r7, #10]
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f001 fe06 	bl	8005c94 <I2C_MasterRequestRead>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e1b8      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d113      	bne.n	80040c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	623b      	str	r3, [r7, #32]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	623b      	str	r3, [r7, #32]
 80040ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e18c      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d11b      	bne.n	8004102 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e16c      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	2b02      	cmp	r3, #2
 8004108:	d11b      	bne.n	8004142 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	e14c      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004168:	e138      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	2b03      	cmp	r3, #3
 8004170:	f200 80f1 	bhi.w	8004356 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	2b01      	cmp	r3, #1
 800417a:	d123      	bne.n	80041c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f002 f887 	bl	8006294 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e139      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c2:	e10b      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d14e      	bne.n	800426a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	4906      	ldr	r1, [pc, #24]	; (80041f0 <HAL_I2C_Master_Receive+0x22c>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f001 fed2 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e10e      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
 80041e6:	bf00      	nop
 80041e8:	00100002 	.word	0x00100002
 80041ec:	ffff0000 	.word	0xffff0000
 80041f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004268:	e0b8      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2200      	movs	r2, #0
 8004272:	4966      	ldr	r1, [pc, #408]	; (800440c <HAL_I2C_Master_Receive+0x448>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f001 fe83 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0bf      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	494f      	ldr	r1, [pc, #316]	; (800440c <HAL_I2C_Master_Receive+0x448>)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f001 fe55 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e091      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004354:	e042      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f001 ff9a 	bl	8006294 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e04c      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d118      	bne.n	80043dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f aec2 	bne.w	800416a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	00010004 	.word	0x00010004

08004410 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004430:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b10      	cmp	r3, #16
 800443e:	d003      	beq.n	8004448 <HAL_I2C_EV_IRQHandler+0x38>
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	f040 80bd 	bne.w	80045c2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <HAL_I2C_EV_IRQHandler+0x6e>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004468:	d003      	beq.n	8004472 <HAL_I2C_EV_IRQHandler+0x62>
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004470:	d101      	bne.n	8004476 <HAL_I2C_EV_IRQHandler+0x66>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_I2C_EV_IRQHandler+0x68>
 8004476:	2300      	movs	r3, #0
 8004478:	2b01      	cmp	r3, #1
 800447a:	f000 812e 	beq.w	80046da <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00c      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x92>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	0a5b      	lsrs	r3, r3, #9
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d006      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f001 ff82 	bl	800639e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fd62 	bl	8004f64 <I2C_Master_SB>
 80044a0:	e08e      	b.n	80045c0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	0a5b      	lsrs	r3, r3, #9
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fdd8 	bl	8005070 <I2C_Master_ADD10>
 80044c0:	e07e      	b.n	80045c0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	0a5b      	lsrs	r3, r3, #9
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fdf2 	bl	80050c4 <I2C_Master_ADDR>
 80044e0:	e06e      	b.n	80045c0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d037      	beq.n	800455e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fc:	f000 80ef 	beq.w	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	09db      	lsrs	r3, r3, #7
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00f      	beq.n	800452c <HAL_I2C_EV_IRQHandler+0x11c>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	0a9b      	lsrs	r3, r3, #10
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <HAL_I2C_EV_IRQHandler+0x11c>
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d103      	bne.n	800452c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f9ef 	bl	8004908 <I2C_MasterTransmit_TXE>
 800452a:	e049      	b.n	80045c0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80d2 	beq.w	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	0a5b      	lsrs	r3, r3, #9
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80cb 	beq.w	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b10      	cmp	r3, #16
 800454c:	d103      	bne.n	8004556 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa76 	bl	8004a40 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004554:	e0c3      	b.n	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fada 	bl	8004b10 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455c:	e0bf      	b.n	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456c:	f000 80b7 	beq.w	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00f      	beq.n	800459c <HAL_I2C_EV_IRQHandler+0x18c>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	0a9b      	lsrs	r3, r3, #10
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <HAL_I2C_EV_IRQHandler+0x18c>
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fb4a 	bl	8004c2e <I2C_MasterReceive_RXNE>
 800459a:	e011      	b.n	80045c0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 809a 	beq.w	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	0a5b      	lsrs	r3, r3, #9
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8093 	beq.w	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fbe9 	bl	8004d90 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045be:	e08e      	b.n	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
 80045c0:	e08d      	b.n	80046de <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e007      	b.n	80045e4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <HAL_I2C_EV_IRQHandler+0x206>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	0a5b      	lsrs	r3, r3, #9
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800460c:	69b9      	ldr	r1, [r7, #24]
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 ffa7 	bl	8005562 <I2C_Slave_ADDR>
 8004614:	e066      	b.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_I2C_EV_IRQHandler+0x226>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	0a5b      	lsrs	r3, r3, #9
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 ffdc 	bl	80055ec <I2C_Slave_STOPF>
 8004634:	e056      	b.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004636:	7bbb      	ldrb	r3, [r7, #14]
 8004638:	2b21      	cmp	r3, #33	; 0x21
 800463a:	d002      	beq.n	8004642 <HAL_I2C_EV_IRQHandler+0x232>
 800463c:	7bbb      	ldrb	r3, [r7, #14]
 800463e:	2b29      	cmp	r3, #41	; 0x29
 8004640:	d125      	bne.n	800468e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	09db      	lsrs	r3, r3, #7
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00f      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0x25e>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	0a9b      	lsrs	r3, r3, #10
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0x25e>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 febd 	bl	80053e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800466c:	e039      	b.n	80046e2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d033      	beq.n	80046e2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	0a5b      	lsrs	r3, r3, #9
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02d      	beq.n	80046e2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 feea 	bl	8005460 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800468c:	e029      	b.n	80046e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00f      	beq.n	80046ba <HAL_I2C_EV_IRQHandler+0x2aa>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	0a9b      	lsrs	r3, r3, #10
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_I2C_EV_IRQHandler+0x2aa>
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fef5 	bl	80054a2 <I2C_SlaveReceive_RXNE>
 80046b8:	e014      	b.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00e      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	0a5b      	lsrs	r3, r3, #9
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 ff23 	bl	800551e <I2C_SlaveReceive_BTF>
 80046d8:	e004      	b.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046e2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b08a      	sub	sp, #40	; 0x28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00e      	beq.n	8004738 <HAL_I2C_ER_IRQHandler+0x4e>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004736:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	0a5b      	lsrs	r3, r3, #9
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00e      	beq.n	8004762 <HAL_I2C_ER_IRQHandler+0x78>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f043 0302 	orr.w	r3, r3, #2
 8004756:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004760:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	0a9b      	lsrs	r3, r3, #10
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d03f      	beq.n	80047ee <HAL_I2C_ER_IRQHandler+0x104>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d039      	beq.n	80047ee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800477a:	7efb      	ldrb	r3, [r7, #27]
 800477c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004794:	7ebb      	ldrb	r3, [r7, #26]
 8004796:	2b20      	cmp	r3, #32
 8004798:	d112      	bne.n	80047c0 <HAL_I2C_ER_IRQHandler+0xd6>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10f      	bne.n	80047c0 <HAL_I2C_ER_IRQHandler+0xd6>
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	2b21      	cmp	r3, #33	; 0x21
 80047a4:	d008      	beq.n	80047b8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b29      	cmp	r3, #41	; 0x29
 80047aa:	d005      	beq.n	80047b8 <HAL_I2C_ER_IRQHandler+0xce>
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b28      	cmp	r3, #40	; 0x28
 80047b0:	d106      	bne.n	80047c0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b21      	cmp	r3, #33	; 0x21
 80047b6:	d103      	bne.n	80047c0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f001 f847 	bl	800584c <I2C_Slave_AF>
 80047be:	e016      	b.n	80047ee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047d2:	7efb      	ldrb	r3, [r7, #27]
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d002      	beq.n	80047de <HAL_I2C_ER_IRQHandler+0xf4>
 80047d8:	7efb      	ldrb	r3, [r7, #27]
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d107      	bne.n	80047ee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	0adb      	lsrs	r3, r3, #11
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00e      	beq.n	8004818 <HAL_I2C_ER_IRQHandler+0x12e>
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004816:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 f87e 	bl	800592c <I2C_ITError>
  }
}
 8004830:	bf00      	nop
 8004832:	3728      	adds	r7, #40	; 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
 8004894:	4613      	mov	r3, r2
 8004896:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800491e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d150      	bne.n	80049d0 <I2C_MasterTransmit_TXE+0xc8>
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b21      	cmp	r3, #33	; 0x21
 8004932:	d14d      	bne.n	80049d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b08      	cmp	r3, #8
 8004938:	d01d      	beq.n	8004976 <I2C_MasterTransmit_TXE+0x6e>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b20      	cmp	r3, #32
 800493e:	d01a      	beq.n	8004976 <I2C_MasterTransmit_TXE+0x6e>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004946:	d016      	beq.n	8004976 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004956:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2211      	movs	r2, #17
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ff62 	bl	8004838 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004974:	e060      	b.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004984:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d107      	bne.n	80049c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff7d 	bl	80048b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049be:	e03b      	b.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ff35 	bl	8004838 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049ce:	e033      	b.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b21      	cmp	r3, #33	; 0x21
 80049d4:	d005      	beq.n	80049e2 <I2C_MasterTransmit_TXE+0xda>
 80049d6:	7bbb      	ldrb	r3, [r7, #14]
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d12d      	bne.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b22      	cmp	r3, #34	; 0x22
 80049e0:	d12a      	bne.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d108      	bne.n	80049fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049fc:	e01c      	b.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d103      	bne.n	8004a12 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f880 	bl	8004b10 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a10:	e012      	b.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a36:	e7ff      	b.n	8004a38 <I2C_MasterTransmit_TXE+0x130>
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b21      	cmp	r3, #33	; 0x21
 8004a58:	d156      	bne.n	8004b08 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a88:	e03e      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d01d      	beq.n	8004acc <I2C_MasterTransmit_BTF+0x8c>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d01a      	beq.n	8004acc <I2C_MasterTransmit_BTF+0x8c>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a9c:	d016      	beq.n	8004acc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2211      	movs	r2, #17
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff feb7 	bl	8004838 <HAL_I2C_MasterTxCpltCallback>
}
 8004aca:	e01d      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ada:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fe98 	bl	8004838 <HAL_I2C_MasterTxCpltCallback>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11d      	bne.n	8004b64 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10b      	bne.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b46:	e06e      	b.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	121b      	asrs	r3, r3, #8
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b62:	e060      	b.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10b      	bne.n	8004b84 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b82:	e050      	b.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d14c      	bne.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b22      	cmp	r3, #34	; 0x22
 8004b90:	d108      	bne.n	8004ba4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba0:	601a      	str	r2, [r3, #0]
}
 8004ba2:	e040      	b.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d015      	beq.n	8004bda <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b21      	cmp	r3, #33	; 0x21
 8004bb2:	d112      	bne.n	8004bda <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bd8:	e025      	b.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d120      	bne.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b21      	cmp	r3, #33	; 0x21
 8004be8:	d11d      	bne.n	8004c26 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bf8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c08:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fe49 	bl	80048b8 <HAL_I2C_MemTxCpltCallback>
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b22      	cmp	r3, #34	; 0x22
 8004c40:	f040 80a2 	bne.w	8004d88 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d921      	bls.n	8004c96 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	f040 8082 	bne.w	8004d88 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004c94:	e078      	b.n	8004d88 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d074      	beq.n	8004d88 <I2C_MasterReceive_RXNE+0x15a>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d002      	beq.n	8004caa <I2C_MasterReceive_RXNE+0x7c>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d16e      	bne.n	8004d88 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 fac0 	bl	8006230 <I2C_WaitOnSTOPRequestThroughIT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d142      	bne.n	8004d3c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d10a      	bne.n	8004d26 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fdd4 	bl	80048cc <HAL_I2C_MemRxCpltCallback>
}
 8004d24:	e030      	b.n	8004d88 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2212      	movs	r2, #18
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fd89 	bl	800484c <HAL_I2C_MasterRxCpltCallback>
}
 8004d3a:	e025      	b.n	8004d88 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fdac 	bl	80048e0 <HAL_I2C_ErrorCallback>
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d11b      	bne.n	8004de0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004dde:	e0bd      	b.n	8004f5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d129      	bne.n	8004e3e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d00a      	beq.n	8004e16 <I2C_MasterReceive_BTF+0x86>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d007      	beq.n	8004e16 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e3c:	e08e      	b.n	8004f5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d176      	bne.n	8004f36 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d002      	beq.n	8004e54 <I2C_MasterReceive_BTF+0xc4>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d108      	bne.n	8004e66 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e019      	b.n	8004e9a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d002      	beq.n	8004e72 <I2C_MasterReceive_BTF+0xe2>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d108      	bne.n	8004e84 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e00a      	b.n	8004e9a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d007      	beq.n	8004e9a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e98:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ef4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d10a      	bne.n	8004f20 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff fcd7 	bl	80048cc <HAL_I2C_MemRxCpltCallback>
}
 8004f1e:	e01d      	b.n	8004f5c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2212      	movs	r2, #18
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fc8c 	bl	800484c <HAL_I2C_MasterRxCpltCallback>
}
 8004f34:	e012      	b.n	8004f5c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d117      	bne.n	8004fa8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f90:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f92:	e067      	b.n	8005064 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	611a      	str	r2, [r3, #16]
}
 8004fa6:	e05d      	b.n	8005064 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb0:	d133      	bne.n	800501a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b21      	cmp	r3, #33	; 0x21
 8004fbc:	d109      	bne.n	8004fd2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fce:	611a      	str	r2, [r3, #16]
 8004fd0:	e008      	b.n	8004fe4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <I2C_Master_SB+0x92>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d032      	beq.n	8005064 <I2C_Master_SB+0x100>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02d      	beq.n	8005064 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005016:	605a      	str	r2, [r3, #4]
}
 8005018:	e024      	b.n	8005064 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	b29b      	uxth	r3, r3
 8005028:	11db      	asrs	r3, r3, #7
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 0306 	and.w	r3, r3, #6
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f063 030f 	orn	r3, r3, #15
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]
}
 800503e:	e011      	b.n	8005064 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005044:	2b01      	cmp	r3, #1
 8005046:	d10d      	bne.n	8005064 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	b29b      	uxth	r3, r3
 800504e:	11db      	asrs	r3, r3, #7
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f063 030e 	orn	r3, r3, #14
 800505c:	b2da      	uxtb	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	b2da      	uxtb	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <I2C_Master_ADD10+0x24>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d011      	beq.n	80050b8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <I2C_Master_ADD10+0x38>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b091      	sub	sp, #68	; 0x44
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b22      	cmp	r3, #34	; 0x22
 80050ec:	f040 8169 	bne.w	80053c2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <I2C_Master_ADDR+0x54>
 80050f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d10b      	bne.n	8005118 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005100:	2300      	movs	r3, #0
 8005102:	633b      	str	r3, [r7, #48]	; 0x30
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	e160      	b.n	80053da <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11d      	bne.n	800515c <I2C_Master_ADDR+0x98>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005128:	d118      	bne.n	800515c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	651a      	str	r2, [r3, #80]	; 0x50
 800515a:	e13e      	b.n	80053da <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d113      	bne.n	800518e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005166:	2300      	movs	r3, #0
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e115      	b.n	80053ba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 808a 	bne.w	80052ae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051a0:	d137      	bne.n	8005212 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c0:	d113      	bne.n	80051ea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	e0e7      	b.n	80053ba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e0d3      	b.n	80053ba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2b08      	cmp	r3, #8
 8005216:	d02e      	beq.n	8005276 <I2C_Master_ADDR+0x1b2>
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	2b20      	cmp	r3, #32
 800521c:	d02b      	beq.n	8005276 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	2b12      	cmp	r3, #18
 8005222:	d102      	bne.n	800522a <I2C_Master_ADDR+0x166>
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	2b01      	cmp	r3, #1
 8005228:	d125      	bne.n	8005276 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	2b04      	cmp	r3, #4
 800522e:	d00e      	beq.n	800524e <I2C_Master_ADDR+0x18a>
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	2b02      	cmp	r3, #2
 8005234:	d00b      	beq.n	800524e <I2C_Master_ADDR+0x18a>
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2b10      	cmp	r3, #16
 800523a:	d008      	beq.n	800524e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e007      	b.n	800525e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800525c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	e0a1      	b.n	80053ba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005284:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e085      	b.n	80053ba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d14d      	bne.n	8005354 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d016      	beq.n	80052ec <I2C_Master_ADDR+0x228>
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d013      	beq.n	80052ec <I2C_Master_ADDR+0x228>
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d010      	beq.n	80052ec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e007      	b.n	80052fc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052fa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d117      	bne.n	800533c <I2C_Master_ADDR+0x278>
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005312:	d00b      	beq.n	800532c <I2C_Master_ADDR+0x268>
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	2b01      	cmp	r3, #1
 8005318:	d008      	beq.n	800532c <I2C_Master_ADDR+0x268>
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2b08      	cmp	r3, #8
 800531e:	d005      	beq.n	800532c <I2C_Master_ADDR+0x268>
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	2b10      	cmp	r3, #16
 8005324:	d002      	beq.n	800532c <I2C_Master_ADDR+0x268>
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	2b20      	cmp	r3, #32
 800532a:	d107      	bne.n	800533c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800533a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	e032      	b.n	80053ba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005362:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005372:	d117      	bne.n	80053a4 <I2C_Master_ADDR+0x2e0>
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800537a:	d00b      	beq.n	8005394 <I2C_Master_ADDR+0x2d0>
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	2b01      	cmp	r3, #1
 8005380:	d008      	beq.n	8005394 <I2C_Master_ADDR+0x2d0>
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2b08      	cmp	r3, #8
 8005386:	d005      	beq.n	8005394 <I2C_Master_ADDR+0x2d0>
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	2b10      	cmp	r3, #16
 800538c:	d002      	beq.n	8005394 <I2C_Master_ADDR+0x2d0>
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b20      	cmp	r3, #32
 8005392:	d107      	bne.n	80053a4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053c0:	e00b      	b.n	80053da <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	e7ff      	b.n	80053da <I2C_Master_ADDR+0x316>
 80053da:	bf00      	nop
 80053dc:	3744      	adds	r7, #68	; 0x44
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02b      	beq.n	8005458 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d114      	bne.n	8005458 <I2C_SlaveTransmit_TXE+0x72>
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b29      	cmp	r3, #41	; 0x29
 8005432:	d111      	bne.n	8005458 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005442:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2221      	movs	r2, #33	; 0x21
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2228      	movs	r2, #40	; 0x28
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fa04 	bl	8004860 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d011      	beq.n	8005496 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02c      	beq.n	8005516 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d114      	bne.n	8005516 <I2C_SlaveReceive_RXNE+0x74>
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b2a      	cmp	r3, #42	; 0x2a
 80054f0:	d111      	bne.n	8005516 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005500:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2222      	movs	r2, #34	; 0x22
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2228      	movs	r2, #40	; 0x28
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff f9af 	bl	8004874 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d012      	beq.n	8005556 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800556c:	2300      	movs	r3, #0
 800556e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800557c:	2b28      	cmp	r3, #40	; 0x28
 800557e:	d127      	bne.n	80055d0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	09db      	lsrs	r3, r3, #7
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d103      	bne.n	80055b4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	81bb      	strh	r3, [r7, #12]
 80055b2:	e002      	b.n	80055ba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055c2:	89ba      	ldrh	r2, [r7, #12]
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff f95d 	bl	8004888 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055ce:	e008      	b.n	80055e2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800560a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800560c:	2300      	movs	r3, #0
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005638:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005648:	d172      	bne.n	8005730 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b22      	cmp	r3, #34	; 0x22
 800564e:	d002      	beq.n	8005656 <I2C_Slave_STOPF+0x6a>
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b2a      	cmp	r3, #42	; 0x2a
 8005654:	d135      	bne.n	80056c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	b29a      	uxth	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005688:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd ffc6 	bl	8003620 <HAL_DMA_GetState>
 8005694:	4603      	mov	r3, r0
 8005696:	2b01      	cmp	r3, #1
 8005698:	d049      	beq.n	800572e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	4a69      	ldr	r2, [pc, #420]	; (8005844 <I2C_Slave_STOPF+0x258>)
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd fe0e 	bl	80032c8 <HAL_DMA_Abort_IT>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d03d      	beq.n	800572e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056c0:	e035      	b.n	800572e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f043 0204 	orr.w	r2, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fd ff90 	bl	8003620 <HAL_DMA_GetState>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d014      	beq.n	8005730 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570a:	4a4e      	ldr	r2, [pc, #312]	; (8005844 <I2C_Slave_STOPF+0x258>)
 800570c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	4618      	mov	r0, r3
 8005714:	f7fd fdd8 	bl	80032c8 <HAL_DMA_Abort_IT>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3
 800572c:	e000      	b.n	8005730 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800572e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d03e      	beq.n	80057b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b04      	cmp	r3, #4
 8005746:	d112      	bne.n	800576e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d112      	bne.n	80057a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f043 0204 	orr.w	r2, r3, #4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8b3 	bl	800592c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057c6:	e039      	b.n	800583c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b2a      	cmp	r3, #42	; 0x2a
 80057cc:	d109      	bne.n	80057e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2228      	movs	r2, #40	; 0x28
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff f849 	bl	8004874 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b28      	cmp	r3, #40	; 0x28
 80057ec:	d111      	bne.n	8005812 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a15      	ldr	r2, [pc, #84]	; (8005848 <I2C_Slave_STOPF+0x25c>)
 80057f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff f84a 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
}
 8005810:	e014      	b.n	800583c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	2b22      	cmp	r3, #34	; 0x22
 8005818:	d002      	beq.n	8005820 <I2C_Slave_STOPF+0x234>
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b22      	cmp	r3, #34	; 0x22
 800581e:	d10d      	bne.n	800583c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff f81c 	bl	8004874 <HAL_I2C_SlaveRxCpltCallback>
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	08005e31 	.word	0x08005e31
 8005848:	ffff0000 	.word	0xffff0000

0800584c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d002      	beq.n	800586e <I2C_Slave_AF+0x22>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b20      	cmp	r3, #32
 800586c:	d129      	bne.n	80058c2 <I2C_Slave_AF+0x76>
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b28      	cmp	r3, #40	; 0x28
 8005872:	d126      	bne.n	80058c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <I2C_Slave_AF+0xdc>)
 8005878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005888:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005892:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fe fff2 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058c0:	e02e      	b.n	8005920 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b21      	cmp	r3, #33	; 0x21
 80058c6:	d126      	bne.n	8005916 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a17      	ldr	r2, [pc, #92]	; (8005928 <I2C_Slave_AF+0xdc>)
 80058cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2221      	movs	r2, #33	; 0x21
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fe ffa6 	bl	8004860 <HAL_I2C_SlaveTxCpltCallback>
}
 8005914:	e004      	b.n	8005920 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800591e:	615a      	str	r2, [r3, #20]
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	ffff0000 	.word	0xffff0000

0800592c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005942:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b10      	cmp	r3, #16
 8005948:	d002      	beq.n	8005950 <I2C_ITError+0x24>
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d10a      	bne.n	8005966 <I2C_ITError+0x3a>
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b22      	cmp	r3, #34	; 0x22
 8005954:	d107      	bne.n	8005966 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005964:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800596c:	2b28      	cmp	r3, #40	; 0x28
 800596e:	d107      	bne.n	8005980 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2228      	movs	r2, #40	; 0x28
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800597e:	e015      	b.n	80059ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598e:	d00a      	beq.n	80059a6 <I2C_ITError+0x7a>
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b60      	cmp	r3, #96	; 0x60
 8005994:	d007      	beq.n	80059a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ba:	d162      	bne.n	8005a82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d020      	beq.n	8005a1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	4a6a      	ldr	r2, [pc, #424]	; (8005b88 <I2C_ITError+0x25c>)
 80059e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fd fc6e 	bl	80032c8 <HAL_DMA_Abort_IT>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8089 	beq.w	8005b06 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a16:	4610      	mov	r0, r2
 8005a18:	4798      	blx	r3
 8005a1a:	e074      	b.n	8005b06 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	4a59      	ldr	r2, [pc, #356]	; (8005b88 <I2C_ITError+0x25c>)
 8005a22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fd fc4d 	bl	80032c8 <HAL_DMA_Abort_IT>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d068      	beq.n	8005b06 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d10b      	bne.n	8005a5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	e041      	b.n	8005b06 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b60      	cmp	r3, #96	; 0x60
 8005a8c:	d125      	bne.n	8005ada <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d10b      	bne.n	8005ac2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fe ff0e 	bl	80048f4 <HAL_I2C_AbortCpltCallback>
 8005ad8:	e015      	b.n	8005b06 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d10b      	bne.n	8005b00 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fe feed 	bl	80048e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10e      	bne.n	8005b34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d113      	bne.n	8005b80 <I2C_ITError+0x254>
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b28      	cmp	r3, #40	; 0x28
 8005b5c:	d110      	bne.n	8005b80 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <I2C_ITError+0x260>)
 8005b62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fe fe92 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	08005e31 	.word	0x08005e31
 8005b8c:	ffff0000 	.word	0xffff0000

08005b90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d006      	beq.n	8005bba <I2C_MasterRequestWrite+0x2a>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d003      	beq.n	8005bba <I2C_MasterRequestWrite+0x2a>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bb8:	d108      	bne.n	8005bcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e00b      	b.n	8005be4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	2b12      	cmp	r3, #18
 8005bd2:	d107      	bne.n	8005be4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f9c5 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0a:	d103      	bne.n	8005c14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e035      	b.n	8005c84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c20:	d108      	bne.n	8005c34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c30:	611a      	str	r2, [r3, #16]
 8005c32:	e01b      	b.n	8005c6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c34:	897b      	ldrh	r3, [r7, #10]
 8005c36:	11db      	asrs	r3, r3, #7
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 0306 	and.w	r3, r3, #6
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f063 030f 	orn	r3, r3, #15
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	490e      	ldr	r1, [pc, #56]	; (8005c8c <I2C_MasterRequestWrite+0xfc>)
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f9eb 	bl	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e010      	b.n	8005c84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c62:	897b      	ldrh	r3, [r7, #10]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4907      	ldr	r1, [pc, #28]	; (8005c90 <I2C_MasterRequestWrite+0x100>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f9db 	bl	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	00010008 	.word	0x00010008
 8005c90:	00010002 	.word	0x00010002

08005c94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d006      	beq.n	8005cce <I2C_MasterRequestRead+0x3a>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d003      	beq.n	8005cce <I2C_MasterRequestRead+0x3a>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ccc:	d108      	bne.n	8005ce0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e00b      	b.n	8005cf8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	2b11      	cmp	r3, #17
 8005ce6:	d107      	bne.n	8005cf8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f93b 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1e:	d103      	bne.n	8005d28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e079      	b.n	8005e20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d34:	d108      	bne.n	8005d48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d36:	897b      	ldrh	r3, [r7, #10]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	611a      	str	r2, [r3, #16]
 8005d46:	e05f      	b.n	8005e08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d48:	897b      	ldrh	r3, [r7, #10]
 8005d4a:	11db      	asrs	r3, r3, #7
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	f003 0306 	and.w	r3, r3, #6
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f063 030f 	orn	r3, r3, #15
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4930      	ldr	r1, [pc, #192]	; (8005e28 <I2C_MasterRequestRead+0x194>)
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f961 	bl	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e054      	b.n	8005e20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4929      	ldr	r1, [pc, #164]	; (8005e2c <I2C_MasterRequestRead+0x198>)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f951 	bl	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e044      	b.n	8005e20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f8d9 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00d      	beq.n	8005df0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de2:	d103      	bne.n	8005dec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e017      	b.n	8005e20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005df0:	897b      	ldrh	r3, [r7, #10]
 8005df2:	11db      	asrs	r3, r3, #7
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 0306 	and.w	r3, r3, #6
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f063 030e 	orn	r3, r3, #14
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4907      	ldr	r1, [pc, #28]	; (8005e2c <I2C_MasterRequestRead+0x198>)
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f90d 	bl	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	00010008 	.word	0x00010008
 8005e2c:	00010002 	.word	0x00010002

08005e30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e4a:	4b4b      	ldr	r3, [pc, #300]	; (8005f78 <I2C_DMAAbort+0x148>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	08db      	lsrs	r3, r3, #3
 8005e50:	4a4a      	ldr	r2, [pc, #296]	; (8005f7c <I2C_DMAAbort+0x14c>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	0a1a      	lsrs	r2, r3, #8
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	00da      	lsls	r2, r3, #3
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f043 0220 	orr.w	r2, r3, #32
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e76:	e00a      	b.n	8005e8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8c:	d0ea      	beq.n	8005e64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	2200      	movs	r2, #0
 8005eac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ebc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b60      	cmp	r3, #96	; 0x60
 8005efe:	d10e      	bne.n	8005f1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2200      	movs	r2, #0
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f16:	6978      	ldr	r0, [r7, #20]
 8005f18:	f7fe fcec 	bl	80048f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f1c:	e027      	b.n	8005f6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f1e:	7cfb      	ldrb	r3, [r7, #19]
 8005f20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f24:	2b28      	cmp	r3, #40	; 0x28
 8005f26:	d117      	bne.n	8005f58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2228      	movs	r2, #40	; 0x28
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f56:	e007      	b.n	8005f68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f68:	6978      	ldr	r0, [r7, #20]
 8005f6a:	f7fe fcb9 	bl	80048e0 <HAL_I2C_ErrorCallback>
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000020 	.word	0x20000020
 8005f7c:	14f8b589 	.word	0x14f8b589

08005f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f90:	e025      	b.n	8005fde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d021      	beq.n	8005fde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fc ffa5 	bl	8002ee8 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d116      	bne.n	8005fde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f043 0220 	orr.w	r2, r3, #32
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e023      	b.n	8006026 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10d      	bne.n	8006004 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	43da      	mvns	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	e00c      	b.n	800601e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	43da      	mvns	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4013      	ands	r3, r2
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	bf0c      	ite	eq
 8006016:	2301      	moveq	r3, #1
 8006018:	2300      	movne	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	429a      	cmp	r2, r3
 8006022:	d0b6      	beq.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800603c:	e051      	b.n	80060e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604c:	d123      	bne.n	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006066:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	f043 0204 	orr.w	r2, r3, #4
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e046      	b.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d021      	beq.n	80060e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609e:	f7fc ff23 	bl	8002ee8 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e020      	b.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10c      	bne.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	43da      	mvns	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bf14      	ite	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	2300      	moveq	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	e00b      	b.n	800611e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	43da      	mvns	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4013      	ands	r3, r2
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d18d      	bne.n	800603e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006138:	e02d      	b.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f900 	bl	8006340 <I2C_IsAcknowledgeFailed>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e02d      	b.n	80061a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d021      	beq.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006152:	f7fc fec9 	bl	8002ee8 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	429a      	cmp	r2, r3
 8006160:	d302      	bcc.n	8006168 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d116      	bne.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e007      	b.n	80061a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d1ca      	bne.n	800613a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ba:	e02d      	b.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f8bf 	bl	8006340 <I2C_IsAcknowledgeFailed>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e02d      	b.n	8006228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d021      	beq.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d4:	f7fc fe88 	bl	8002ee8 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d302      	bcc.n	80061ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d116      	bne.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f043 0220 	orr.w	r2, r3, #32
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e007      	b.n	8006228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b04      	cmp	r3, #4
 8006224:	d1ca      	bne.n	80061bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	08db      	lsrs	r3, r3, #3
 8006242:	4a13      	ldr	r2, [pc, #76]	; (8006290 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	0a1a      	lsrs	r2, r3, #8
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3b01      	subs	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d107      	bne.n	800626e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e008      	b.n	8006280 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800627c:	d0e9      	beq.n	8006252 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	20000020 	.word	0x20000020
 8006290:	14f8b589 	.word	0x14f8b589

08006294 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062a0:	e042      	b.n	8006328 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d119      	bne.n	80062e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0210 	mvn.w	r2, #16
 80062b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e029      	b.n	8006338 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e4:	f7fc fe00 	bl	8002ee8 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d302      	bcc.n	80062fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d116      	bne.n	8006328 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	f043 0220 	orr.w	r2, r3, #32
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e007      	b.n	8006338 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d1b5      	bne.n	80062a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006356:	d11b      	bne.n	8006390 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006360:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	f043 0204 	orr.w	r2, r3, #4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063ae:	d103      	bne.n	80063b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063b6:	e007      	b.n	80063c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063c0:	d102      	bne.n	80063c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2208      	movs	r2, #8
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e25b      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d075      	beq.n	80064de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063f2:	4ba3      	ldr	r3, [pc, #652]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d00c      	beq.n	8006418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063fe:	4ba0      	ldr	r3, [pc, #640]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006406:	2b08      	cmp	r3, #8
 8006408:	d112      	bne.n	8006430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800640a:	4b9d      	ldr	r3, [pc, #628]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006416:	d10b      	bne.n	8006430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	4b99      	ldr	r3, [pc, #612]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05b      	beq.n	80064dc <HAL_RCC_OscConfig+0x108>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d157      	bne.n	80064dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e236      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d106      	bne.n	8006448 <HAL_RCC_OscConfig+0x74>
 800643a:	4b91      	ldr	r3, [pc, #580]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a90      	ldr	r2, [pc, #576]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	e01d      	b.n	8006484 <HAL_RCC_OscConfig+0xb0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006450:	d10c      	bne.n	800646c <HAL_RCC_OscConfig+0x98>
 8006452:	4b8b      	ldr	r3, [pc, #556]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a8a      	ldr	r2, [pc, #552]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	4b88      	ldr	r3, [pc, #544]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a87      	ldr	r2, [pc, #540]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	e00b      	b.n	8006484 <HAL_RCC_OscConfig+0xb0>
 800646c:	4b84      	ldr	r3, [pc, #528]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a83      	ldr	r2, [pc, #524]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	4b81      	ldr	r3, [pc, #516]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a80      	ldr	r2, [pc, #512]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800647e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d013      	beq.n	80064b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800648c:	f7fc fd2c 	bl	8002ee8 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006494:	f7fc fd28 	bl	8002ee8 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b64      	cmp	r3, #100	; 0x64
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e1fb      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a6:	4b76      	ldr	r3, [pc, #472]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0xc0>
 80064b2:	e014      	b.n	80064de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b4:	f7fc fd18 	bl	8002ee8 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064bc:	f7fc fd14 	bl	8002ee8 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b64      	cmp	r3, #100	; 0x64
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e1e7      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ce:	4b6c      	ldr	r3, [pc, #432]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0xe8>
 80064da:	e000      	b.n	80064de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d063      	beq.n	80065b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ea:	4b65      	ldr	r3, [pc, #404]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 030c 	and.w	r3, r3, #12
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064f6:	4b62      	ldr	r3, [pc, #392]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d11c      	bne.n	800653c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006502:	4b5f      	ldr	r3, [pc, #380]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d116      	bne.n	800653c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650e:	4b5c      	ldr	r3, [pc, #368]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <HAL_RCC_OscConfig+0x152>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e1bb      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006526:	4b56      	ldr	r3, [pc, #344]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4952      	ldr	r1, [pc, #328]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653a:	e03a      	b.n	80065b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d020      	beq.n	8006586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006544:	4b4f      	ldr	r3, [pc, #316]	; (8006684 <HAL_RCC_OscConfig+0x2b0>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654a:	f7fc fccd 	bl	8002ee8 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006552:	f7fc fcc9 	bl	8002ee8 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e19c      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006564:	4b46      	ldr	r3, [pc, #280]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006570:	4b43      	ldr	r3, [pc, #268]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4940      	ldr	r1, [pc, #256]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]
 8006584:	e015      	b.n	80065b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006586:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <HAL_RCC_OscConfig+0x2b0>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fc fcac 	bl	8002ee8 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006594:	f7fc fca8 	bl	8002ee8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e17b      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065a6:	4b36      	ldr	r3, [pc, #216]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d030      	beq.n	8006620 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065c6:	4b30      	ldr	r3, [pc, #192]	; (8006688 <HAL_RCC_OscConfig+0x2b4>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065cc:	f7fc fc8c 	bl	8002ee8 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d4:	f7fc fc88 	bl	8002ee8 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e15b      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065e6:	4b26      	ldr	r3, [pc, #152]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80065e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x200>
 80065f2:	e015      	b.n	8006620 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <HAL_RCC_OscConfig+0x2b4>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fa:	f7fc fc75 	bl	8002ee8 <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006602:	f7fc fc71 	bl	8002ee8 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e144      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006614:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1f0      	bne.n	8006602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80a0 	beq.w	800676e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10f      	bne.n	800665e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	4a0e      	ldr	r2, [pc, #56]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800664c:	6413      	str	r3, [r2, #64]	; 0x40
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006656:	60bb      	str	r3, [r7, #8]
 8006658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_OscConfig+0x2b8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d121      	bne.n	80066ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <HAL_RCC_OscConfig+0x2b8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a07      	ldr	r2, [pc, #28]	; (800668c <HAL_RCC_OscConfig+0x2b8>)
 8006670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006676:	f7fc fc37 	bl	8002ee8 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667c:	e011      	b.n	80066a2 <HAL_RCC_OscConfig+0x2ce>
 800667e:	bf00      	nop
 8006680:	40023800 	.word	0x40023800
 8006684:	42470000 	.word	0x42470000
 8006688:	42470e80 	.word	0x42470e80
 800668c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006690:	f7fc fc2a 	bl	8002ee8 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0fd      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a2:	4b81      	ldr	r3, [pc, #516]	; (80068a8 <HAL_RCC_OscConfig+0x4d4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f0      	beq.n	8006690 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d106      	bne.n	80066c4 <HAL_RCC_OscConfig+0x2f0>
 80066b6:	4b7d      	ldr	r3, [pc, #500]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	4a7c      	ldr	r2, [pc, #496]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	6713      	str	r3, [r2, #112]	; 0x70
 80066c2:	e01c      	b.n	80066fe <HAL_RCC_OscConfig+0x32a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCC_OscConfig+0x312>
 80066cc:	4b77      	ldr	r3, [pc, #476]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	4a76      	ldr	r2, [pc, #472]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
 80066d8:	4b74      	ldr	r3, [pc, #464]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	4a73      	ldr	r2, [pc, #460]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	6713      	str	r3, [r2, #112]	; 0x70
 80066e4:	e00b      	b.n	80066fe <HAL_RCC_OscConfig+0x32a>
 80066e6:	4b71      	ldr	r3, [pc, #452]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4a70      	ldr	r2, [pc, #448]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6713      	str	r3, [r2, #112]	; 0x70
 80066f2:	4b6e      	ldr	r3, [pc, #440]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	4a6d      	ldr	r2, [pc, #436]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d015      	beq.n	8006732 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006706:	f7fc fbef 	bl	8002ee8 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670c:	e00a      	b.n	8006724 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670e:	f7fc fbeb 	bl	8002ee8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	f241 3288 	movw	r2, #5000	; 0x1388
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e0bc      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	4b61      	ldr	r3, [pc, #388]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0ee      	beq.n	800670e <HAL_RCC_OscConfig+0x33a>
 8006730:	e014      	b.n	800675c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006732:	f7fc fbd9 	bl	8002ee8 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fc fbd5 	bl	8002ee8 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e0a6      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006750:	4b56      	ldr	r3, [pc, #344]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ee      	bne.n	800673a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d105      	bne.n	800676e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006762:	4b52      	ldr	r3, [pc, #328]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	4a51      	ldr	r2, [pc, #324]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 8006768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8092 	beq.w	800689c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006778:	4b4c      	ldr	r3, [pc, #304]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 030c 	and.w	r3, r3, #12
 8006780:	2b08      	cmp	r3, #8
 8006782:	d05c      	beq.n	800683e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d141      	bne.n	8006810 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678c:	4b48      	ldr	r3, [pc, #288]	; (80068b0 <HAL_RCC_OscConfig+0x4dc>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006792:	f7fc fba9 	bl	8002ee8 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679a:	f7fc fba5 	bl	8002ee8 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e078      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ac:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f0      	bne.n	800679a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	019b      	lsls	r3, r3, #6
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	3b01      	subs	r3, #1
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	061b      	lsls	r3, r3, #24
 80067dc:	4933      	ldr	r1, [pc, #204]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e2:	4b33      	ldr	r3, [pc, #204]	; (80068b0 <HAL_RCC_OscConfig+0x4dc>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e8:	f7fc fb7e 	bl	8002ee8 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f0:	f7fc fb7a 	bl	8002ee8 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e04d      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006802:	4b2a      	ldr	r3, [pc, #168]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <HAL_RCC_OscConfig+0x41c>
 800680e:	e045      	b.n	800689c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <HAL_RCC_OscConfig+0x4dc>)
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006816:	f7fc fb67 	bl	8002ee8 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681e:	f7fc fb63 	bl	8002ee8 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e036      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006830:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f0      	bne.n	800681e <HAL_RCC_OscConfig+0x44a>
 800683c:	e02e      	b.n	800689c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e029      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800684a:	4b18      	ldr	r3, [pc, #96]	; (80068ac <HAL_RCC_OscConfig+0x4d8>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	429a      	cmp	r2, r3
 800685c:	d11c      	bne.n	8006898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d115      	bne.n	8006898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006872:	4013      	ands	r3, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006878:	4293      	cmp	r3, r2
 800687a:	d10d      	bne.n	8006898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d106      	bne.n	8006898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d001      	beq.n	800689c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40007000 	.word	0x40007000
 80068ac:	40023800 	.word	0x40023800
 80068b0:	42470060 	.word	0x42470060

080068b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0cc      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068c8:	4b68      	ldr	r3, [pc, #416]	; (8006a6c <HAL_RCC_ClockConfig+0x1b8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d90c      	bls.n	80068f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d6:	4b65      	ldr	r3, [pc, #404]	; (8006a6c <HAL_RCC_ClockConfig+0x1b8>)
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b63      	ldr	r3, [pc, #396]	; (8006a6c <HAL_RCC_ClockConfig+0x1b8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0b8      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d020      	beq.n	800693e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006908:	4b59      	ldr	r3, [pc, #356]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a58      	ldr	r2, [pc, #352]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 800690e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006920:	4b53      	ldr	r3, [pc, #332]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	4a52      	ldr	r2, [pc, #328]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800692a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800692c:	4b50      	ldr	r3, [pc, #320]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	494d      	ldr	r1, [pc, #308]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	4313      	orrs	r3, r2
 800693c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d044      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006952:	4b47      	ldr	r3, [pc, #284]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d119      	bne.n	8006992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e07f      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d003      	beq.n	8006972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800696e:	2b03      	cmp	r3, #3
 8006970:	d107      	bne.n	8006982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006972:	4b3f      	ldr	r3, [pc, #252]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e06f      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006982:	4b3b      	ldr	r3, [pc, #236]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e067      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006992:	4b37      	ldr	r3, [pc, #220]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f023 0203 	bic.w	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	4934      	ldr	r1, [pc, #208]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069a4:	f7fc faa0 	bl	8002ee8 <HAL_GetTick>
 80069a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069aa:	e00a      	b.n	80069c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ac:	f7fc fa9c 	bl	8002ee8 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e04f      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 020c 	and.w	r2, r3, #12
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d1eb      	bne.n	80069ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069d4:	4b25      	ldr	r3, [pc, #148]	; (8006a6c <HAL_RCC_ClockConfig+0x1b8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d20c      	bcs.n	80069fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	4b22      	ldr	r3, [pc, #136]	; (8006a6c <HAL_RCC_ClockConfig+0x1b8>)
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ea:	4b20      	ldr	r3, [pc, #128]	; (8006a6c <HAL_RCC_ClockConfig+0x1b8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d001      	beq.n	80069fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e032      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4916      	ldr	r1, [pc, #88]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	490e      	ldr	r1, [pc, #56]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a3a:	f000 f821 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_RCC_ClockConfig+0x1bc>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	091b      	lsrs	r3, r3, #4
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	490a      	ldr	r1, [pc, #40]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 8006a4c:	5ccb      	ldrb	r3, [r1, r3]
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <HAL_RCC_ClockConfig+0x1c8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fc fa00 	bl	8002e60 <HAL_InitTick>

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40023c00 	.word	0x40023c00
 8006a70:	40023800 	.word	0x40023800
 8006a74:	08009830 	.word	0x08009830
 8006a78:	20000020 	.word	0x20000020
 8006a7c:	20000024 	.word	0x20000024

08006a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	2300      	movs	r3, #0
 8006a92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a98:	4b67      	ldr	r3, [pc, #412]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 030c 	and.w	r3, r3, #12
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	f200 80bd 	bhi.w	8006c24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d003      	beq.n	8006aba <HAL_RCC_GetSysClockFreq+0x3a>
 8006ab2:	e0b7      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ab6:	60bb      	str	r3, [r7, #8]
       break;
 8006ab8:	e0b7      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aba:	4b61      	ldr	r3, [pc, #388]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006abc:	60bb      	str	r3, [r7, #8]
      break;
 8006abe:	e0b4      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ac0:	4b5d      	ldr	r3, [pc, #372]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ac8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aca:	4b5b      	ldr	r3, [pc, #364]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d04d      	beq.n	8006b72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ad6:	4b58      	ldr	r3, [pc, #352]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	099b      	lsrs	r3, r3, #6
 8006adc:	461a      	mov	r2, r3
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	ea02 0800 	and.w	r8, r2, r0
 8006aee:	ea03 0901 	and.w	r9, r3, r1
 8006af2:	4640      	mov	r0, r8
 8006af4:	4649      	mov	r1, r9
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	014b      	lsls	r3, r1, #5
 8006b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b04:	0142      	lsls	r2, r0, #5
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	ebb0 0008 	subs.w	r0, r0, r8
 8006b0e:	eb61 0109 	sbc.w	r1, r1, r9
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	018b      	lsls	r3, r1, #6
 8006b1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b20:	0182      	lsls	r2, r0, #6
 8006b22:	1a12      	subs	r2, r2, r0
 8006b24:	eb63 0301 	sbc.w	r3, r3, r1
 8006b28:	f04f 0000 	mov.w	r0, #0
 8006b2c:	f04f 0100 	mov.w	r1, #0
 8006b30:	00d9      	lsls	r1, r3, #3
 8006b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b36:	00d0      	lsls	r0, r2, #3
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	eb12 0208 	adds.w	r2, r2, r8
 8006b40:	eb43 0309 	adc.w	r3, r3, r9
 8006b44:	f04f 0000 	mov.w	r0, #0
 8006b48:	f04f 0100 	mov.w	r1, #0
 8006b4c:	0259      	lsls	r1, r3, #9
 8006b4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006b52:	0250      	lsls	r0, r2, #9
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	f7fa f902 	bl	8000d6c <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e04a      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b72:	4b31      	ldr	r3, [pc, #196]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b82:	f04f 0100 	mov.w	r1, #0
 8006b86:	ea02 0400 	and.w	r4, r2, r0
 8006b8a:	ea03 0501 	and.w	r5, r3, r1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	014b      	lsls	r3, r1, #5
 8006b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ba0:	0142      	lsls	r2, r0, #5
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	1b00      	subs	r0, r0, r4
 8006ba8:	eb61 0105 	sbc.w	r1, r1, r5
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	018b      	lsls	r3, r1, #6
 8006bb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006bba:	0182      	lsls	r2, r0, #6
 8006bbc:	1a12      	subs	r2, r2, r0
 8006bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8006bc2:	f04f 0000 	mov.w	r0, #0
 8006bc6:	f04f 0100 	mov.w	r1, #0
 8006bca:	00d9      	lsls	r1, r3, #3
 8006bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bd0:	00d0      	lsls	r0, r2, #3
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	1912      	adds	r2, r2, r4
 8006bd8:	eb45 0303 	adc.w	r3, r5, r3
 8006bdc:	f04f 0000 	mov.w	r0, #0
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	0299      	lsls	r1, r3, #10
 8006be6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006bea:	0290      	lsls	r0, r2, #10
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f7fa f8b6 	bl	8000d6c <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4613      	mov	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	3301      	adds	r3, #1
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	60bb      	str	r3, [r7, #8]
      break;
 8006c22:	e002      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c26:	60bb      	str	r3, [r7, #8]
      break;
 8006c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c36:	bf00      	nop
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	00f42400 	.word	0x00f42400
 8006c40:	007a1200 	.word	0x007a1200

08006c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c48:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000020 	.word	0x20000020

08006c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c60:	f7ff fff0 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	0a9b      	lsrs	r3, r3, #10
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	4903      	ldr	r1, [pc, #12]	; (8006c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40023800 	.word	0x40023800
 8006c80:	08009840 	.word	0x08009840

08006c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c88:	f7ff ffdc 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	0b5b      	lsrs	r3, r3, #13
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	4903      	ldr	r1, [pc, #12]	; (8006ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c9a:	5ccb      	ldrb	r3, [r1, r3]
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	08009840 	.word	0x08009840

08006cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e01d      	b.n	8006cfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fb fe9c 	bl	8002a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f000 fc32 	bl	8007554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b06      	cmp	r3, #6
 8006d22:	d007      	beq.n	8006d34 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b06      	cmp	r3, #6
 8006d72:	d007      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e01d      	b.n	8006de0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fb fe6d 	bl	8002a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f000 fbbf 	bl	8007554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2201      	movs	r2, #1
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fe50 	bl	8007aa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a10      	ldr	r2, [pc, #64]	; (8006e48 <HAL_TIM_PWM_Start+0x60>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d107      	bne.n	8006e1a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b06      	cmp	r3, #6
 8006e2a:	d007      	beq.n	8006e3c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40010000 	.word	0x40010000

08006e4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e083      	b.n	8006f68 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fb fd83 	bl	8002980 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e90:	f023 0307 	bic.w	r3, r3, #7
 8006e94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f000 fb57 	bl	8007554 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ece:	f023 0303 	bic.w	r3, r3, #3
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006eec:	f023 030c 	bic.w	r3, r3, #12
 8006ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	011a      	lsls	r2, r3, #4
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	031b      	lsls	r3, r3, #12
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_TIM_Encoder_Start+0x18>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d008      	beq.n	8006f98 <HAL_TIM_Encoder_Start+0x28>
 8006f86:	e00f      	b.n	8006fa8 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fd85 	bl	8007aa0 <TIM_CCxChannelCmd>
      break;
 8006f96:	e016      	b.n	8006fc6 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	2104      	movs	r1, #4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fd7d 	bl	8007aa0 <TIM_CCxChannelCmd>
      break;
 8006fa6:	e00e      	b.n	8006fc6 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2201      	movs	r2, #1
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fd75 	bl	8007aa0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	2104      	movs	r1, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fd6e 	bl	8007aa0 <TIM_CCxChannelCmd>
      break;
 8006fc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d122      	bne.n	800703c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b02      	cmp	r3, #2
 8007002:	d11b      	bne.n	800703c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0202 	mvn.w	r2, #2
 800700c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa78 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 8007028:	e005      	b.n	8007036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa6a 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa7b 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b04      	cmp	r3, #4
 8007048:	d122      	bne.n	8007090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b04      	cmp	r3, #4
 8007056:	d11b      	bne.n	8007090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0204 	mvn.w	r2, #4
 8007060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa4e 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa40 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa51 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b08      	cmp	r3, #8
 800709c:	d122      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d11b      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0208 	mvn.w	r2, #8
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2204      	movs	r2, #4
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa24 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa16 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa27 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b10      	cmp	r3, #16
 80070f0:	d122      	bne.n	8007138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d11b      	bne.n	8007138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0210 	mvn.w	r2, #16
 8007108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2208      	movs	r2, #8
 800710e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9fa 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9ec 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9fd 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b01      	cmp	r3, #1
 8007144:	d10e      	bne.n	8007164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d107      	bne.n	8007164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0201 	mvn.w	r2, #1
 800715c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fb fa40 	bl	80025e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716e:	2b80      	cmp	r3, #128	; 0x80
 8007170:	d10e      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d107      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fd26 	bl	8007bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9c2 	bl	8007540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d10e      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0220 	mvn.w	r2, #32
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fcf0 	bl	8007bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007206:	2302      	movs	r3, #2
 8007208:	e0b4      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x184>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	f200 809f 	bhi.w	8007360 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800725d 	.word	0x0800725d
 800722c:	08007361 	.word	0x08007361
 8007230:	08007361 	.word	0x08007361
 8007234:	08007361 	.word	0x08007361
 8007238:	0800729d 	.word	0x0800729d
 800723c:	08007361 	.word	0x08007361
 8007240:	08007361 	.word	0x08007361
 8007244:	08007361 	.word	0x08007361
 8007248:	080072df 	.word	0x080072df
 800724c:	08007361 	.word	0x08007361
 8007250:	08007361 	.word	0x08007361
 8007254:	08007361 	.word	0x08007361
 8007258:	0800731f 	.word	0x0800731f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f9f6 	bl	8007654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0208 	orr.w	r2, r2, #8
 8007276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0204 	bic.w	r2, r2, #4
 8007286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6999      	ldr	r1, [r3, #24]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	619a      	str	r2, [r3, #24]
      break;
 800729a:	e062      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fa3c 	bl	8007720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6999      	ldr	r1, [r3, #24]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	021a      	lsls	r2, r3, #8
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	619a      	str	r2, [r3, #24]
      break;
 80072dc:	e041      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fa87 	bl	80077f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0208 	orr.w	r2, r2, #8
 80072f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0204 	bic.w	r2, r2, #4
 8007308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69d9      	ldr	r1, [r3, #28]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	61da      	str	r2, [r3, #28]
      break;
 800731c:	e021      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fad1 	bl	80078cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69d9      	ldr	r1, [r3, #28]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	021a      	lsls	r2, r3, #8
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	61da      	str	r2, [r3, #28]
      break;
 800735e:	e000      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007360:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_TIM_ConfigClockSource+0x18>
 8007390:	2302      	movs	r3, #2
 8007392:	e0b3      	b.n	80074fc <HAL_TIM_ConfigClockSource+0x180>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073cc:	d03e      	beq.n	800744c <HAL_TIM_ConfigClockSource+0xd0>
 80073ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d2:	f200 8087 	bhi.w	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073da:	f000 8085 	beq.w	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e2:	d87f      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073e4:	2b70      	cmp	r3, #112	; 0x70
 80073e6:	d01a      	beq.n	800741e <HAL_TIM_ConfigClockSource+0xa2>
 80073e8:	2b70      	cmp	r3, #112	; 0x70
 80073ea:	d87b      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073ec:	2b60      	cmp	r3, #96	; 0x60
 80073ee:	d050      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x116>
 80073f0:	2b60      	cmp	r3, #96	; 0x60
 80073f2:	d877      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073f4:	2b50      	cmp	r3, #80	; 0x50
 80073f6:	d03c      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0xf6>
 80073f8:	2b50      	cmp	r3, #80	; 0x50
 80073fa:	d873      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d058      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x136>
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d86f      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 8007404:	2b30      	cmp	r3, #48	; 0x30
 8007406:	d064      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
 8007408:	2b30      	cmp	r3, #48	; 0x30
 800740a:	d86b      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 800740c:	2b20      	cmp	r3, #32
 800740e:	d060      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
 8007410:	2b20      	cmp	r3, #32
 8007412:	d867      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05c      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
 8007418:	2b10      	cmp	r3, #16
 800741a:	d05a      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800741c:	e062      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6899      	ldr	r1, [r3, #8]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f000 fb17 	bl	8007a60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007440:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	609a      	str	r2, [r3, #8]
      break;
 800744a:	e04e      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6899      	ldr	r1, [r3, #8]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f000 fb00 	bl	8007a60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800746e:	609a      	str	r2, [r3, #8]
      break;
 8007470:	e03b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	461a      	mov	r2, r3
 8007480:	f000 fa74 	bl	800796c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2150      	movs	r1, #80	; 0x50
 800748a:	4618      	mov	r0, r3
 800748c:	f000 facd 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 8007490:	e02b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 fa93 	bl	80079ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2160      	movs	r1, #96	; 0x60
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fabd 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 80074b0:	e01b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6859      	ldr	r1, [r3, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	461a      	mov	r2, r3
 80074c0:	f000 fa54 	bl	800796c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2140      	movs	r1, #64	; 0x40
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 faad 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 80074d0:	e00b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f000 faa4 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 80074e2:	e002      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a34      	ldr	r2, [pc, #208]	; (8007638 <TIM_Base_SetConfig+0xe4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00f      	beq.n	800758c <TIM_Base_SetConfig+0x38>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007572:	d00b      	beq.n	800758c <TIM_Base_SetConfig+0x38>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a31      	ldr	r2, [pc, #196]	; (800763c <TIM_Base_SetConfig+0xe8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d007      	beq.n	800758c <TIM_Base_SetConfig+0x38>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a30      	ldr	r2, [pc, #192]	; (8007640 <TIM_Base_SetConfig+0xec>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_Base_SetConfig+0x38>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <TIM_Base_SetConfig+0xf0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d108      	bne.n	800759e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a25      	ldr	r2, [pc, #148]	; (8007638 <TIM_Base_SetConfig+0xe4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d01b      	beq.n	80075de <TIM_Base_SetConfig+0x8a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ac:	d017      	beq.n	80075de <TIM_Base_SetConfig+0x8a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a22      	ldr	r2, [pc, #136]	; (800763c <TIM_Base_SetConfig+0xe8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <TIM_Base_SetConfig+0x8a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a21      	ldr	r2, [pc, #132]	; (8007640 <TIM_Base_SetConfig+0xec>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00f      	beq.n	80075de <TIM_Base_SetConfig+0x8a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a20      	ldr	r2, [pc, #128]	; (8007644 <TIM_Base_SetConfig+0xf0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00b      	beq.n	80075de <TIM_Base_SetConfig+0x8a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <TIM_Base_SetConfig+0xf4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <TIM_Base_SetConfig+0x8a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1e      	ldr	r2, [pc, #120]	; (800764c <TIM_Base_SetConfig+0xf8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_Base_SetConfig+0x8a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1d      	ldr	r2, [pc, #116]	; (8007650 <TIM_Base_SetConfig+0xfc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d108      	bne.n	80075f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a08      	ldr	r2, [pc, #32]	; (8007638 <TIM_Base_SetConfig+0xe4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d103      	bne.n	8007624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	615a      	str	r2, [r3, #20]
}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40010000 	.word	0x40010000
 800763c:	40000400 	.word	0x40000400
 8007640:	40000800 	.word	0x40000800
 8007644:	40000c00 	.word	0x40000c00
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400
 8007650:	40014800 	.word	0x40014800

08007654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f023 0201 	bic.w	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f023 0302 	bic.w	r3, r3, #2
 800769c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a1c      	ldr	r2, [pc, #112]	; (800771c <TIM_OC1_SetConfig+0xc8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10c      	bne.n	80076ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0308 	bic.w	r3, r3, #8
 80076b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f023 0304 	bic.w	r3, r3, #4
 80076c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a13      	ldr	r2, [pc, #76]	; (800771c <TIM_OC1_SetConfig+0xc8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d111      	bne.n	80076f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	621a      	str	r2, [r3, #32]
}
 8007710:	bf00      	nop
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40010000 	.word	0x40010000

08007720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	f023 0210 	bic.w	r2, r3, #16
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0320 	bic.w	r3, r3, #32
 800776a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a1e      	ldr	r2, [pc, #120]	; (80077f4 <TIM_OC2_SetConfig+0xd4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10d      	bne.n	800779c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800779a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <TIM_OC2_SetConfig+0xd4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d113      	bne.n	80077cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	621a      	str	r2, [r3, #32]
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000

080077f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a1d      	ldr	r2, [pc, #116]	; (80078c8 <TIM_OC3_SetConfig+0xd0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10d      	bne.n	8007872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800785c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a14      	ldr	r2, [pc, #80]	; (80078c8 <TIM_OC3_SetConfig+0xd0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d113      	bne.n	80078a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	621a      	str	r2, [r3, #32]
}
 80078bc:	bf00      	nop
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	40010000 	.word	0x40010000

080078cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	031b      	lsls	r3, r3, #12
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a10      	ldr	r2, [pc, #64]	; (8007968 <TIM_OC4_SetConfig+0x9c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d109      	bne.n	8007940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	019b      	lsls	r3, r3, #6
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4313      	orrs	r3, r2
 800793e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40010000 	.word	0x40010000

0800796c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f023 0201 	bic.w	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f023 030a 	bic.w	r3, r3, #10
 80079a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b087      	sub	sp, #28
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f023 0210 	bic.w	r2, r3, #16
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	031b      	lsls	r3, r3, #12
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f043 0307 	orr.w	r3, r3, #7
 8007a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	021a      	lsls	r2, r3, #8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	609a      	str	r2, [r3, #8]
}
 8007a94:	bf00      	nop
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f003 031f 	and.w	r3, r3, #31
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a1a      	ldr	r2, [r3, #32]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6a1a      	ldr	r2, [r3, #32]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
	...

08007aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d101      	bne.n	8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e050      	b.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d018      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b50:	d013      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00e      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a16      	ldr	r2, [pc, #88]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d004      	beq.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a13      	ldr	r2, [pc, #76]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d10c      	bne.n	8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	40010000 	.word	0x40010000
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40000c00 	.word	0x40000c00
 8007bc4:	40014000 	.word	0x40014000

08007bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e03f      	b.n	8007c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fa ff9a 	bl	8002b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2224      	movs	r2, #36	; 0x24
 8007c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa69 	bl	800810c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695a      	ldr	r2, [r3, #20]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10d      	bne.n	8007cde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_UART_IRQHandler+0x52>
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f996 	bl	8008008 <UART_Receive_IT>
      return;
 8007cdc:	e0d0      	b.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80b0 	beq.w	8007e46 <HAL_UART_IRQHandler+0x1ba>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <HAL_UART_IRQHandler+0x70>
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80a5 	beq.w	8007e46 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_UART_IRQHandler+0x90>
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	f043 0201 	orr.w	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <HAL_UART_IRQHandler+0xb0>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	f043 0202 	orr.w	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <HAL_UART_IRQHandler+0xd0>
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d54:	f043 0204 	orr.w	r2, r3, #4
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00f      	beq.n	8007d86 <HAL_UART_IRQHandler+0xfa>
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <HAL_UART_IRQHandler+0xee>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	f043 0208 	orr.w	r2, r3, #8
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d077      	beq.n	8007e7e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <HAL_UART_IRQHandler+0x11c>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f930 	bl	8008008 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b40      	cmp	r3, #64	; 0x40
 8007db4:	bf0c      	ite	eq
 8007db6:	2301      	moveq	r3, #1
 8007db8:	2300      	movne	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <HAL_UART_IRQHandler+0x144>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d031      	beq.n	8007e34 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f879 	bl	8007ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de0:	2b40      	cmp	r3, #64	; 0x40
 8007de2:	d123      	bne.n	8007e2c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695a      	ldr	r2, [r3, #20]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d013      	beq.n	8007e24 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <HAL_UART_IRQHandler+0x1fc>)
 8007e02:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fb fa5d 	bl	80032c8 <HAL_DMA_Abort_IT>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d016      	beq.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e22:	e00e      	b.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f845 	bl	8007eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2a:	e00a      	b.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f841 	bl	8007eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e32:	e006      	b.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f83d 	bl	8007eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007e40:	e01d      	b.n	8007e7e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e42:	bf00      	nop
    return;
 8007e44:	e01b      	b.n	8007e7e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_UART_IRQHandler+0x1d6>
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f866 	bl	8007f2c <UART_Transmit_IT>
    return;
 8007e60:	e00e      	b.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8ae 	bl	8007fd8 <UART_EndTransmit_IT>
    return;
 8007e7c:	e000      	b.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	08007f05 	.word	0x08007f05

08007e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ede:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff ffc8 	bl	8007eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b21      	cmp	r3, #33	; 0x21
 8007f3e:	d144      	bne.n	8007fca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f48:	d11a      	bne.n	8007f80 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f5e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d105      	bne.n	8007f74 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	1c9a      	adds	r2, r3, #2
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	621a      	str	r2, [r3, #32]
 8007f72:	e00e      	b.n	8007f92 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	621a      	str	r2, [r3, #32]
 8007f7e:	e008      	b.n	8007f92 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	1c59      	adds	r1, r3, #1
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6211      	str	r1, [r2, #32]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10f      	bne.n	8007fc6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e000      	b.n	8007fcc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff ff47 	bl	8007e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b22      	cmp	r3, #34	; 0x22
 800801a:	d171      	bne.n	8008100 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008024:	d123      	bne.n	800806e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10e      	bne.n	8008052 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	1c9a      	adds	r2, r3, #2
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	629a      	str	r2, [r3, #40]	; 0x28
 8008050:	e029      	b.n	80080a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	b29b      	uxth	r3, r3
 800805a:	b2db      	uxtb	r3, r3
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	629a      	str	r2, [r3, #40]	; 0x28
 800806c:	e01b      	b.n	80080a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6858      	ldr	r0, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	1c59      	adds	r1, r3, #1
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6291      	str	r1, [r2, #40]	; 0x28
 8008086:	b2c2      	uxtb	r2, r0
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	e00c      	b.n	80080a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	b2da      	uxtb	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008098:	1c58      	adds	r0, r3, #1
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	6288      	str	r0, [r1, #40]	; 0x28
 800809e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	4619      	mov	r1, r3
 80080b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d120      	bne.n	80080fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0220 	bic.w	r2, r2, #32
 80080c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695a      	ldr	r2, [r3, #20]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0201 	bic.w	r2, r2, #1
 80080e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff fed4 	bl	8007ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e002      	b.n	8008102 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e000      	b.n	8008102 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008100:	2302      	movs	r3, #2
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	b0bd      	sub	sp, #244	; 0xf4
 8008112:	af00      	add	r7, sp, #0
 8008114:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008128:	68d9      	ldr	r1, [r3, #12]
 800812a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	ea40 0301 	orr.w	r3, r0, r1
 8008134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	431a      	orrs	r2, r3
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	431a      	orrs	r2, r3
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008164:	f021 010c 	bic.w	r1, r1, #12
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008172:	430b      	orrs	r3, r1
 8008174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008186:	6999      	ldr	r1, [r3, #24]
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	ea40 0301 	orr.w	r3, r0, r1
 8008192:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800819e:	f040 81a5 	bne.w	80084ec <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	4bcd      	ldr	r3, [pc, #820]	; (80084e0 <UART_SetConfig+0x3d4>)
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d006      	beq.n	80081bc <UART_SetConfig+0xb0>
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	4bcb      	ldr	r3, [pc, #812]	; (80084e4 <UART_SetConfig+0x3d8>)
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f040 80cb 	bne.w	8008352 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081bc:	f7fe fd62 	bl	8006c84 <HAL_RCC_GetPCLK2Freq>
 80081c0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081c8:	461c      	mov	r4, r3
 80081ca:	f04f 0500 	mov.w	r5, #0
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	1891      	adds	r1, r2, r2
 80081d4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80081d8:	415b      	adcs	r3, r3
 80081da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80081e2:	1912      	adds	r2, r2, r4
 80081e4:	eb45 0303 	adc.w	r3, r5, r3
 80081e8:	f04f 0000 	mov.w	r0, #0
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	00d9      	lsls	r1, r3, #3
 80081f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081f6:	00d0      	lsls	r0, r2, #3
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	1911      	adds	r1, r2, r4
 80081fe:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008202:	416b      	adcs	r3, r5
 8008204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	461a      	mov	r2, r3
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	1891      	adds	r1, r2, r2
 8008216:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800821a:	415b      	adcs	r3, r3
 800821c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008220:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008224:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008228:	f7f8 fda0 	bl	8000d6c <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4bad      	ldr	r3, [pc, #692]	; (80084e8 <UART_SetConfig+0x3dc>)
 8008232:	fba3 2302 	umull	r2, r3, r3, r2
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	011e      	lsls	r6, r3, #4
 800823a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800823e:	461c      	mov	r4, r3
 8008240:	f04f 0500 	mov.w	r5, #0
 8008244:	4622      	mov	r2, r4
 8008246:	462b      	mov	r3, r5
 8008248:	1891      	adds	r1, r2, r2
 800824a:	67b9      	str	r1, [r7, #120]	; 0x78
 800824c:	415b      	adcs	r3, r3
 800824e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008250:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008254:	1912      	adds	r2, r2, r4
 8008256:	eb45 0303 	adc.w	r3, r5, r3
 800825a:	f04f 0000 	mov.w	r0, #0
 800825e:	f04f 0100 	mov.w	r1, #0
 8008262:	00d9      	lsls	r1, r3, #3
 8008264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008268:	00d0      	lsls	r0, r2, #3
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	1911      	adds	r1, r2, r4
 8008270:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008274:	416b      	adcs	r3, r5
 8008276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	461a      	mov	r2, r3
 8008282:	f04f 0300 	mov.w	r3, #0
 8008286:	1891      	adds	r1, r2, r2
 8008288:	6739      	str	r1, [r7, #112]	; 0x70
 800828a:	415b      	adcs	r3, r3
 800828c:	677b      	str	r3, [r7, #116]	; 0x74
 800828e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008292:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008296:	f7f8 fd69 	bl	8000d6c <__aeabi_uldivmod>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4b92      	ldr	r3, [pc, #584]	; (80084e8 <UART_SetConfig+0x3dc>)
 80082a0:	fba3 1302 	umull	r1, r3, r3, r2
 80082a4:	095b      	lsrs	r3, r3, #5
 80082a6:	2164      	movs	r1, #100	; 0x64
 80082a8:	fb01 f303 	mul.w	r3, r1, r3
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	3332      	adds	r3, #50	; 0x32
 80082b2:	4a8d      	ldr	r2, [pc, #564]	; (80084e8 <UART_SetConfig+0x3dc>)
 80082b4:	fba2 2303 	umull	r2, r3, r2, r3
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	005b      	lsls	r3, r3, #1
 80082bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082c0:	441e      	add	r6, r3
 80082c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082c6:	4618      	mov	r0, r3
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	1894      	adds	r4, r2, r2
 80082d2:	66bc      	str	r4, [r7, #104]	; 0x68
 80082d4:	415b      	adcs	r3, r3
 80082d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80082dc:	1812      	adds	r2, r2, r0
 80082de:	eb41 0303 	adc.w	r3, r1, r3
 80082e2:	f04f 0400 	mov.w	r4, #0
 80082e6:	f04f 0500 	mov.w	r5, #0
 80082ea:	00dd      	lsls	r5, r3, #3
 80082ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082f0:	00d4      	lsls	r4, r2, #3
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	1814      	adds	r4, r2, r0
 80082f8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80082fc:	414b      	adcs	r3, r1
 80082fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	461a      	mov	r2, r3
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	1891      	adds	r1, r2, r2
 8008310:	6639      	str	r1, [r7, #96]	; 0x60
 8008312:	415b      	adcs	r3, r3
 8008314:	667b      	str	r3, [r7, #100]	; 0x64
 8008316:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800831a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800831e:	f7f8 fd25 	bl	8000d6c <__aeabi_uldivmod>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4b70      	ldr	r3, [pc, #448]	; (80084e8 <UART_SetConfig+0x3dc>)
 8008328:	fba3 1302 	umull	r1, r3, r3, r2
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	2164      	movs	r1, #100	; 0x64
 8008330:	fb01 f303 	mul.w	r3, r1, r3
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	3332      	adds	r3, #50	; 0x32
 800833a:	4a6b      	ldr	r2, [pc, #428]	; (80084e8 <UART_SetConfig+0x3dc>)
 800833c:	fba2 2303 	umull	r2, r3, r2, r3
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	f003 0207 	and.w	r2, r3, #7
 8008346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4432      	add	r2, r6
 800834e:	609a      	str	r2, [r3, #8]
 8008350:	e26d      	b.n	800882e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008352:	f7fe fc83 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 8008356:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800835a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800835e:	461c      	mov	r4, r3
 8008360:	f04f 0500 	mov.w	r5, #0
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	1891      	adds	r1, r2, r2
 800836a:	65b9      	str	r1, [r7, #88]	; 0x58
 800836c:	415b      	adcs	r3, r3
 800836e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008370:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008374:	1912      	adds	r2, r2, r4
 8008376:	eb45 0303 	adc.w	r3, r5, r3
 800837a:	f04f 0000 	mov.w	r0, #0
 800837e:	f04f 0100 	mov.w	r1, #0
 8008382:	00d9      	lsls	r1, r3, #3
 8008384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008388:	00d0      	lsls	r0, r2, #3
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	1911      	adds	r1, r2, r4
 8008390:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008394:	416b      	adcs	r3, r5
 8008396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	461a      	mov	r2, r3
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	1891      	adds	r1, r2, r2
 80083a8:	6539      	str	r1, [r7, #80]	; 0x50
 80083aa:	415b      	adcs	r3, r3
 80083ac:	657b      	str	r3, [r7, #84]	; 0x54
 80083ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083b2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80083b6:	f7f8 fcd9 	bl	8000d6c <__aeabi_uldivmod>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4b4a      	ldr	r3, [pc, #296]	; (80084e8 <UART_SetConfig+0x3dc>)
 80083c0:	fba3 2302 	umull	r2, r3, r3, r2
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	011e      	lsls	r6, r3, #4
 80083c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083cc:	461c      	mov	r4, r3
 80083ce:	f04f 0500 	mov.w	r5, #0
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	1891      	adds	r1, r2, r2
 80083d8:	64b9      	str	r1, [r7, #72]	; 0x48
 80083da:	415b      	adcs	r3, r3
 80083dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083e2:	1912      	adds	r2, r2, r4
 80083e4:	eb45 0303 	adc.w	r3, r5, r3
 80083e8:	f04f 0000 	mov.w	r0, #0
 80083ec:	f04f 0100 	mov.w	r1, #0
 80083f0:	00d9      	lsls	r1, r3, #3
 80083f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083f6:	00d0      	lsls	r0, r2, #3
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	1911      	adds	r1, r2, r4
 80083fe:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008402:	416b      	adcs	r3, r5
 8008404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	461a      	mov	r2, r3
 8008410:	f04f 0300 	mov.w	r3, #0
 8008414:	1891      	adds	r1, r2, r2
 8008416:	6439      	str	r1, [r7, #64]	; 0x40
 8008418:	415b      	adcs	r3, r3
 800841a:	647b      	str	r3, [r7, #68]	; 0x44
 800841c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008420:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008424:	f7f8 fca2 	bl	8000d6c <__aeabi_uldivmod>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4b2e      	ldr	r3, [pc, #184]	; (80084e8 <UART_SetConfig+0x3dc>)
 800842e:	fba3 1302 	umull	r1, r3, r3, r2
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	2164      	movs	r1, #100	; 0x64
 8008436:	fb01 f303 	mul.w	r3, r1, r3
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	3332      	adds	r3, #50	; 0x32
 8008440:	4a29      	ldr	r2, [pc, #164]	; (80084e8 <UART_SetConfig+0x3dc>)
 8008442:	fba2 2303 	umull	r2, r3, r2, r3
 8008446:	095b      	lsrs	r3, r3, #5
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800844e:	441e      	add	r6, r3
 8008450:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008454:	4618      	mov	r0, r3
 8008456:	f04f 0100 	mov.w	r1, #0
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	1894      	adds	r4, r2, r2
 8008460:	63bc      	str	r4, [r7, #56]	; 0x38
 8008462:	415b      	adcs	r3, r3
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008466:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800846a:	1812      	adds	r2, r2, r0
 800846c:	eb41 0303 	adc.w	r3, r1, r3
 8008470:	f04f 0400 	mov.w	r4, #0
 8008474:	f04f 0500 	mov.w	r5, #0
 8008478:	00dd      	lsls	r5, r3, #3
 800847a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800847e:	00d4      	lsls	r4, r2, #3
 8008480:	4622      	mov	r2, r4
 8008482:	462b      	mov	r3, r5
 8008484:	1814      	adds	r4, r2, r0
 8008486:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800848a:	414b      	adcs	r3, r1
 800848c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	461a      	mov	r2, r3
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	1891      	adds	r1, r2, r2
 800849e:	6339      	str	r1, [r7, #48]	; 0x30
 80084a0:	415b      	adcs	r3, r3
 80084a2:	637b      	str	r3, [r7, #52]	; 0x34
 80084a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80084a8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084ac:	f7f8 fc5e 	bl	8000d6c <__aeabi_uldivmod>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <UART_SetConfig+0x3dc>)
 80084b6:	fba3 1302 	umull	r1, r3, r3, r2
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	2164      	movs	r1, #100	; 0x64
 80084be:	fb01 f303 	mul.w	r3, r1, r3
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	3332      	adds	r3, #50	; 0x32
 80084c8:	4a07      	ldr	r2, [pc, #28]	; (80084e8 <UART_SetConfig+0x3dc>)
 80084ca:	fba2 2303 	umull	r2, r3, r2, r3
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	f003 0207 	and.w	r2, r3, #7
 80084d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4432      	add	r2, r6
 80084dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80084de:	e1a6      	b.n	800882e <UART_SetConfig+0x722>
 80084e0:	40011000 	.word	0x40011000
 80084e4:	40011400 	.word	0x40011400
 80084e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4bd1      	ldr	r3, [pc, #836]	; (8008838 <UART_SetConfig+0x72c>)
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d006      	beq.n	8008506 <UART_SetConfig+0x3fa>
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4bcf      	ldr	r3, [pc, #828]	; (800883c <UART_SetConfig+0x730>)
 8008500:	429a      	cmp	r2, r3
 8008502:	f040 80ca 	bne.w	800869a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008506:	f7fe fbbd 	bl	8006c84 <HAL_RCC_GetPCLK2Freq>
 800850a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800850e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008512:	461c      	mov	r4, r3
 8008514:	f04f 0500 	mov.w	r5, #0
 8008518:	4622      	mov	r2, r4
 800851a:	462b      	mov	r3, r5
 800851c:	1891      	adds	r1, r2, r2
 800851e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008520:	415b      	adcs	r3, r3
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008528:	1912      	adds	r2, r2, r4
 800852a:	eb45 0303 	adc.w	r3, r5, r3
 800852e:	f04f 0000 	mov.w	r0, #0
 8008532:	f04f 0100 	mov.w	r1, #0
 8008536:	00d9      	lsls	r1, r3, #3
 8008538:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800853c:	00d0      	lsls	r0, r2, #3
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	eb12 0a04 	adds.w	sl, r2, r4
 8008546:	eb43 0b05 	adc.w	fp, r3, r5
 800854a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4618      	mov	r0, r3
 8008552:	f04f 0100 	mov.w	r1, #0
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	008b      	lsls	r3, r1, #2
 8008560:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008564:	0082      	lsls	r2, r0, #2
 8008566:	4650      	mov	r0, sl
 8008568:	4659      	mov	r1, fp
 800856a:	f7f8 fbff 	bl	8000d6c <__aeabi_uldivmod>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4bb3      	ldr	r3, [pc, #716]	; (8008840 <UART_SetConfig+0x734>)
 8008574:	fba3 2302 	umull	r2, r3, r3, r2
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	011e      	lsls	r6, r3, #4
 800857c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008580:	4618      	mov	r0, r3
 8008582:	f04f 0100 	mov.w	r1, #0
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	1894      	adds	r4, r2, r2
 800858c:	623c      	str	r4, [r7, #32]
 800858e:	415b      	adcs	r3, r3
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
 8008592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008596:	1812      	adds	r2, r2, r0
 8008598:	eb41 0303 	adc.w	r3, r1, r3
 800859c:	f04f 0400 	mov.w	r4, #0
 80085a0:	f04f 0500 	mov.w	r5, #0
 80085a4:	00dd      	lsls	r5, r3, #3
 80085a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085aa:	00d4      	lsls	r4, r2, #3
 80085ac:	4622      	mov	r2, r4
 80085ae:	462b      	mov	r3, r5
 80085b0:	1814      	adds	r4, r2, r0
 80085b2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80085b6:	414b      	adcs	r3, r1
 80085b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f04f 0100 	mov.w	r1, #0
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	008b      	lsls	r3, r1, #2
 80085d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085d6:	0082      	lsls	r2, r0, #2
 80085d8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80085dc:	f7f8 fbc6 	bl	8000d6c <__aeabi_uldivmod>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4b96      	ldr	r3, [pc, #600]	; (8008840 <UART_SetConfig+0x734>)
 80085e6:	fba3 1302 	umull	r1, r3, r3, r2
 80085ea:	095b      	lsrs	r3, r3, #5
 80085ec:	2164      	movs	r1, #100	; 0x64
 80085ee:	fb01 f303 	mul.w	r3, r1, r3
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	3332      	adds	r3, #50	; 0x32
 80085f8:	4a91      	ldr	r2, [pc, #580]	; (8008840 <UART_SetConfig+0x734>)
 80085fa:	fba2 2303 	umull	r2, r3, r2, r3
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008604:	441e      	add	r6, r3
 8008606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800860a:	4618      	mov	r0, r3
 800860c:	f04f 0100 	mov.w	r1, #0
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	1894      	adds	r4, r2, r2
 8008616:	61bc      	str	r4, [r7, #24]
 8008618:	415b      	adcs	r3, r3
 800861a:	61fb      	str	r3, [r7, #28]
 800861c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008620:	1812      	adds	r2, r2, r0
 8008622:	eb41 0303 	adc.w	r3, r1, r3
 8008626:	f04f 0400 	mov.w	r4, #0
 800862a:	f04f 0500 	mov.w	r5, #0
 800862e:	00dd      	lsls	r5, r3, #3
 8008630:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008634:	00d4      	lsls	r4, r2, #3
 8008636:	4622      	mov	r2, r4
 8008638:	462b      	mov	r3, r5
 800863a:	1814      	adds	r4, r2, r0
 800863c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008640:	414b      	adcs	r3, r1
 8008642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	4618      	mov	r0, r3
 800864e:	f04f 0100 	mov.w	r1, #0
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	008b      	lsls	r3, r1, #2
 800865c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008660:	0082      	lsls	r2, r0, #2
 8008662:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008666:	f7f8 fb81 	bl	8000d6c <__aeabi_uldivmod>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <UART_SetConfig+0x734>)
 8008670:	fba3 1302 	umull	r1, r3, r3, r2
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	2164      	movs	r1, #100	; 0x64
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	3332      	adds	r3, #50	; 0x32
 8008682:	4a6f      	ldr	r2, [pc, #444]	; (8008840 <UART_SetConfig+0x734>)
 8008684:	fba2 2303 	umull	r2, r3, r2, r3
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4432      	add	r2, r6
 8008696:	609a      	str	r2, [r3, #8]
 8008698:	e0c9      	b.n	800882e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800869a:	f7fe fadf 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 800869e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086a6:	461c      	mov	r4, r3
 80086a8:	f04f 0500 	mov.w	r5, #0
 80086ac:	4622      	mov	r2, r4
 80086ae:	462b      	mov	r3, r5
 80086b0:	1891      	adds	r1, r2, r2
 80086b2:	6139      	str	r1, [r7, #16]
 80086b4:	415b      	adcs	r3, r3
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80086bc:	1912      	adds	r2, r2, r4
 80086be:	eb45 0303 	adc.w	r3, r5, r3
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f04f 0100 	mov.w	r1, #0
 80086ca:	00d9      	lsls	r1, r3, #3
 80086cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086d0:	00d0      	lsls	r0, r2, #3
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	eb12 0804 	adds.w	r8, r2, r4
 80086da:	eb43 0905 	adc.w	r9, r3, r5
 80086de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f04f 0100 	mov.w	r1, #0
 80086ea:	f04f 0200 	mov.w	r2, #0
 80086ee:	f04f 0300 	mov.w	r3, #0
 80086f2:	008b      	lsls	r3, r1, #2
 80086f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086f8:	0082      	lsls	r2, r0, #2
 80086fa:	4640      	mov	r0, r8
 80086fc:	4649      	mov	r1, r9
 80086fe:	f7f8 fb35 	bl	8000d6c <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4b4e      	ldr	r3, [pc, #312]	; (8008840 <UART_SetConfig+0x734>)
 8008708:	fba3 2302 	umull	r2, r3, r3, r2
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	011e      	lsls	r6, r3, #4
 8008710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008714:	4618      	mov	r0, r3
 8008716:	f04f 0100 	mov.w	r1, #0
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	1894      	adds	r4, r2, r2
 8008720:	60bc      	str	r4, [r7, #8]
 8008722:	415b      	adcs	r3, r3
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800872a:	1812      	adds	r2, r2, r0
 800872c:	eb41 0303 	adc.w	r3, r1, r3
 8008730:	f04f 0400 	mov.w	r4, #0
 8008734:	f04f 0500 	mov.w	r5, #0
 8008738:	00dd      	lsls	r5, r3, #3
 800873a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800873e:	00d4      	lsls	r4, r2, #3
 8008740:	4622      	mov	r2, r4
 8008742:	462b      	mov	r3, r5
 8008744:	1814      	adds	r4, r2, r0
 8008746:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800874a:	414b      	adcs	r3, r1
 800874c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	4618      	mov	r0, r3
 8008758:	f04f 0100 	mov.w	r1, #0
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	008b      	lsls	r3, r1, #2
 8008766:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800876a:	0082      	lsls	r2, r0, #2
 800876c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008770:	f7f8 fafc 	bl	8000d6c <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4b31      	ldr	r3, [pc, #196]	; (8008840 <UART_SetConfig+0x734>)
 800877a:	fba3 1302 	umull	r1, r3, r3, r2
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	2164      	movs	r1, #100	; 0x64
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	3332      	adds	r3, #50	; 0x32
 800878c:	4a2c      	ldr	r2, [pc, #176]	; (8008840 <UART_SetConfig+0x734>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008798:	441e      	add	r6, r3
 800879a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800879e:	4618      	mov	r0, r3
 80087a0:	f04f 0100 	mov.w	r1, #0
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	1894      	adds	r4, r2, r2
 80087aa:	603c      	str	r4, [r7, #0]
 80087ac:	415b      	adcs	r3, r3
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b4:	1812      	adds	r2, r2, r0
 80087b6:	eb41 0303 	adc.w	r3, r1, r3
 80087ba:	f04f 0400 	mov.w	r4, #0
 80087be:	f04f 0500 	mov.w	r5, #0
 80087c2:	00dd      	lsls	r5, r3, #3
 80087c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087c8:	00d4      	lsls	r4, r2, #3
 80087ca:	4622      	mov	r2, r4
 80087cc:	462b      	mov	r3, r5
 80087ce:	1814      	adds	r4, r2, r0
 80087d0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80087d4:	414b      	adcs	r3, r1
 80087d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f04f 0100 	mov.w	r1, #0
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	f04f 0300 	mov.w	r3, #0
 80087ee:	008b      	lsls	r3, r1, #2
 80087f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80087f4:	0082      	lsls	r2, r0, #2
 80087f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80087fa:	f7f8 fab7 	bl	8000d6c <__aeabi_uldivmod>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <UART_SetConfig+0x734>)
 8008804:	fba3 1302 	umull	r1, r3, r3, r2
 8008808:	095b      	lsrs	r3, r3, #5
 800880a:	2164      	movs	r1, #100	; 0x64
 800880c:	fb01 f303 	mul.w	r3, r1, r3
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	3332      	adds	r3, #50	; 0x32
 8008816:	4a0a      	ldr	r2, [pc, #40]	; (8008840 <UART_SetConfig+0x734>)
 8008818:	fba2 2303 	umull	r2, r3, r2, r3
 800881c:	095b      	lsrs	r3, r3, #5
 800881e:	f003 020f 	and.w	r2, r3, #15
 8008822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4432      	add	r2, r6
 800882a:	609a      	str	r2, [r3, #8]
}
 800882c:	e7ff      	b.n	800882e <UART_SetConfig+0x722>
 800882e:	bf00      	nop
 8008830:	37f4      	adds	r7, #244	; 0xf4
 8008832:	46bd      	mov	sp, r7
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	40011000 	.word	0x40011000
 800883c:	40011400 	.word	0x40011400
 8008840:	51eb851f 	.word	0x51eb851f

08008844 <__errno>:
 8008844:	4b01      	ldr	r3, [pc, #4]	; (800884c <__errno+0x8>)
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	2000002c 	.word	0x2000002c

08008850 <__libc_init_array>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4d0d      	ldr	r5, [pc, #52]	; (8008888 <__libc_init_array+0x38>)
 8008854:	4c0d      	ldr	r4, [pc, #52]	; (800888c <__libc_init_array+0x3c>)
 8008856:	1b64      	subs	r4, r4, r5
 8008858:	10a4      	asrs	r4, r4, #2
 800885a:	2600      	movs	r6, #0
 800885c:	42a6      	cmp	r6, r4
 800885e:	d109      	bne.n	8008874 <__libc_init_array+0x24>
 8008860:	4d0b      	ldr	r5, [pc, #44]	; (8008890 <__libc_init_array+0x40>)
 8008862:	4c0c      	ldr	r4, [pc, #48]	; (8008894 <__libc_init_array+0x44>)
 8008864:	f000 ffd6 	bl	8009814 <_init>
 8008868:	1b64      	subs	r4, r4, r5
 800886a:	10a4      	asrs	r4, r4, #2
 800886c:	2600      	movs	r6, #0
 800886e:	42a6      	cmp	r6, r4
 8008870:	d105      	bne.n	800887e <__libc_init_array+0x2e>
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	f855 3b04 	ldr.w	r3, [r5], #4
 8008878:	4798      	blx	r3
 800887a:	3601      	adds	r6, #1
 800887c:	e7ee      	b.n	800885c <__libc_init_array+0xc>
 800887e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008882:	4798      	blx	r3
 8008884:	3601      	adds	r6, #1
 8008886:	e7f2      	b.n	800886e <__libc_init_array+0x1e>
 8008888:	080098a0 	.word	0x080098a0
 800888c:	080098a0 	.word	0x080098a0
 8008890:	080098a0 	.word	0x080098a0
 8008894:	080098a4 	.word	0x080098a4

08008898 <memset>:
 8008898:	4402      	add	r2, r0
 800889a:	4603      	mov	r3, r0
 800889c:	4293      	cmp	r3, r2
 800889e:	d100      	bne.n	80088a2 <memset+0xa>
 80088a0:	4770      	bx	lr
 80088a2:	f803 1b01 	strb.w	r1, [r3], #1
 80088a6:	e7f9      	b.n	800889c <memset+0x4>

080088a8 <pow>:
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	ec59 8b10 	vmov	r8, r9, d0
 80088b0:	ec57 6b11 	vmov	r6, r7, d1
 80088b4:	f000 f8a8 	bl	8008a08 <__ieee754_pow>
 80088b8:	4b4e      	ldr	r3, [pc, #312]	; (80089f4 <pow+0x14c>)
 80088ba:	f993 3000 	ldrsb.w	r3, [r3]
 80088be:	3301      	adds	r3, #1
 80088c0:	ec55 4b10 	vmov	r4, r5, d0
 80088c4:	d015      	beq.n	80088f2 <pow+0x4a>
 80088c6:	4632      	mov	r2, r6
 80088c8:	463b      	mov	r3, r7
 80088ca:	4630      	mov	r0, r6
 80088cc:	4639      	mov	r1, r7
 80088ce:	f7f8 f8d9 	bl	8000a84 <__aeabi_dcmpun>
 80088d2:	b970      	cbnz	r0, 80088f2 <pow+0x4a>
 80088d4:	4642      	mov	r2, r8
 80088d6:	464b      	mov	r3, r9
 80088d8:	4640      	mov	r0, r8
 80088da:	4649      	mov	r1, r9
 80088dc:	f7f8 f8d2 	bl	8000a84 <__aeabi_dcmpun>
 80088e0:	2200      	movs	r2, #0
 80088e2:	2300      	movs	r3, #0
 80088e4:	b148      	cbz	r0, 80088fa <pow+0x52>
 80088e6:	4630      	mov	r0, r6
 80088e8:	4639      	mov	r1, r7
 80088ea:	f7f8 f899 	bl	8000a20 <__aeabi_dcmpeq>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d17d      	bne.n	80089ee <pow+0x146>
 80088f2:	ec45 4b10 	vmov	d0, r4, r5
 80088f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fa:	4640      	mov	r0, r8
 80088fc:	4649      	mov	r1, r9
 80088fe:	f7f8 f88f 	bl	8000a20 <__aeabi_dcmpeq>
 8008902:	b1e0      	cbz	r0, 800893e <pow+0x96>
 8008904:	2200      	movs	r2, #0
 8008906:	2300      	movs	r3, #0
 8008908:	4630      	mov	r0, r6
 800890a:	4639      	mov	r1, r7
 800890c:	f7f8 f888 	bl	8000a20 <__aeabi_dcmpeq>
 8008910:	2800      	cmp	r0, #0
 8008912:	d16c      	bne.n	80089ee <pow+0x146>
 8008914:	ec47 6b10 	vmov	d0, r6, r7
 8008918:	f000 fe55 	bl	80095c6 <finite>
 800891c:	2800      	cmp	r0, #0
 800891e:	d0e8      	beq.n	80088f2 <pow+0x4a>
 8008920:	2200      	movs	r2, #0
 8008922:	2300      	movs	r3, #0
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f7f8 f884 	bl	8000a34 <__aeabi_dcmplt>
 800892c:	2800      	cmp	r0, #0
 800892e:	d0e0      	beq.n	80088f2 <pow+0x4a>
 8008930:	f7ff ff88 	bl	8008844 <__errno>
 8008934:	2321      	movs	r3, #33	; 0x21
 8008936:	6003      	str	r3, [r0, #0]
 8008938:	2400      	movs	r4, #0
 800893a:	4d2f      	ldr	r5, [pc, #188]	; (80089f8 <pow+0x150>)
 800893c:	e7d9      	b.n	80088f2 <pow+0x4a>
 800893e:	ec45 4b10 	vmov	d0, r4, r5
 8008942:	f000 fe40 	bl	80095c6 <finite>
 8008946:	bbb8      	cbnz	r0, 80089b8 <pow+0x110>
 8008948:	ec49 8b10 	vmov	d0, r8, r9
 800894c:	f000 fe3b 	bl	80095c6 <finite>
 8008950:	b390      	cbz	r0, 80089b8 <pow+0x110>
 8008952:	ec47 6b10 	vmov	d0, r6, r7
 8008956:	f000 fe36 	bl	80095c6 <finite>
 800895a:	b368      	cbz	r0, 80089b8 <pow+0x110>
 800895c:	4622      	mov	r2, r4
 800895e:	462b      	mov	r3, r5
 8008960:	4620      	mov	r0, r4
 8008962:	4629      	mov	r1, r5
 8008964:	f7f8 f88e 	bl	8000a84 <__aeabi_dcmpun>
 8008968:	b160      	cbz	r0, 8008984 <pow+0xdc>
 800896a:	f7ff ff6b 	bl	8008844 <__errno>
 800896e:	2321      	movs	r3, #33	; 0x21
 8008970:	6003      	str	r3, [r0, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	2300      	movs	r3, #0
 8008976:	4610      	mov	r0, r2
 8008978:	4619      	mov	r1, r3
 800897a:	f7f7 ff13 	bl	80007a4 <__aeabi_ddiv>
 800897e:	4604      	mov	r4, r0
 8008980:	460d      	mov	r5, r1
 8008982:	e7b6      	b.n	80088f2 <pow+0x4a>
 8008984:	f7ff ff5e 	bl	8008844 <__errno>
 8008988:	2322      	movs	r3, #34	; 0x22
 800898a:	6003      	str	r3, [r0, #0]
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f8 f84e 	bl	8000a34 <__aeabi_dcmplt>
 8008998:	2400      	movs	r4, #0
 800899a:	b158      	cbz	r0, 80089b4 <pow+0x10c>
 800899c:	ec47 6b10 	vmov	d0, r6, r7
 80089a0:	f000 fe26 	bl	80095f0 <rint>
 80089a4:	4632      	mov	r2, r6
 80089a6:	ec51 0b10 	vmov	r0, r1, d0
 80089aa:	463b      	mov	r3, r7
 80089ac:	f7f8 f838 	bl	8000a20 <__aeabi_dcmpeq>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0c2      	beq.n	800893a <pow+0x92>
 80089b4:	4d11      	ldr	r5, [pc, #68]	; (80089fc <pow+0x154>)
 80089b6:	e79c      	b.n	80088f2 <pow+0x4a>
 80089b8:	2200      	movs	r2, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f8 f82e 	bl	8000a20 <__aeabi_dcmpeq>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d094      	beq.n	80088f2 <pow+0x4a>
 80089c8:	ec49 8b10 	vmov	d0, r8, r9
 80089cc:	f000 fdfb 	bl	80095c6 <finite>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d08e      	beq.n	80088f2 <pow+0x4a>
 80089d4:	ec47 6b10 	vmov	d0, r6, r7
 80089d8:	f000 fdf5 	bl	80095c6 <finite>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d088      	beq.n	80088f2 <pow+0x4a>
 80089e0:	f7ff ff30 	bl	8008844 <__errno>
 80089e4:	2322      	movs	r3, #34	; 0x22
 80089e6:	6003      	str	r3, [r0, #0]
 80089e8:	2400      	movs	r4, #0
 80089ea:	2500      	movs	r5, #0
 80089ec:	e781      	b.n	80088f2 <pow+0x4a>
 80089ee:	4d04      	ldr	r5, [pc, #16]	; (8008a00 <pow+0x158>)
 80089f0:	2400      	movs	r4, #0
 80089f2:	e77e      	b.n	80088f2 <pow+0x4a>
 80089f4:	20000090 	.word	0x20000090
 80089f8:	fff00000 	.word	0xfff00000
 80089fc:	7ff00000 	.word	0x7ff00000
 8008a00:	3ff00000 	.word	0x3ff00000
 8008a04:	00000000 	.word	0x00000000

08008a08 <__ieee754_pow>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	ed2d 8b06 	vpush	{d8-d10}
 8008a10:	b08d      	sub	sp, #52	; 0x34
 8008a12:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008a16:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008a1a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008a1e:	ea56 0100 	orrs.w	r1, r6, r0
 8008a22:	ec53 2b10 	vmov	r2, r3, d0
 8008a26:	f000 84d1 	beq.w	80093cc <__ieee754_pow+0x9c4>
 8008a2a:	497f      	ldr	r1, [pc, #508]	; (8008c28 <__ieee754_pow+0x220>)
 8008a2c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008a30:	428c      	cmp	r4, r1
 8008a32:	ee10 8a10 	vmov	r8, s0
 8008a36:	4699      	mov	r9, r3
 8008a38:	dc09      	bgt.n	8008a4e <__ieee754_pow+0x46>
 8008a3a:	d103      	bne.n	8008a44 <__ieee754_pow+0x3c>
 8008a3c:	b97a      	cbnz	r2, 8008a5e <__ieee754_pow+0x56>
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	dd02      	ble.n	8008a48 <__ieee754_pow+0x40>
 8008a42:	e00c      	b.n	8008a5e <__ieee754_pow+0x56>
 8008a44:	428e      	cmp	r6, r1
 8008a46:	dc02      	bgt.n	8008a4e <__ieee754_pow+0x46>
 8008a48:	428e      	cmp	r6, r1
 8008a4a:	d110      	bne.n	8008a6e <__ieee754_pow+0x66>
 8008a4c:	b178      	cbz	r0, 8008a6e <__ieee754_pow+0x66>
 8008a4e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a52:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a56:	ea54 0308 	orrs.w	r3, r4, r8
 8008a5a:	f000 84b7 	beq.w	80093cc <__ieee754_pow+0x9c4>
 8008a5e:	4873      	ldr	r0, [pc, #460]	; (8008c2c <__ieee754_pow+0x224>)
 8008a60:	b00d      	add	sp, #52	; 0x34
 8008a62:	ecbd 8b06 	vpop	{d8-d10}
 8008a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6a:	f000 bdb9 	b.w	80095e0 <nan>
 8008a6e:	f1b9 0f00 	cmp.w	r9, #0
 8008a72:	da36      	bge.n	8008ae2 <__ieee754_pow+0xda>
 8008a74:	496e      	ldr	r1, [pc, #440]	; (8008c30 <__ieee754_pow+0x228>)
 8008a76:	428e      	cmp	r6, r1
 8008a78:	dc51      	bgt.n	8008b1e <__ieee754_pow+0x116>
 8008a7a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008a7e:	428e      	cmp	r6, r1
 8008a80:	f340 84af 	ble.w	80093e2 <__ieee754_pow+0x9da>
 8008a84:	1531      	asrs	r1, r6, #20
 8008a86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008a8a:	2914      	cmp	r1, #20
 8008a8c:	dd0f      	ble.n	8008aae <__ieee754_pow+0xa6>
 8008a8e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008a92:	fa20 fc01 	lsr.w	ip, r0, r1
 8008a96:	fa0c f101 	lsl.w	r1, ip, r1
 8008a9a:	4281      	cmp	r1, r0
 8008a9c:	f040 84a1 	bne.w	80093e2 <__ieee754_pow+0x9da>
 8008aa0:	f00c 0c01 	and.w	ip, ip, #1
 8008aa4:	f1cc 0102 	rsb	r1, ip, #2
 8008aa8:	9100      	str	r1, [sp, #0]
 8008aaa:	b180      	cbz	r0, 8008ace <__ieee754_pow+0xc6>
 8008aac:	e059      	b.n	8008b62 <__ieee754_pow+0x15a>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d155      	bne.n	8008b5e <__ieee754_pow+0x156>
 8008ab2:	f1c1 0114 	rsb	r1, r1, #20
 8008ab6:	fa46 fc01 	asr.w	ip, r6, r1
 8008aba:	fa0c f101 	lsl.w	r1, ip, r1
 8008abe:	42b1      	cmp	r1, r6
 8008ac0:	f040 848c 	bne.w	80093dc <__ieee754_pow+0x9d4>
 8008ac4:	f00c 0c01 	and.w	ip, ip, #1
 8008ac8:	f1cc 0102 	rsb	r1, ip, #2
 8008acc:	9100      	str	r1, [sp, #0]
 8008ace:	4959      	ldr	r1, [pc, #356]	; (8008c34 <__ieee754_pow+0x22c>)
 8008ad0:	428e      	cmp	r6, r1
 8008ad2:	d12d      	bne.n	8008b30 <__ieee754_pow+0x128>
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	da79      	bge.n	8008bcc <__ieee754_pow+0x1c4>
 8008ad8:	4956      	ldr	r1, [pc, #344]	; (8008c34 <__ieee754_pow+0x22c>)
 8008ada:	2000      	movs	r0, #0
 8008adc:	f7f7 fe62 	bl	80007a4 <__aeabi_ddiv>
 8008ae0:	e016      	b.n	8008b10 <__ieee754_pow+0x108>
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	9100      	str	r1, [sp, #0]
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d13b      	bne.n	8008b62 <__ieee754_pow+0x15a>
 8008aea:	494f      	ldr	r1, [pc, #316]	; (8008c28 <__ieee754_pow+0x220>)
 8008aec:	428e      	cmp	r6, r1
 8008aee:	d1ee      	bne.n	8008ace <__ieee754_pow+0xc6>
 8008af0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008af4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008af8:	ea53 0308 	orrs.w	r3, r3, r8
 8008afc:	f000 8466 	beq.w	80093cc <__ieee754_pow+0x9c4>
 8008b00:	4b4d      	ldr	r3, [pc, #308]	; (8008c38 <__ieee754_pow+0x230>)
 8008b02:	429c      	cmp	r4, r3
 8008b04:	dd0d      	ble.n	8008b22 <__ieee754_pow+0x11a>
 8008b06:	2f00      	cmp	r7, #0
 8008b08:	f280 8464 	bge.w	80093d4 <__ieee754_pow+0x9cc>
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	2100      	movs	r1, #0
 8008b10:	ec41 0b10 	vmov	d0, r0, r1
 8008b14:	b00d      	add	sp, #52	; 0x34
 8008b16:	ecbd 8b06 	vpop	{d8-d10}
 8008b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1e:	2102      	movs	r1, #2
 8008b20:	e7e0      	b.n	8008ae4 <__ieee754_pow+0xdc>
 8008b22:	2f00      	cmp	r7, #0
 8008b24:	daf2      	bge.n	8008b0c <__ieee754_pow+0x104>
 8008b26:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008b2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b2e:	e7ef      	b.n	8008b10 <__ieee754_pow+0x108>
 8008b30:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008b34:	d104      	bne.n	8008b40 <__ieee754_pow+0x138>
 8008b36:	4610      	mov	r0, r2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f7f7 fd09 	bl	8000550 <__aeabi_dmul>
 8008b3e:	e7e7      	b.n	8008b10 <__ieee754_pow+0x108>
 8008b40:	493e      	ldr	r1, [pc, #248]	; (8008c3c <__ieee754_pow+0x234>)
 8008b42:	428f      	cmp	r7, r1
 8008b44:	d10d      	bne.n	8008b62 <__ieee754_pow+0x15a>
 8008b46:	f1b9 0f00 	cmp.w	r9, #0
 8008b4a:	db0a      	blt.n	8008b62 <__ieee754_pow+0x15a>
 8008b4c:	ec43 2b10 	vmov	d0, r2, r3
 8008b50:	b00d      	add	sp, #52	; 0x34
 8008b52:	ecbd 8b06 	vpop	{d8-d10}
 8008b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5a:	f000 bc77 	b.w	800944c <__ieee754_sqrt>
 8008b5e:	2100      	movs	r1, #0
 8008b60:	9100      	str	r1, [sp, #0]
 8008b62:	ec43 2b10 	vmov	d0, r2, r3
 8008b66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b6a:	f000 fd23 	bl	80095b4 <fabs>
 8008b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b72:	ec51 0b10 	vmov	r0, r1, d0
 8008b76:	f1b8 0f00 	cmp.w	r8, #0
 8008b7a:	d12a      	bne.n	8008bd2 <__ieee754_pow+0x1ca>
 8008b7c:	b12c      	cbz	r4, 8008b8a <__ieee754_pow+0x182>
 8008b7e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008c34 <__ieee754_pow+0x22c>
 8008b82:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008b86:	45e6      	cmp	lr, ip
 8008b88:	d123      	bne.n	8008bd2 <__ieee754_pow+0x1ca>
 8008b8a:	2f00      	cmp	r7, #0
 8008b8c:	da05      	bge.n	8008b9a <__ieee754_pow+0x192>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	2000      	movs	r0, #0
 8008b94:	4927      	ldr	r1, [pc, #156]	; (8008c34 <__ieee754_pow+0x22c>)
 8008b96:	f7f7 fe05 	bl	80007a4 <__aeabi_ddiv>
 8008b9a:	f1b9 0f00 	cmp.w	r9, #0
 8008b9e:	dab7      	bge.n	8008b10 <__ieee754_pow+0x108>
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ba6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008baa:	4323      	orrs	r3, r4
 8008bac:	d108      	bne.n	8008bc0 <__ieee754_pow+0x1b8>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f7f7 fb13 	bl	80001e0 <__aeabi_dsub>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	e78d      	b.n	8008adc <__ieee754_pow+0xd4>
 8008bc0:	9b00      	ldr	r3, [sp, #0]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d1a4      	bne.n	8008b10 <__ieee754_pow+0x108>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	e79e      	b.n	8008b10 <__ieee754_pow+0x108>
 8008bd2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008bd6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008bda:	950a      	str	r5, [sp, #40]	; 0x28
 8008bdc:	9d00      	ldr	r5, [sp, #0]
 8008bde:	46ac      	mov	ip, r5
 8008be0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008be2:	ea5c 0505 	orrs.w	r5, ip, r5
 8008be6:	d0e4      	beq.n	8008bb2 <__ieee754_pow+0x1aa>
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <__ieee754_pow+0x238>)
 8008bea:	429e      	cmp	r6, r3
 8008bec:	f340 80fc 	ble.w	8008de8 <__ieee754_pow+0x3e0>
 8008bf0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008bf4:	429e      	cmp	r6, r3
 8008bf6:	4b10      	ldr	r3, [pc, #64]	; (8008c38 <__ieee754_pow+0x230>)
 8008bf8:	dd07      	ble.n	8008c0a <__ieee754_pow+0x202>
 8008bfa:	429c      	cmp	r4, r3
 8008bfc:	dc0a      	bgt.n	8008c14 <__ieee754_pow+0x20c>
 8008bfe:	2f00      	cmp	r7, #0
 8008c00:	da84      	bge.n	8008b0c <__ieee754_pow+0x104>
 8008c02:	a307      	add	r3, pc, #28	; (adr r3, 8008c20 <__ieee754_pow+0x218>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	e795      	b.n	8008b36 <__ieee754_pow+0x12e>
 8008c0a:	429c      	cmp	r4, r3
 8008c0c:	dbf7      	blt.n	8008bfe <__ieee754_pow+0x1f6>
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <__ieee754_pow+0x22c>)
 8008c10:	429c      	cmp	r4, r3
 8008c12:	dd17      	ble.n	8008c44 <__ieee754_pow+0x23c>
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	dcf4      	bgt.n	8008c02 <__ieee754_pow+0x1fa>
 8008c18:	e778      	b.n	8008b0c <__ieee754_pow+0x104>
 8008c1a:	bf00      	nop
 8008c1c:	f3af 8000 	nop.w
 8008c20:	8800759c 	.word	0x8800759c
 8008c24:	7e37e43c 	.word	0x7e37e43c
 8008c28:	7ff00000 	.word	0x7ff00000
 8008c2c:	08009850 	.word	0x08009850
 8008c30:	433fffff 	.word	0x433fffff
 8008c34:	3ff00000 	.word	0x3ff00000
 8008c38:	3fefffff 	.word	0x3fefffff
 8008c3c:	3fe00000 	.word	0x3fe00000
 8008c40:	41e00000 	.word	0x41e00000
 8008c44:	4b64      	ldr	r3, [pc, #400]	; (8008dd8 <__ieee754_pow+0x3d0>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	f7f7 faca 	bl	80001e0 <__aeabi_dsub>
 8008c4c:	a356      	add	r3, pc, #344	; (adr r3, 8008da8 <__ieee754_pow+0x3a0>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	4604      	mov	r4, r0
 8008c54:	460d      	mov	r5, r1
 8008c56:	f7f7 fc7b 	bl	8000550 <__aeabi_dmul>
 8008c5a:	a355      	add	r3, pc, #340	; (adr r3, 8008db0 <__ieee754_pow+0x3a8>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	4606      	mov	r6, r0
 8008c62:	460f      	mov	r7, r1
 8008c64:	4620      	mov	r0, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	f7f7 fc72 	bl	8000550 <__aeabi_dmul>
 8008c6c:	4b5b      	ldr	r3, [pc, #364]	; (8008ddc <__ieee754_pow+0x3d4>)
 8008c6e:	4682      	mov	sl, r0
 8008c70:	468b      	mov	fp, r1
 8008c72:	2200      	movs	r2, #0
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fc6a 	bl	8000550 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	a14d      	add	r1, pc, #308	; (adr r1, 8008db8 <__ieee754_pow+0x3b0>)
 8008c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c86:	f7f7 faab 	bl	80001e0 <__aeabi_dsub>
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	f7f7 fc5f 	bl	8000550 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	2000      	movs	r0, #0
 8008c98:	4951      	ldr	r1, [pc, #324]	; (8008de0 <__ieee754_pow+0x3d8>)
 8008c9a:	f7f7 faa1 	bl	80001e0 <__aeabi_dsub>
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	4689      	mov	r9, r1
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 fc51 	bl	8000550 <__aeabi_dmul>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	f7f7 fc4b 	bl	8000550 <__aeabi_dmul>
 8008cba:	a341      	add	r3, pc, #260	; (adr r3, 8008dc0 <__ieee754_pow+0x3b8>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 fc46 	bl	8000550 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4650      	mov	r0, sl
 8008cca:	4659      	mov	r1, fp
 8008ccc:	f7f7 fa88 	bl	80001e0 <__aeabi_dsub>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	4689      	mov	r9, r1
 8008cd8:	4630      	mov	r0, r6
 8008cda:	4639      	mov	r1, r7
 8008cdc:	f7f7 fa82 	bl	80001e4 <__adddf3>
 8008ce0:	2400      	movs	r4, #0
 8008ce2:	4632      	mov	r2, r6
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	460d      	mov	r5, r1
 8008cea:	f7f7 fa79 	bl	80001e0 <__aeabi_dsub>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 fa73 	bl	80001e0 <__aeabi_dsub>
 8008cfa:	9b00      	ldr	r3, [sp, #0]
 8008cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	4313      	orrs	r3, r2
 8008d02:	4682      	mov	sl, r0
 8008d04:	468b      	mov	fp, r1
 8008d06:	f040 81f1 	bne.w	80090ec <__ieee754_pow+0x6e4>
 8008d0a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008dc8 <__ieee754_pow+0x3c0>
 8008d0e:	eeb0 8a47 	vmov.f32	s16, s14
 8008d12:	eef0 8a67 	vmov.f32	s17, s15
 8008d16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d24:	f7f7 fa5c 	bl	80001e0 <__aeabi_dsub>
 8008d28:	4622      	mov	r2, r4
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	f7f7 fc10 	bl	8000550 <__aeabi_dmul>
 8008d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	4650      	mov	r0, sl
 8008d3a:	4659      	mov	r1, fp
 8008d3c:	f7f7 fc08 	bl	8000550 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4640      	mov	r0, r8
 8008d46:	4649      	mov	r1, r9
 8008d48:	f7f7 fa4c 	bl	80001e4 <__adddf3>
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	4680      	mov	r8, r0
 8008d52:	4689      	mov	r9, r1
 8008d54:	4620      	mov	r0, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	f7f7 fbfa 	bl	8000550 <__aeabi_dmul>
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	4602      	mov	r2, r0
 8008d64:	4649      	mov	r1, r9
 8008d66:	4640      	mov	r0, r8
 8008d68:	f7f7 fa3c 	bl	80001e4 <__adddf3>
 8008d6c:	4b1d      	ldr	r3, [pc, #116]	; (8008de4 <__ieee754_pow+0x3dc>)
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	ec45 4b19 	vmov	d9, r4, r5
 8008d74:	4606      	mov	r6, r0
 8008d76:	460f      	mov	r7, r1
 8008d78:	468b      	mov	fp, r1
 8008d7a:	f340 82fe 	ble.w	800937a <__ieee754_pow+0x972>
 8008d7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008d82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d86:	4303      	orrs	r3, r0
 8008d88:	f000 81f0 	beq.w	800916c <__ieee754_pow+0x764>
 8008d8c:	a310      	add	r3, pc, #64	; (adr r3, 8008dd0 <__ieee754_pow+0x3c8>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	ec51 0b18 	vmov	r0, r1, d8
 8008d96:	f7f7 fbdb 	bl	8000550 <__aeabi_dmul>
 8008d9a:	a30d      	add	r3, pc, #52	; (adr r3, 8008dd0 <__ieee754_pow+0x3c8>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	e6cb      	b.n	8008b3a <__ieee754_pow+0x132>
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
 8008da8:	60000000 	.word	0x60000000
 8008dac:	3ff71547 	.word	0x3ff71547
 8008db0:	f85ddf44 	.word	0xf85ddf44
 8008db4:	3e54ae0b 	.word	0x3e54ae0b
 8008db8:	55555555 	.word	0x55555555
 8008dbc:	3fd55555 	.word	0x3fd55555
 8008dc0:	652b82fe 	.word	0x652b82fe
 8008dc4:	3ff71547 	.word	0x3ff71547
 8008dc8:	00000000 	.word	0x00000000
 8008dcc:	bff00000 	.word	0xbff00000
 8008dd0:	8800759c 	.word	0x8800759c
 8008dd4:	7e37e43c 	.word	0x7e37e43c
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	3fd00000 	.word	0x3fd00000
 8008de0:	3fe00000 	.word	0x3fe00000
 8008de4:	408fffff 	.word	0x408fffff
 8008de8:	4bd7      	ldr	r3, [pc, #860]	; (8009148 <__ieee754_pow+0x740>)
 8008dea:	ea03 0309 	and.w	r3, r3, r9
 8008dee:	2200      	movs	r2, #0
 8008df0:	b92b      	cbnz	r3, 8008dfe <__ieee754_pow+0x3f6>
 8008df2:	4bd6      	ldr	r3, [pc, #856]	; (800914c <__ieee754_pow+0x744>)
 8008df4:	f7f7 fbac 	bl	8000550 <__aeabi_dmul>
 8008df8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	1523      	asrs	r3, r4, #20
 8008e00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e04:	4413      	add	r3, r2
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	4bd1      	ldr	r3, [pc, #836]	; (8009150 <__ieee754_pow+0x748>)
 8008e0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008e12:	429c      	cmp	r4, r3
 8008e14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e18:	dd08      	ble.n	8008e2c <__ieee754_pow+0x424>
 8008e1a:	4bce      	ldr	r3, [pc, #824]	; (8009154 <__ieee754_pow+0x74c>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	f340 8163 	ble.w	80090e8 <__ieee754_pow+0x6e0>
 8008e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e24:	3301      	adds	r3, #1
 8008e26:	9309      	str	r3, [sp, #36]	; 0x24
 8008e28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008e2c:	2400      	movs	r4, #0
 8008e2e:	00e3      	lsls	r3, r4, #3
 8008e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e32:	4bc9      	ldr	r3, [pc, #804]	; (8009158 <__ieee754_pow+0x750>)
 8008e34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e38:	ed93 7b00 	vldr	d7, [r3]
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	ec53 2b17 	vmov	r2, r3, d7
 8008e42:	eeb0 8a47 	vmov.f32	s16, s14
 8008e46:	eef0 8a67 	vmov.f32	s17, s15
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	f7f7 f9c8 	bl	80001e0 <__aeabi_dsub>
 8008e50:	4652      	mov	r2, sl
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	462b      	mov	r3, r5
 8008e58:	ec51 0b18 	vmov	r0, r1, d8
 8008e5c:	f7f7 f9c2 	bl	80001e4 <__adddf3>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	2000      	movs	r0, #0
 8008e66:	49bd      	ldr	r1, [pc, #756]	; (800915c <__ieee754_pow+0x754>)
 8008e68:	f7f7 fc9c 	bl	80007a4 <__aeabi_ddiv>
 8008e6c:	ec41 0b19 	vmov	d9, r0, r1
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4630      	mov	r0, r6
 8008e76:	4639      	mov	r1, r7
 8008e78:	f7f7 fb6a 	bl	8000550 <__aeabi_dmul>
 8008e7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e90:	46ab      	mov	fp, r5
 8008e92:	106d      	asrs	r5, r5, #1
 8008e94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008e98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008e9c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	f7f7 fb51 	bl	8000550 <__aeabi_dmul>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 f993 	bl	80001e0 <__aeabi_dsub>
 8008eba:	ec53 2b18 	vmov	r2, r3, d8
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	f7f7 f98b 	bl	80001e0 <__aeabi_dsub>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4650      	mov	r0, sl
 8008ed0:	4659      	mov	r1, fp
 8008ed2:	f7f7 f985 	bl	80001e0 <__aeabi_dsub>
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	f7f7 fb39 	bl	8000550 <__aeabi_dmul>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f97b 	bl	80001e0 <__aeabi_dsub>
 8008eea:	ec53 2b19 	vmov	r2, r3, d9
 8008eee:	f7f7 fb2f 	bl	8000550 <__aeabi_dmul>
 8008ef2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ef6:	ec41 0b18 	vmov	d8, r0, r1
 8008efa:	4610      	mov	r0, r2
 8008efc:	4619      	mov	r1, r3
 8008efe:	f7f7 fb27 	bl	8000550 <__aeabi_dmul>
 8008f02:	a37d      	add	r3, pc, #500	; (adr r3, 80090f8 <__ieee754_pow+0x6f0>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	f7f7 fb20 	bl	8000550 <__aeabi_dmul>
 8008f10:	a37b      	add	r3, pc, #492	; (adr r3, 8009100 <__ieee754_pow+0x6f8>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 f965 	bl	80001e4 <__adddf3>
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	f7f7 fb17 	bl	8000550 <__aeabi_dmul>
 8008f22:	a379      	add	r3, pc, #484	; (adr r3, 8009108 <__ieee754_pow+0x700>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 f95c 	bl	80001e4 <__adddf3>
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	462b      	mov	r3, r5
 8008f30:	f7f7 fb0e 	bl	8000550 <__aeabi_dmul>
 8008f34:	a376      	add	r3, pc, #472	; (adr r3, 8009110 <__ieee754_pow+0x708>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 f953 	bl	80001e4 <__adddf3>
 8008f3e:	4622      	mov	r2, r4
 8008f40:	462b      	mov	r3, r5
 8008f42:	f7f7 fb05 	bl	8000550 <__aeabi_dmul>
 8008f46:	a374      	add	r3, pc, #464	; (adr r3, 8009118 <__ieee754_pow+0x710>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f94a 	bl	80001e4 <__adddf3>
 8008f50:	4622      	mov	r2, r4
 8008f52:	462b      	mov	r3, r5
 8008f54:	f7f7 fafc 	bl	8000550 <__aeabi_dmul>
 8008f58:	a371      	add	r3, pc, #452	; (adr r3, 8009120 <__ieee754_pow+0x718>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 f941 	bl	80001e4 <__adddf3>
 8008f62:	4622      	mov	r2, r4
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	462b      	mov	r3, r5
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7f7 faef 	bl	8000550 <__aeabi_dmul>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fae9 	bl	8000550 <__aeabi_dmul>
 8008f7e:	4642      	mov	r2, r8
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	464b      	mov	r3, r9
 8008f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f8a:	f7f7 f92b 	bl	80001e4 <__adddf3>
 8008f8e:	ec53 2b18 	vmov	r2, r3, d8
 8008f92:	f7f7 fadd 	bl	8000550 <__aeabi_dmul>
 8008f96:	4622      	mov	r2, r4
 8008f98:	462b      	mov	r3, r5
 8008f9a:	f7f7 f923 	bl	80001e4 <__adddf3>
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	468b      	mov	fp, r1
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 fad1 	bl	8000550 <__aeabi_dmul>
 8008fae:	4b6c      	ldr	r3, [pc, #432]	; (8009160 <__ieee754_pow+0x758>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	f7f7 f915 	bl	80001e4 <__adddf3>
 8008fba:	4652      	mov	r2, sl
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	f7f7 f911 	bl	80001e4 <__adddf3>
 8008fc2:	9c04      	ldr	r4, [sp, #16]
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4640      	mov	r0, r8
 8008fcc:	4649      	mov	r1, r9
 8008fce:	f7f7 fabf 	bl	8000550 <__aeabi_dmul>
 8008fd2:	4b63      	ldr	r3, [pc, #396]	; (8009160 <__ieee754_pow+0x758>)
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	4689      	mov	r9, r1
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f7f7 f8ff 	bl	80001e0 <__aeabi_dsub>
 8008fe2:	4632      	mov	r2, r6
 8008fe4:	463b      	mov	r3, r7
 8008fe6:	f7f7 f8fb 	bl	80001e0 <__aeabi_dsub>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4650      	mov	r0, sl
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	f7f7 f8f5 	bl	80001e0 <__aeabi_dsub>
 8008ff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ffa:	f7f7 faa9 	bl	8000550 <__aeabi_dmul>
 8008ffe:	4622      	mov	r2, r4
 8009000:	4606      	mov	r6, r0
 8009002:	460f      	mov	r7, r1
 8009004:	462b      	mov	r3, r5
 8009006:	ec51 0b18 	vmov	r0, r1, d8
 800900a:	f7f7 faa1 	bl	8000550 <__aeabi_dmul>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4630      	mov	r0, r6
 8009014:	4639      	mov	r1, r7
 8009016:	f7f7 f8e5 	bl	80001e4 <__adddf3>
 800901a:	4606      	mov	r6, r0
 800901c:	460f      	mov	r7, r1
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	f7f7 f8dd 	bl	80001e4 <__adddf3>
 800902a:	9c04      	ldr	r4, [sp, #16]
 800902c:	a33e      	add	r3, pc, #248	; (adr r3, 8009128 <__ieee754_pow+0x720>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	4620      	mov	r0, r4
 8009034:	460d      	mov	r5, r1
 8009036:	f7f7 fa8b 	bl	8000550 <__aeabi_dmul>
 800903a:	4642      	mov	r2, r8
 800903c:	ec41 0b18 	vmov	d8, r0, r1
 8009040:	464b      	mov	r3, r9
 8009042:	4620      	mov	r0, r4
 8009044:	4629      	mov	r1, r5
 8009046:	f7f7 f8cb 	bl	80001e0 <__aeabi_dsub>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 f8c5 	bl	80001e0 <__aeabi_dsub>
 8009056:	a336      	add	r3, pc, #216	; (adr r3, 8009130 <__ieee754_pow+0x728>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 fa78 	bl	8000550 <__aeabi_dmul>
 8009060:	a335      	add	r3, pc, #212	; (adr r3, 8009138 <__ieee754_pow+0x730>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	4620      	mov	r0, r4
 800906c:	4629      	mov	r1, r5
 800906e:	f7f7 fa6f 	bl	8000550 <__aeabi_dmul>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4630      	mov	r0, r6
 8009078:	4639      	mov	r1, r7
 800907a:	f7f7 f8b3 	bl	80001e4 <__adddf3>
 800907e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009080:	4b38      	ldr	r3, [pc, #224]	; (8009164 <__ieee754_pow+0x75c>)
 8009082:	4413      	add	r3, r2
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 f8ac 	bl	80001e4 <__adddf3>
 800908c:	4682      	mov	sl, r0
 800908e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009090:	468b      	mov	fp, r1
 8009092:	f7f7 f9f3 	bl	800047c <__aeabi_i2d>
 8009096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009098:	4b33      	ldr	r3, [pc, #204]	; (8009168 <__ieee754_pow+0x760>)
 800909a:	4413      	add	r3, r2
 800909c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090a0:	4606      	mov	r6, r0
 80090a2:	460f      	mov	r7, r1
 80090a4:	4652      	mov	r2, sl
 80090a6:	465b      	mov	r3, fp
 80090a8:	ec51 0b18 	vmov	r0, r1, d8
 80090ac:	f7f7 f89a 	bl	80001e4 <__adddf3>
 80090b0:	4642      	mov	r2, r8
 80090b2:	464b      	mov	r3, r9
 80090b4:	f7f7 f896 	bl	80001e4 <__adddf3>
 80090b8:	4632      	mov	r2, r6
 80090ba:	463b      	mov	r3, r7
 80090bc:	f7f7 f892 	bl	80001e4 <__adddf3>
 80090c0:	9c04      	ldr	r4, [sp, #16]
 80090c2:	4632      	mov	r2, r6
 80090c4:	463b      	mov	r3, r7
 80090c6:	4620      	mov	r0, r4
 80090c8:	460d      	mov	r5, r1
 80090ca:	f7f7 f889 	bl	80001e0 <__aeabi_dsub>
 80090ce:	4642      	mov	r2, r8
 80090d0:	464b      	mov	r3, r9
 80090d2:	f7f7 f885 	bl	80001e0 <__aeabi_dsub>
 80090d6:	ec53 2b18 	vmov	r2, r3, d8
 80090da:	f7f7 f881 	bl	80001e0 <__aeabi_dsub>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4650      	mov	r0, sl
 80090e4:	4659      	mov	r1, fp
 80090e6:	e606      	b.n	8008cf6 <__ieee754_pow+0x2ee>
 80090e8:	2401      	movs	r4, #1
 80090ea:	e6a0      	b.n	8008e2e <__ieee754_pow+0x426>
 80090ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009140 <__ieee754_pow+0x738>
 80090f0:	e60d      	b.n	8008d0e <__ieee754_pow+0x306>
 80090f2:	bf00      	nop
 80090f4:	f3af 8000 	nop.w
 80090f8:	4a454eef 	.word	0x4a454eef
 80090fc:	3fca7e28 	.word	0x3fca7e28
 8009100:	93c9db65 	.word	0x93c9db65
 8009104:	3fcd864a 	.word	0x3fcd864a
 8009108:	a91d4101 	.word	0xa91d4101
 800910c:	3fd17460 	.word	0x3fd17460
 8009110:	518f264d 	.word	0x518f264d
 8009114:	3fd55555 	.word	0x3fd55555
 8009118:	db6fabff 	.word	0xdb6fabff
 800911c:	3fdb6db6 	.word	0x3fdb6db6
 8009120:	33333303 	.word	0x33333303
 8009124:	3fe33333 	.word	0x3fe33333
 8009128:	e0000000 	.word	0xe0000000
 800912c:	3feec709 	.word	0x3feec709
 8009130:	dc3a03fd 	.word	0xdc3a03fd
 8009134:	3feec709 	.word	0x3feec709
 8009138:	145b01f5 	.word	0x145b01f5
 800913c:	be3e2fe0 	.word	0xbe3e2fe0
 8009140:	00000000 	.word	0x00000000
 8009144:	3ff00000 	.word	0x3ff00000
 8009148:	7ff00000 	.word	0x7ff00000
 800914c:	43400000 	.word	0x43400000
 8009150:	0003988e 	.word	0x0003988e
 8009154:	000bb679 	.word	0x000bb679
 8009158:	08009858 	.word	0x08009858
 800915c:	3ff00000 	.word	0x3ff00000
 8009160:	40080000 	.word	0x40080000
 8009164:	08009878 	.word	0x08009878
 8009168:	08009868 	.word	0x08009868
 800916c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009444 <__ieee754_pow+0xa3c>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 f835 	bl	80001e4 <__adddf3>
 800917a:	4622      	mov	r2, r4
 800917c:	ec41 0b1a 	vmov	d10, r0, r1
 8009180:	462b      	mov	r3, r5
 8009182:	4630      	mov	r0, r6
 8009184:	4639      	mov	r1, r7
 8009186:	f7f7 f82b 	bl	80001e0 <__aeabi_dsub>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	ec51 0b1a 	vmov	r0, r1, d10
 8009192:	f7f7 fc6d 	bl	8000a70 <__aeabi_dcmpgt>
 8009196:	2800      	cmp	r0, #0
 8009198:	f47f adf8 	bne.w	8008d8c <__ieee754_pow+0x384>
 800919c:	4aa4      	ldr	r2, [pc, #656]	; (8009430 <__ieee754_pow+0xa28>)
 800919e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091a2:	4293      	cmp	r3, r2
 80091a4:	f340 810b 	ble.w	80093be <__ieee754_pow+0x9b6>
 80091a8:	151b      	asrs	r3, r3, #20
 80091aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80091ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80091b2:	fa4a f303 	asr.w	r3, sl, r3
 80091b6:	445b      	add	r3, fp
 80091b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80091bc:	4e9d      	ldr	r6, [pc, #628]	; (8009434 <__ieee754_pow+0xa2c>)
 80091be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80091c2:	4116      	asrs	r6, r2
 80091c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80091c8:	2000      	movs	r0, #0
 80091ca:	ea23 0106 	bic.w	r1, r3, r6
 80091ce:	f1c2 0214 	rsb	r2, r2, #20
 80091d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80091d6:	fa4a fa02 	asr.w	sl, sl, r2
 80091da:	f1bb 0f00 	cmp.w	fp, #0
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	bfb8      	it	lt
 80091e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80091ec:	f7f6 fff8 	bl	80001e0 <__aeabi_dsub>
 80091f0:	ec41 0b19 	vmov	d9, r0, r1
 80091f4:	4642      	mov	r2, r8
 80091f6:	464b      	mov	r3, r9
 80091f8:	ec51 0b19 	vmov	r0, r1, d9
 80091fc:	f7f6 fff2 	bl	80001e4 <__adddf3>
 8009200:	2400      	movs	r4, #0
 8009202:	a379      	add	r3, pc, #484	; (adr r3, 80093e8 <__ieee754_pow+0x9e0>)
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	4620      	mov	r0, r4
 800920a:	460d      	mov	r5, r1
 800920c:	f7f7 f9a0 	bl	8000550 <__aeabi_dmul>
 8009210:	ec53 2b19 	vmov	r2, r3, d9
 8009214:	4606      	mov	r6, r0
 8009216:	460f      	mov	r7, r1
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	f7f6 ffe0 	bl	80001e0 <__aeabi_dsub>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4640      	mov	r0, r8
 8009226:	4649      	mov	r1, r9
 8009228:	f7f6 ffda 	bl	80001e0 <__aeabi_dsub>
 800922c:	a370      	add	r3, pc, #448	; (adr r3, 80093f0 <__ieee754_pow+0x9e8>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f7f7 f98d 	bl	8000550 <__aeabi_dmul>
 8009236:	a370      	add	r3, pc, #448	; (adr r3, 80093f8 <__ieee754_pow+0x9f0>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	4680      	mov	r8, r0
 800923e:	4689      	mov	r9, r1
 8009240:	4620      	mov	r0, r4
 8009242:	4629      	mov	r1, r5
 8009244:	f7f7 f984 	bl	8000550 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4640      	mov	r0, r8
 800924e:	4649      	mov	r1, r9
 8009250:	f7f6 ffc8 	bl	80001e4 <__adddf3>
 8009254:	4604      	mov	r4, r0
 8009256:	460d      	mov	r5, r1
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f7f6 ffc0 	bl	80001e4 <__adddf3>
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	4680      	mov	r8, r0
 800926a:	4689      	mov	r9, r1
 800926c:	f7f6 ffb8 	bl	80001e0 <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4620      	mov	r0, r4
 8009276:	4629      	mov	r1, r5
 8009278:	f7f6 ffb2 	bl	80001e0 <__aeabi_dsub>
 800927c:	4642      	mov	r2, r8
 800927e:	4606      	mov	r6, r0
 8009280:	460f      	mov	r7, r1
 8009282:	464b      	mov	r3, r9
 8009284:	4640      	mov	r0, r8
 8009286:	4649      	mov	r1, r9
 8009288:	f7f7 f962 	bl	8000550 <__aeabi_dmul>
 800928c:	a35c      	add	r3, pc, #368	; (adr r3, 8009400 <__ieee754_pow+0x9f8>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	4604      	mov	r4, r0
 8009294:	460d      	mov	r5, r1
 8009296:	f7f7 f95b 	bl	8000550 <__aeabi_dmul>
 800929a:	a35b      	add	r3, pc, #364	; (adr r3, 8009408 <__ieee754_pow+0xa00>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	f7f6 ff9e 	bl	80001e0 <__aeabi_dsub>
 80092a4:	4622      	mov	r2, r4
 80092a6:	462b      	mov	r3, r5
 80092a8:	f7f7 f952 	bl	8000550 <__aeabi_dmul>
 80092ac:	a358      	add	r3, pc, #352	; (adr r3, 8009410 <__ieee754_pow+0xa08>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f6 ff97 	bl	80001e4 <__adddf3>
 80092b6:	4622      	mov	r2, r4
 80092b8:	462b      	mov	r3, r5
 80092ba:	f7f7 f949 	bl	8000550 <__aeabi_dmul>
 80092be:	a356      	add	r3, pc, #344	; (adr r3, 8009418 <__ieee754_pow+0xa10>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f7f6 ff8c 	bl	80001e0 <__aeabi_dsub>
 80092c8:	4622      	mov	r2, r4
 80092ca:	462b      	mov	r3, r5
 80092cc:	f7f7 f940 	bl	8000550 <__aeabi_dmul>
 80092d0:	a353      	add	r3, pc, #332	; (adr r3, 8009420 <__ieee754_pow+0xa18>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f6 ff85 	bl	80001e4 <__adddf3>
 80092da:	4622      	mov	r2, r4
 80092dc:	462b      	mov	r3, r5
 80092de:	f7f7 f937 	bl	8000550 <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4640      	mov	r0, r8
 80092e8:	4649      	mov	r1, r9
 80092ea:	f7f6 ff79 	bl	80001e0 <__aeabi_dsub>
 80092ee:	4604      	mov	r4, r0
 80092f0:	460d      	mov	r5, r1
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4640      	mov	r0, r8
 80092f8:	4649      	mov	r1, r9
 80092fa:	f7f7 f929 	bl	8000550 <__aeabi_dmul>
 80092fe:	2200      	movs	r2, #0
 8009300:	ec41 0b19 	vmov	d9, r0, r1
 8009304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009308:	4620      	mov	r0, r4
 800930a:	4629      	mov	r1, r5
 800930c:	f7f6 ff68 	bl	80001e0 <__aeabi_dsub>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	ec51 0b19 	vmov	r0, r1, d9
 8009318:	f7f7 fa44 	bl	80007a4 <__aeabi_ddiv>
 800931c:	4632      	mov	r2, r6
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	463b      	mov	r3, r7
 8009324:	4640      	mov	r0, r8
 8009326:	4649      	mov	r1, r9
 8009328:	f7f7 f912 	bl	8000550 <__aeabi_dmul>
 800932c:	4632      	mov	r2, r6
 800932e:	463b      	mov	r3, r7
 8009330:	f7f6 ff58 	bl	80001e4 <__adddf3>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4620      	mov	r0, r4
 800933a:	4629      	mov	r1, r5
 800933c:	f7f6 ff50 	bl	80001e0 <__aeabi_dsub>
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	f7f6 ff4c 	bl	80001e0 <__aeabi_dsub>
 8009348:	460b      	mov	r3, r1
 800934a:	4602      	mov	r2, r0
 800934c:	493a      	ldr	r1, [pc, #232]	; (8009438 <__ieee754_pow+0xa30>)
 800934e:	2000      	movs	r0, #0
 8009350:	f7f6 ff46 	bl	80001e0 <__aeabi_dsub>
 8009354:	e9cd 0100 	strd	r0, r1, [sp]
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800935e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009362:	da2f      	bge.n	80093c4 <__ieee754_pow+0x9bc>
 8009364:	4650      	mov	r0, sl
 8009366:	ed9d 0b00 	vldr	d0, [sp]
 800936a:	f000 f9cd 	bl	8009708 <scalbn>
 800936e:	ec51 0b10 	vmov	r0, r1, d0
 8009372:	ec53 2b18 	vmov	r2, r3, d8
 8009376:	f7ff bbe0 	b.w	8008b3a <__ieee754_pow+0x132>
 800937a:	4b30      	ldr	r3, [pc, #192]	; (800943c <__ieee754_pow+0xa34>)
 800937c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009380:	429e      	cmp	r6, r3
 8009382:	f77f af0b 	ble.w	800919c <__ieee754_pow+0x794>
 8009386:	4b2e      	ldr	r3, [pc, #184]	; (8009440 <__ieee754_pow+0xa38>)
 8009388:	440b      	add	r3, r1
 800938a:	4303      	orrs	r3, r0
 800938c:	d00b      	beq.n	80093a6 <__ieee754_pow+0x99e>
 800938e:	a326      	add	r3, pc, #152	; (adr r3, 8009428 <__ieee754_pow+0xa20>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	ec51 0b18 	vmov	r0, r1, d8
 8009398:	f7f7 f8da 	bl	8000550 <__aeabi_dmul>
 800939c:	a322      	add	r3, pc, #136	; (adr r3, 8009428 <__ieee754_pow+0xa20>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7ff bbca 	b.w	8008b3a <__ieee754_pow+0x132>
 80093a6:	4622      	mov	r2, r4
 80093a8:	462b      	mov	r3, r5
 80093aa:	f7f6 ff19 	bl	80001e0 <__aeabi_dsub>
 80093ae:	4642      	mov	r2, r8
 80093b0:	464b      	mov	r3, r9
 80093b2:	f7f7 fb53 	bl	8000a5c <__aeabi_dcmpge>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f43f aef0 	beq.w	800919c <__ieee754_pow+0x794>
 80093bc:	e7e7      	b.n	800938e <__ieee754_pow+0x986>
 80093be:	f04f 0a00 	mov.w	sl, #0
 80093c2:	e717      	b.n	80091f4 <__ieee754_pow+0x7ec>
 80093c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093c8:	4619      	mov	r1, r3
 80093ca:	e7d2      	b.n	8009372 <__ieee754_pow+0x96a>
 80093cc:	491a      	ldr	r1, [pc, #104]	; (8009438 <__ieee754_pow+0xa30>)
 80093ce:	2000      	movs	r0, #0
 80093d0:	f7ff bb9e 	b.w	8008b10 <__ieee754_pow+0x108>
 80093d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d8:	f7ff bb9a 	b.w	8008b10 <__ieee754_pow+0x108>
 80093dc:	9000      	str	r0, [sp, #0]
 80093de:	f7ff bb76 	b.w	8008ace <__ieee754_pow+0xc6>
 80093e2:	2100      	movs	r1, #0
 80093e4:	f7ff bb60 	b.w	8008aa8 <__ieee754_pow+0xa0>
 80093e8:	00000000 	.word	0x00000000
 80093ec:	3fe62e43 	.word	0x3fe62e43
 80093f0:	fefa39ef 	.word	0xfefa39ef
 80093f4:	3fe62e42 	.word	0x3fe62e42
 80093f8:	0ca86c39 	.word	0x0ca86c39
 80093fc:	be205c61 	.word	0xbe205c61
 8009400:	72bea4d0 	.word	0x72bea4d0
 8009404:	3e663769 	.word	0x3e663769
 8009408:	c5d26bf1 	.word	0xc5d26bf1
 800940c:	3ebbbd41 	.word	0x3ebbbd41
 8009410:	af25de2c 	.word	0xaf25de2c
 8009414:	3f11566a 	.word	0x3f11566a
 8009418:	16bebd93 	.word	0x16bebd93
 800941c:	3f66c16c 	.word	0x3f66c16c
 8009420:	5555553e 	.word	0x5555553e
 8009424:	3fc55555 	.word	0x3fc55555
 8009428:	c2f8f359 	.word	0xc2f8f359
 800942c:	01a56e1f 	.word	0x01a56e1f
 8009430:	3fe00000 	.word	0x3fe00000
 8009434:	000fffff 	.word	0x000fffff
 8009438:	3ff00000 	.word	0x3ff00000
 800943c:	4090cbff 	.word	0x4090cbff
 8009440:	3f6f3400 	.word	0x3f6f3400
 8009444:	652b82fe 	.word	0x652b82fe
 8009448:	3c971547 	.word	0x3c971547

0800944c <__ieee754_sqrt>:
 800944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009450:	ec55 4b10 	vmov	r4, r5, d0
 8009454:	4e56      	ldr	r6, [pc, #344]	; (80095b0 <__ieee754_sqrt+0x164>)
 8009456:	43ae      	bics	r6, r5
 8009458:	ee10 0a10 	vmov	r0, s0
 800945c:	ee10 3a10 	vmov	r3, s0
 8009460:	4629      	mov	r1, r5
 8009462:	462a      	mov	r2, r5
 8009464:	d110      	bne.n	8009488 <__ieee754_sqrt+0x3c>
 8009466:	ee10 2a10 	vmov	r2, s0
 800946a:	462b      	mov	r3, r5
 800946c:	f7f7 f870 	bl	8000550 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f6 feb4 	bl	80001e4 <__adddf3>
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	ec45 4b10 	vmov	d0, r4, r5
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	2d00      	cmp	r5, #0
 800948a:	dc10      	bgt.n	80094ae <__ieee754_sqrt+0x62>
 800948c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009490:	4330      	orrs	r0, r6
 8009492:	d0f5      	beq.n	8009480 <__ieee754_sqrt+0x34>
 8009494:	b15d      	cbz	r5, 80094ae <__ieee754_sqrt+0x62>
 8009496:	ee10 2a10 	vmov	r2, s0
 800949a:	462b      	mov	r3, r5
 800949c:	ee10 0a10 	vmov	r0, s0
 80094a0:	f7f6 fe9e 	bl	80001e0 <__aeabi_dsub>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	f7f7 f97c 	bl	80007a4 <__aeabi_ddiv>
 80094ac:	e7e6      	b.n	800947c <__ieee754_sqrt+0x30>
 80094ae:	1509      	asrs	r1, r1, #20
 80094b0:	d076      	beq.n	80095a0 <__ieee754_sqrt+0x154>
 80094b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80094b6:	07ce      	lsls	r6, r1, #31
 80094b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80094bc:	bf5e      	ittt	pl
 80094be:	0fda      	lsrpl	r2, r3, #31
 80094c0:	005b      	lslpl	r3, r3, #1
 80094c2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80094c6:	0fda      	lsrs	r2, r3, #31
 80094c8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80094cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80094d0:	2000      	movs	r0, #0
 80094d2:	106d      	asrs	r5, r5, #1
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	f04f 0e16 	mov.w	lr, #22
 80094da:	4684      	mov	ip, r0
 80094dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094e0:	eb0c 0401 	add.w	r4, ip, r1
 80094e4:	4294      	cmp	r4, r2
 80094e6:	bfde      	ittt	le
 80094e8:	1b12      	suble	r2, r2, r4
 80094ea:	eb04 0c01 	addle.w	ip, r4, r1
 80094ee:	1840      	addle	r0, r0, r1
 80094f0:	0052      	lsls	r2, r2, #1
 80094f2:	f1be 0e01 	subs.w	lr, lr, #1
 80094f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80094fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80094fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009502:	d1ed      	bne.n	80094e0 <__ieee754_sqrt+0x94>
 8009504:	4671      	mov	r1, lr
 8009506:	2720      	movs	r7, #32
 8009508:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800950c:	4562      	cmp	r2, ip
 800950e:	eb04 060e 	add.w	r6, r4, lr
 8009512:	dc02      	bgt.n	800951a <__ieee754_sqrt+0xce>
 8009514:	d113      	bne.n	800953e <__ieee754_sqrt+0xf2>
 8009516:	429e      	cmp	r6, r3
 8009518:	d811      	bhi.n	800953e <__ieee754_sqrt+0xf2>
 800951a:	2e00      	cmp	r6, #0
 800951c:	eb06 0e04 	add.w	lr, r6, r4
 8009520:	da43      	bge.n	80095aa <__ieee754_sqrt+0x15e>
 8009522:	f1be 0f00 	cmp.w	lr, #0
 8009526:	db40      	blt.n	80095aa <__ieee754_sqrt+0x15e>
 8009528:	f10c 0801 	add.w	r8, ip, #1
 800952c:	eba2 020c 	sub.w	r2, r2, ip
 8009530:	429e      	cmp	r6, r3
 8009532:	bf88      	it	hi
 8009534:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009538:	1b9b      	subs	r3, r3, r6
 800953a:	4421      	add	r1, r4
 800953c:	46c4      	mov	ip, r8
 800953e:	0052      	lsls	r2, r2, #1
 8009540:	3f01      	subs	r7, #1
 8009542:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009546:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800954a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800954e:	d1dd      	bne.n	800950c <__ieee754_sqrt+0xc0>
 8009550:	4313      	orrs	r3, r2
 8009552:	d006      	beq.n	8009562 <__ieee754_sqrt+0x116>
 8009554:	1c4c      	adds	r4, r1, #1
 8009556:	bf13      	iteet	ne
 8009558:	3101      	addne	r1, #1
 800955a:	3001      	addeq	r0, #1
 800955c:	4639      	moveq	r1, r7
 800955e:	f021 0101 	bicne.w	r1, r1, #1
 8009562:	1043      	asrs	r3, r0, #1
 8009564:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009568:	0849      	lsrs	r1, r1, #1
 800956a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800956e:	07c2      	lsls	r2, r0, #31
 8009570:	bf48      	it	mi
 8009572:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009576:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800957a:	460c      	mov	r4, r1
 800957c:	463d      	mov	r5, r7
 800957e:	e77f      	b.n	8009480 <__ieee754_sqrt+0x34>
 8009580:	0ada      	lsrs	r2, r3, #11
 8009582:	3815      	subs	r0, #21
 8009584:	055b      	lsls	r3, r3, #21
 8009586:	2a00      	cmp	r2, #0
 8009588:	d0fa      	beq.n	8009580 <__ieee754_sqrt+0x134>
 800958a:	02d7      	lsls	r7, r2, #11
 800958c:	d50a      	bpl.n	80095a4 <__ieee754_sqrt+0x158>
 800958e:	f1c1 0420 	rsb	r4, r1, #32
 8009592:	fa23 f404 	lsr.w	r4, r3, r4
 8009596:	1e4d      	subs	r5, r1, #1
 8009598:	408b      	lsls	r3, r1
 800959a:	4322      	orrs	r2, r4
 800959c:	1b41      	subs	r1, r0, r5
 800959e:	e788      	b.n	80094b2 <__ieee754_sqrt+0x66>
 80095a0:	4608      	mov	r0, r1
 80095a2:	e7f0      	b.n	8009586 <__ieee754_sqrt+0x13a>
 80095a4:	0052      	lsls	r2, r2, #1
 80095a6:	3101      	adds	r1, #1
 80095a8:	e7ef      	b.n	800958a <__ieee754_sqrt+0x13e>
 80095aa:	46e0      	mov	r8, ip
 80095ac:	e7be      	b.n	800952c <__ieee754_sqrt+0xe0>
 80095ae:	bf00      	nop
 80095b0:	7ff00000 	.word	0x7ff00000

080095b4 <fabs>:
 80095b4:	ec51 0b10 	vmov	r0, r1, d0
 80095b8:	ee10 2a10 	vmov	r2, s0
 80095bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095c0:	ec43 2b10 	vmov	d0, r2, r3
 80095c4:	4770      	bx	lr

080095c6 <finite>:
 80095c6:	b082      	sub	sp, #8
 80095c8:	ed8d 0b00 	vstr	d0, [sp]
 80095cc:	9801      	ldr	r0, [sp, #4]
 80095ce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80095d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80095d6:	0fc0      	lsrs	r0, r0, #31
 80095d8:	b002      	add	sp, #8
 80095da:	4770      	bx	lr
 80095dc:	0000      	movs	r0, r0
	...

080095e0 <nan>:
 80095e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80095e8 <nan+0x8>
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	00000000 	.word	0x00000000
 80095ec:	7ff80000 	.word	0x7ff80000

080095f0 <rint>:
 80095f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095f2:	ec51 0b10 	vmov	r0, r1, d0
 80095f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80095fe:	2e13      	cmp	r6, #19
 8009600:	ee10 4a10 	vmov	r4, s0
 8009604:	460b      	mov	r3, r1
 8009606:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800960a:	dc58      	bgt.n	80096be <rint+0xce>
 800960c:	2e00      	cmp	r6, #0
 800960e:	da2b      	bge.n	8009668 <rint+0x78>
 8009610:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009614:	4302      	orrs	r2, r0
 8009616:	d023      	beq.n	8009660 <rint+0x70>
 8009618:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800961c:	4302      	orrs	r2, r0
 800961e:	4254      	negs	r4, r2
 8009620:	4314      	orrs	r4, r2
 8009622:	0c4b      	lsrs	r3, r1, #17
 8009624:	0b24      	lsrs	r4, r4, #12
 8009626:	045b      	lsls	r3, r3, #17
 8009628:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800962c:	ea44 0103 	orr.w	r1, r4, r3
 8009630:	4b32      	ldr	r3, [pc, #200]	; (80096fc <rint+0x10c>)
 8009632:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009636:	e9d3 6700 	ldrd	r6, r7, [r3]
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	f7f6 fdcf 	bl	80001e4 <__adddf3>
 8009646:	e9cd 0100 	strd	r0, r1, [sp]
 800964a:	463b      	mov	r3, r7
 800964c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009650:	4632      	mov	r2, r6
 8009652:	f7f6 fdc5 	bl	80001e0 <__aeabi_dsub>
 8009656:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800965a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800965e:	4639      	mov	r1, r7
 8009660:	ec41 0b10 	vmov	d0, r0, r1
 8009664:	b003      	add	sp, #12
 8009666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009668:	4a25      	ldr	r2, [pc, #148]	; (8009700 <rint+0x110>)
 800966a:	4132      	asrs	r2, r6
 800966c:	ea01 0702 	and.w	r7, r1, r2
 8009670:	4307      	orrs	r7, r0
 8009672:	d0f5      	beq.n	8009660 <rint+0x70>
 8009674:	0851      	lsrs	r1, r2, #1
 8009676:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800967a:	4314      	orrs	r4, r2
 800967c:	d00c      	beq.n	8009698 <rint+0xa8>
 800967e:	ea23 0201 	bic.w	r2, r3, r1
 8009682:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009686:	2e13      	cmp	r6, #19
 8009688:	fa43 f606 	asr.w	r6, r3, r6
 800968c:	bf0c      	ite	eq
 800968e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009692:	2400      	movne	r4, #0
 8009694:	ea42 0306 	orr.w	r3, r2, r6
 8009698:	4918      	ldr	r1, [pc, #96]	; (80096fc <rint+0x10c>)
 800969a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800969e:	4622      	mov	r2, r4
 80096a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096a4:	4620      	mov	r0, r4
 80096a6:	4629      	mov	r1, r5
 80096a8:	f7f6 fd9c 	bl	80001e4 <__adddf3>
 80096ac:	e9cd 0100 	strd	r0, r1, [sp]
 80096b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096b4:	4622      	mov	r2, r4
 80096b6:	462b      	mov	r3, r5
 80096b8:	f7f6 fd92 	bl	80001e0 <__aeabi_dsub>
 80096bc:	e7d0      	b.n	8009660 <rint+0x70>
 80096be:	2e33      	cmp	r6, #51	; 0x33
 80096c0:	dd07      	ble.n	80096d2 <rint+0xe2>
 80096c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80096c6:	d1cb      	bne.n	8009660 <rint+0x70>
 80096c8:	ee10 2a10 	vmov	r2, s0
 80096cc:	f7f6 fd8a 	bl	80001e4 <__adddf3>
 80096d0:	e7c6      	b.n	8009660 <rint+0x70>
 80096d2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80096d6:	f04f 36ff 	mov.w	r6, #4294967295
 80096da:	40d6      	lsrs	r6, r2
 80096dc:	4230      	tst	r0, r6
 80096de:	d0bf      	beq.n	8009660 <rint+0x70>
 80096e0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80096e4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80096e8:	bf1f      	itttt	ne
 80096ea:	ea24 0101 	bicne.w	r1, r4, r1
 80096ee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80096f2:	fa44 f202 	asrne.w	r2, r4, r2
 80096f6:	ea41 0402 	orrne.w	r4, r1, r2
 80096fa:	e7cd      	b.n	8009698 <rint+0xa8>
 80096fc:	08009888 	.word	0x08009888
 8009700:	000fffff 	.word	0x000fffff
 8009704:	00000000 	.word	0x00000000

08009708 <scalbn>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	ec55 4b10 	vmov	r4, r5, d0
 800970e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009712:	4606      	mov	r6, r0
 8009714:	462b      	mov	r3, r5
 8009716:	b99a      	cbnz	r2, 8009740 <scalbn+0x38>
 8009718:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800971c:	4323      	orrs	r3, r4
 800971e:	d036      	beq.n	800978e <scalbn+0x86>
 8009720:	4b39      	ldr	r3, [pc, #228]	; (8009808 <scalbn+0x100>)
 8009722:	4629      	mov	r1, r5
 8009724:	ee10 0a10 	vmov	r0, s0
 8009728:	2200      	movs	r2, #0
 800972a:	f7f6 ff11 	bl	8000550 <__aeabi_dmul>
 800972e:	4b37      	ldr	r3, [pc, #220]	; (800980c <scalbn+0x104>)
 8009730:	429e      	cmp	r6, r3
 8009732:	4604      	mov	r4, r0
 8009734:	460d      	mov	r5, r1
 8009736:	da10      	bge.n	800975a <scalbn+0x52>
 8009738:	a32b      	add	r3, pc, #172	; (adr r3, 80097e8 <scalbn+0xe0>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	e03a      	b.n	80097b6 <scalbn+0xae>
 8009740:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009744:	428a      	cmp	r2, r1
 8009746:	d10c      	bne.n	8009762 <scalbn+0x5a>
 8009748:	ee10 2a10 	vmov	r2, s0
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 fd48 	bl	80001e4 <__adddf3>
 8009754:	4604      	mov	r4, r0
 8009756:	460d      	mov	r5, r1
 8009758:	e019      	b.n	800978e <scalbn+0x86>
 800975a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800975e:	460b      	mov	r3, r1
 8009760:	3a36      	subs	r2, #54	; 0x36
 8009762:	4432      	add	r2, r6
 8009764:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009768:	428a      	cmp	r2, r1
 800976a:	dd08      	ble.n	800977e <scalbn+0x76>
 800976c:	2d00      	cmp	r5, #0
 800976e:	a120      	add	r1, pc, #128	; (adr r1, 80097f0 <scalbn+0xe8>)
 8009770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009774:	da1c      	bge.n	80097b0 <scalbn+0xa8>
 8009776:	a120      	add	r1, pc, #128	; (adr r1, 80097f8 <scalbn+0xf0>)
 8009778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800977c:	e018      	b.n	80097b0 <scalbn+0xa8>
 800977e:	2a00      	cmp	r2, #0
 8009780:	dd08      	ble.n	8009794 <scalbn+0x8c>
 8009782:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009786:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800978a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800978e:	ec45 4b10 	vmov	d0, r4, r5
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009798:	da19      	bge.n	80097ce <scalbn+0xc6>
 800979a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800979e:	429e      	cmp	r6, r3
 80097a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80097a4:	dd0a      	ble.n	80097bc <scalbn+0xb4>
 80097a6:	a112      	add	r1, pc, #72	; (adr r1, 80097f0 <scalbn+0xe8>)
 80097a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e2      	bne.n	8009776 <scalbn+0x6e>
 80097b0:	a30f      	add	r3, pc, #60	; (adr r3, 80097f0 <scalbn+0xe8>)
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f7f6 fecb 	bl	8000550 <__aeabi_dmul>
 80097ba:	e7cb      	b.n	8009754 <scalbn+0x4c>
 80097bc:	a10a      	add	r1, pc, #40	; (adr r1, 80097e8 <scalbn+0xe0>)
 80097be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0b8      	beq.n	8009738 <scalbn+0x30>
 80097c6:	a10e      	add	r1, pc, #56	; (adr r1, 8009800 <scalbn+0xf8>)
 80097c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097cc:	e7b4      	b.n	8009738 <scalbn+0x30>
 80097ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097d2:	3236      	adds	r2, #54	; 0x36
 80097d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80097dc:	4620      	mov	r0, r4
 80097de:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <scalbn+0x108>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	e7e8      	b.n	80097b6 <scalbn+0xae>
 80097e4:	f3af 8000 	nop.w
 80097e8:	c2f8f359 	.word	0xc2f8f359
 80097ec:	01a56e1f 	.word	0x01a56e1f
 80097f0:	8800759c 	.word	0x8800759c
 80097f4:	7e37e43c 	.word	0x7e37e43c
 80097f8:	8800759c 	.word	0x8800759c
 80097fc:	fe37e43c 	.word	0xfe37e43c
 8009800:	c2f8f359 	.word	0xc2f8f359
 8009804:	81a56e1f 	.word	0x81a56e1f
 8009808:	43500000 	.word	0x43500000
 800980c:	ffff3cb0 	.word	0xffff3cb0
 8009810:	3c900000 	.word	0x3c900000

08009814 <_init>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr

08009820 <_fini>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr
